{"version":3,"file":"bundle.cjs","sources":["../src/hooks/useCombinedRefs.ts","../src/hooks/useClickOutside.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useFocusRef.ts","../src/formatters/SelectCellFormatter.tsx","../src/formatters/ValueFormatter.tsx","../src/formatters/ToggleGroupFormatter.tsx","../src/utils/domUtils.ts","../src/Columns.tsx","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/hooks/useLatestFunc.ts","../src/headerCells/SortableHeaderCell.tsx","../src/HeaderCell.tsx","../src/utils/columnUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/selectedCellUtils.ts","../src/utils/index.ts","../src/HeaderRow.tsx","../src/FilterRow.tsx","../src/Cell.tsx","../src/editors/EditorContainer.tsx","../src/EditCell.tsx","../src/Row.tsx","../src/GroupCell.tsx","../src/GroupRow.tsx","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/DataGrid.tsx","../src/editors/TextEditor.tsx"],"sourcesContent":["import { useCallback } from 'react';\n\nexport function useCombinedRefs<T>(...refs: readonly React.Ref<T>[]) {\n  return useCallback(\n    (handle: T | null) => {\n      for (const ref of refs) {\n        if (typeof ref === 'function') {\n          ref(handle);\n        } else if (ref !== null) {\n          // @ts-expect-error: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065\n          ref.current = handle;\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    refs\n  );\n}\n","import { useRef, useEffect } from 'react';\n\n/**\n * Detecting outside click on a react component is surprisingly hard.\n * A general approach is to have a global click handler on the document\n * which checks if the click target is inside the editor container or\n * not using editorContainer.contains(e.target). This approach works well\n * until portals are used for editors. Portals render children into a DOM\n * node that exists outside the DOM hierarchy of the parent component so\n * editorContainer.contains(e.target) does not work. Here are some examples\n * of the DOM structure with different types of editors\n *\n *\n * SimpleEditor for example Texbox (No Portals)\n *   <div data-grid>..</div>\n *   <div portal-created-by-the-grid-for-editors>\n *      <div editor-container>\n *        <div simple-editor>..</div>\n *      </div>\n *   </div>\n *\n * ComplexEditor for example Modals (using Portals)\n *   <div data-grid>..</div>\n *   <div portal-created-by-the-grid-for-editors>\n *      <div editor-container>\n *        // Nothing here\n *      </div>\n *   </div>\n *   <div portal-created-by-the-editor>\n *     <div complex-editor>..</div>\n *   </div>\n *\n *\n * One approach to detect outside click is to use synthetic event bubbling through\n * portals. An event fired from inside a portal will propagate to ancestors\n * in the containing React tree, even if those elements are not ancestors\n * in the DOM tree. This means a click handler can be attached on the window\n * and on the editor container. The editor container can set a flag to notify\n * that the click was inside the editor and the window click handler can use\n * this flag to call onClickOutside. This approach however has a few caveats\n * - Click handler on the window is set using window.addEventListener\n * - Click handler on the editor container is set using onClick prop\n *\n * This means if a child component inside the editor calls e.stopPropagation\n * then the click handler on the editor container will not be called whereas\n * the document click handler will be called.\n * https://github.com/facebook/react/issues/12518\n *\n * To solve this issue onClickCapture event is used.\n */\n\nexport function useClickOutside(onClick: () => void) {\n  const frameRequestRef = useRef<number | undefined>();\n\n  function cancelAnimationFrameRequest() {\n    if (typeof frameRequestRef.current === 'number') {\n      cancelAnimationFrame(frameRequestRef.current);\n      frameRequestRef.current = undefined;\n    }\n  }\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `handleDocumentClick` might otherwise miss valid click events.\n  // To that end we instead access the latest `onClick` prop via a ref.\n  const onClickRef = useRef((): void => {\n    throw new Error('Cannot call an event handler while rendering.');\n  });\n\n  useEffect(() => {\n    onClickRef.current = onClick;\n  });\n\n  useEffect(() => {\n    function onOutsideClick() {\n      frameRequestRef.current = undefined;\n      onClickRef.current();\n    }\n\n    function onWindowCaptureClick() {\n      cancelAnimationFrameRequest();\n      frameRequestRef.current = requestAnimationFrame(onOutsideClick);\n    }\n\n    window.addEventListener('click', onWindowCaptureClick, { capture: true });\n\n    return () => {\n      window.removeEventListener('click', onWindowCaptureClick, { capture: true });\n      cancelAnimationFrameRequest();\n    };\n  }, []);\n\n  return cancelAnimationFrameRequest;\n}\n","import { useRef, useState, useLayoutEffect } from 'react';\n\n// https://github.com/microsoft/TypeScript/issues/37861\ninterface ResizeObserverEntry {\n  contentRect: {\n    width: number;\n    height: number;\n  };\n}\n\ntype ResizeObserver = new (callback: (entries: readonly ResizeObserverEntry[]) => void) => {\n  observe: (target: Element) => void;\n  disconnect: () => void;\n};\n\nexport function useGridDimensions(): [React.RefObject<HTMLDivElement>, number, number] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [gridWidth, setGridWidth] = useState(1);\n  const [gridHeight, setGridHeight] = useState(1);\n\n  useLayoutEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const { ResizeObserver } = window as typeof window & { ResizeObserver: ResizeObserver };\n\n    // don't break in jest/jsdom and browsers that don't support ResizeObserver\n    if (ResizeObserver == null) return;\n\n    const resizeObserver = new ResizeObserver(entries => {\n      const { width, height } = entries[0].contentRect;\n      setGridWidth(width);\n      setGridHeight(height);\n    });\n\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, gridWidth, gridHeight];\n}\n","import { useRef, useLayoutEffect } from 'react';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isCellSelected: boolean | undefined) {\n  const ref = useRef<T>(null);\n  useLayoutEffect(() => {\n    if (!isCellSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isCellSelected]);\n\n  return ref;\n}\n","import clsx from 'clsx';\n\nimport { useFocusRef } from '../hooks/useFocusRef';\n\ntype SharedInputProps = Pick<React.InputHTMLAttributes<HTMLInputElement>,\n  | 'disabled'\n  | 'tabIndex'\n  | 'onClick'\n  | 'aria-label'\n  | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected?: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  isCellSelected,\n  disabled,\n  onClick,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const inputRef = useFocusRef<HTMLInputElement>(isCellSelected);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label className={clsx('rdg-checkbox-label', { 'rdg-checkbox-label-disabled': disabled })}>\n      <input\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        tabIndex={tabIndex}\n        ref={inputRef}\n        type=\"checkbox\"\n        className=\"rdg-checkbox-input\"\n        disabled={disabled}\n        checked={value}\n        onChange={handleChange}\n        onClick={onClick}\n      />\n      <div className=\"rdg-checkbox\" />\n    </label>\n  );\n}\n","import type { FormatterProps } from '../types';\n\nexport function ValueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nexport function ToggleGroupFormatter<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const cellRef = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={cellRef}\n      className=\"rdg-group-cell-content\"\n      tabIndex={-1}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className=\"rdg-caret\">\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","export function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function wrapEvent<E extends React.SyntheticEvent>(ourHandler: React.EventHandler<E>, theirHandler: React.EventHandler<E> | undefined) {\n  if (theirHandler === undefined) return ourHandler;\n\n  return function(event: E) {\n    ourHandler(event);\n    theirHandler(event);\n  };\n}\n","import { SelectCellFormatter } from './formatters';\nimport type { Column } from './types';\nimport { stopPropagation } from './utils/domUtils';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n      />\n    );\n  },\n  formatter(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select\"\n        tabIndex={-1}\n        isCellSelected={props.isCellSelected}\n        value={props.isRowSelected}\n        onClick={stopPropagation}\n        onChange={props.onRowSelectionChange}\n      />\n    );\n  },\n  groupFormatter(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select Group\"\n        tabIndex={-1}\n        isCellSelected={props.isCellSelected}\n        value={props.isRowSelected}\n        onChange={props.onRowSelectionChange}\n        // Stop propagation to prevent row selection\n        onClick={stopPropagation}\n      />\n    );\n  }\n};\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { ValueFormatter, ToggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\n\ninterface ViewportColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy?: readonly string[];\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n}\n\nexport function useViewportColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy\n}: ViewportColumnsArgs<R, SR>) {\n  const minColumnWidth = defaultColumnOptions?.minWidth ?? 80;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? ValueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, lastFrozenColumnIndex, totalColumnWidth, totalFrozenColumnWidth, groupBy } = useMemo(() => {\n    let left = 0;\n    let totalWidth = 0;\n    let allocatedWidths = 0;\n    let unassignedColumnsCount = 0;\n    let lastFrozenColumnIndex = -1;\n    type IntermediateColumn = Column<R, SR> & { width: number | undefined; rowGroup?: boolean };\n    let totalFrozenColumnWidth = 0;\n\n    const columns = rawColumns.map(metricsColumn => {\n      let width = getSpecifiedWidth(metricsColumn, columnWidths, viewportWidth);\n\n      if (width === undefined) {\n        unassignedColumnsCount++;\n      } else {\n        width = clampColumnWidth(width, metricsColumn, minColumnWidth);\n        allocatedWidths += width;\n      }\n\n      const column: IntermediateColumn = { ...metricsColumn, width };\n\n      if (rawGroupBy?.includes(column.key)) {\n        column.frozen = true;\n        column.rowGroup = true;\n      }\n\n      if (column.frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const unallocatedWidth = viewportWidth - allocatedWidths;\n    const unallocatedColumnWidth = Math.max(\n      Math.floor(unallocatedWidth / unassignedColumnsCount),\n      minColumnWidth\n    );\n\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    const calculatedColumns: CalculatedColumn<R, SR>[] = columns.map((column, idx) => {\n      // Every column should have a valid width as this stage\n      const width = column.width ?? clampColumnWidth(unallocatedColumnWidth, column, minColumnWidth);\n      const newColumn = {\n        ...column,\n        idx,\n        width,\n        left,\n        sortable: column.sortable ?? defaultSortable,\n        resizable: column.resizable ?? defaultResizable,\n        formatter: column.formatter ?? defaultFormatter\n      };\n\n      if (newColumn.rowGroup) {\n        groupBy.push(column.key);\n        newColumn.groupFormatter = column.groupFormatter ?? ToggleGroupFormatter;\n      }\n\n      totalWidth += width;\n      left += width;\n      return newColumn;\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      const lastFrozenColumn = calculatedColumns[lastFrozenColumnIndex];\n      lastFrozenColumn.isLastFrozenColumn = true;\n      totalFrozenColumnWidth = lastFrozenColumn.left + lastFrozenColumn.width;\n    }\n\n    return {\n      columns: calculatedColumns,\n      lastFrozenColumnIndex,\n      totalFrozenColumnWidth,\n      totalColumnWidth: totalWidth,\n      groupBy\n    };\n  }, [columnWidths, defaultFormatter, defaultResizable, defaultSortable, minColumnWidth, rawColumns, rawGroupBy, viewportWidth]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = Math.min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columns[colVisibleStartIdx];\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columns[colVisibleEndIdx];\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = Math.max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = Math.min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [columns, lastFrozenColumnIndex, scrollLeft, totalFrozenColumnWidth, viewportWidth]);\n\n  const viewportColumns = useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < colOverscanStartIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [colOverscanEndIdx, colOverscanStartIdx, columns]);\n\n  return { columns, viewportColumns, totalColumnWidth, lastFrozenColumnIndex, totalFrozenColumnWidth, groupBy };\n}\n\nfunction getSpecifiedWidth<R, SR>(\n  { key, width }: Column<R, SR>,\n  columnWidths: ReadonlyMap<string, number>,\n  viewportWidth: number\n): number | undefined {\n  if (columnWidths.has(key)) {\n    // Use the resized width if available\n    return columnWidths.get(key);\n  }\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (typeof width === 'string' && /^\\d+%$/.test(width)) {\n    return Math.floor(viewportWidth * parseInt(width, 10) / 100);\n  }\n  return undefined;\n}\n\nfunction clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: Column<R, SR>,\n  minColumnWidth: number\n): number {\n  width = Math.max(width, minWidth ?? minColumnWidth);\n\n  if (typeof maxWidth === 'number') {\n    return Math.min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { useMemo } from 'react';\nimport type { GroupRow, GroupByDictionary } from '../types';\n\nconst RENDER_BACTCH_SIZE = 8;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number;\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper?: (rows: readonly R[], columnKey: string) => Record<string, readonly R[]>;\n  expandedGroupIds?: ReadonlySet<unknown>;\n}\n\n// https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || !rowGrouper) return [undefined, rawRows.length];\n\n    const groupRows = (rows: readonly R[], [groupByKey, ...remainingGroupByKeys]: readonly string[], startRowIndex: number): [GroupByDictionary<R>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] = remainingGroupByKeys.length === 0\n          ? [childRows, childRows.length]\n          : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, allGroupRows] = useMemo(() => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, allGroupRows];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (rows: GroupByDictionary<R> | readonly R[], parentId: string | undefined, level: number): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, allGroupRows];\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const isGroupRow = <R>(row: unknown): row is GroupRow<R> => allGroupRows.has(row);\n\n  const overscanThreshold = 4;\n  const rowVisibleStartIdx = Math.floor(scrollTop / rowHeight);\n  const rowVisibleEndIdx = Math.min(rows.length - 1, Math.floor((scrollTop + clientHeight) / rowHeight));\n  const rowOverscanStartIdx = Math.max(0, Math.floor((rowVisibleStartIdx - overscanThreshold) / RENDER_BACTCH_SIZE) * RENDER_BACTCH_SIZE);\n  const rowOverscanEndIdx = Math.min(rows.length - 1, Math.ceil((rowVisibleEndIdx + overscanThreshold) / RENDER_BACTCH_SIZE) * RENDER_BACTCH_SIZE);\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    isGroupRow\n  };\n}\n","import { useRef, useEffect, useCallback } from 'react';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends (...args: any[]) => any>(fn: T) {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback((...args: Parameters<T>) => {\n    ref.current(...args);\n  }, []);\n}\n","import type { HeaderCellProps } from '../HeaderCell';\nimport type { SortDirection } from '../enums';\n\ntype SharedHeaderCellProps<R, SR> = Pick<HeaderCellProps<R, SR>,\n  | 'column'\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n>;\n\ninterface Props<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nexport default function SortableHeaderCell<R, SR>({\n  column,\n  onSort,\n  sortColumn,\n  sortDirection,\n  children\n}: Props<R, SR>) {\n  sortDirection = sortColumn === column.key && sortDirection || 'NONE';\n  let sortText = '';\n  if (sortDirection === 'ASC') {\n    sortText = '\\u25B2';\n  } else if (sortDirection === 'DESC') {\n    sortText = '\\u25BC';\n  }\n\n  function onClick() {\n    if (!onSort) return;\n    const { sortDescendingFirst } = column;\n    let direction: SortDirection;\n    switch (sortDirection) {\n      case 'ASC':\n        direction = sortDescendingFirst ? 'NONE' : 'DESC';\n        break;\n      case 'DESC':\n        direction = sortDescendingFirst ? 'ASC' : 'NONE';\n        break;\n      default:\n        direction = sortDescendingFirst ? 'DESC' : 'ASC';\n        break;\n    }\n    onSort(column.key, direction);\n  }\n\n  return (\n    <span className=\"rdg-header-sort-cell\" onClick={onClick}>\n      <span className=\"rdg-header-sort-name\">{children}</span>\n      <span>{sortText}</span>\n    </span>\n  );\n}\n","import clsx from 'clsx';\n\nimport type { CalculatedColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport SortableHeaderCell from './headerCells/SortableHeaderCell';\nimport type { SortDirection } from './enums';\n\nfunction getAriaSort(sortDirection?: SortDirection) {\n  switch (sortDirection) {\n    case 'ASC':\n      return 'ascending';\n    case 'DESC':\n      return 'descending';\n    default:\n      return 'none';\n  }\n}\n\ntype SharedHeaderRowProps<R, SR> = Pick<HeaderRowProps<R, SR>,\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n  | 'allRowsSelected'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  onResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  onResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumn,\n  sortDirection,\n  onSort\n}: HeaderCellProps<R, SR>) {\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right } = currentTarget.getBoundingClientRect();\n    const offset = right - event.clientX;\n\n    if (offset > 11) { // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      if (event.pointerId !== pointerId) return;\n      if (event.pointerType === 'mouse' && event.buttons !== 1) {\n        onPointerUp();\n        return;\n      }\n      const width = event.clientX + offset - currentTarget.getBoundingClientRect().left;\n      if (width > 0) {\n        onResize(column, width);\n      }\n    }\n\n    function onPointerUp() {\n      if (event.pointerId !== pointerId) return;\n      window.removeEventListener('pointermove', onPointerMove);\n      window.removeEventListener('pointerup', onPointerUp);\n    }\n\n    event.preventDefault();\n    window.addEventListener('pointermove', onPointerMove);\n    window.addEventListener('pointerup', onPointerUp);\n  }\n\n  function getCell() {\n    if (column.headerRenderer) {\n      return (\n        <column.headerRenderer\n          column={column}\n          sortColumn={sortColumn}\n          sortDirection={sortDirection}\n          onSort={onSort}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={onAllRowsSelectionChange}\n        />\n      );\n    }\n\n    if (column.sortable) {\n      return (\n        <SortableHeaderCell\n          column={column}\n          onSort={onSort}\n          sortColumn={sortColumn}\n          sortDirection={sortDirection}\n        >\n          {column.name}\n        </SortableHeaderCell>\n      );\n    }\n\n    return column.name;\n  }\n\n  const className = clsx('rdg-cell', column.headerCellClass, {\n    'rdg-cell-resizable': column.resizable,\n    'rdg-cell-frozen': column.frozen,\n    'rdg-cell-frozen-last': column.isLastFrozenColumn,\n    'rdg-cell-align-right': column.alignment === 'right'\n  });\n  const style: React.CSSProperties = {\n    width: column.width,\n    left: column.left\n  };\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-sort={sortColumn === column.key ? getAriaSort(sortDirection) : undefined}\n      className={className}\n      style={style}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n        <div className={clsx('rdg-cell-fake-background')} />\n      {getCell()}\n    </div>\n  );\n}\n","import type { CalculatedColumn } from '../types';\n\nexport function getColumnScrollPosition<R, SR>(columns: readonly CalculatedColumn<R, SR>[], idx: number, currentScrollLeft: number, currentClientWidth: number): number {\n  let left = 0;\n  let frozen = 0;\n\n  for (let i = 0; i < idx; i++) {\n    const column = columns[i];\n    if (column) {\n      if (column.width) {\n        left += column.width;\n      }\n      if (column.frozen) {\n        frozen += column.width;\n      }\n    }\n  }\n\n  const selectedColumn = columns[idx];\n  if (selectedColumn) {\n    const scrollLeft = left - frozen - currentScrollLeft;\n    const scrollRight = left + selectedColumn.width - currentScrollLeft;\n\n    if (scrollLeft < 0) {\n      return scrollLeft;\n    }\n    if (scrollRight > currentClientWidth) {\n      return scrollRight - currentClientWidth;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (key === 'Tab' && (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement)) {\n    return target.matches('.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child');\n  }\n  return false;\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n","import type { CellNavigationMode } from '../enums';\nimport type { CalculatedColumn, Position, GroupRow } from '../types';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({ selectedPosition, columns, rows, isGroupRow }: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return column.editor != null\n    && !column.rowGroup\n    && !isGroupRow(row)\n    && (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false;\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rowsCount: number;\n  nextPosition: Position;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({ cellNavigationMode, columns, rowsCount, nextPosition }: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  if (cellNavigationMode !== 'NONE') {\n    const { idx, rowIdx } = nextPosition;\n    const columnsCount = columns.length;\n    const isAfterLastColumn = idx === columnsCount;\n    const isBeforeFirstColumn = idx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = rowIdx === rowsCount - 1;\n        if (!isLastRow) {\n          return {\n            idx: 0,\n            rowIdx: rowIdx + 1\n          };\n        }\n      } else if (cellNavigationMode === 'LOOP_OVER_ROW') {\n        return {\n          rowIdx,\n          idx: 0\n        };\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = rowIdx === 0;\n        if (!isFirstRow) {\n          return {\n            rowIdx: rowIdx - 1,\n            idx: columnsCount - 1\n          };\n        }\n      } else if (cellNavigationMode === 'LOOP_OVER_ROW') {\n        return {\n          rowIdx,\n          idx: columnsCount - 1\n        };\n      }\n    }\n  }\n\n  return nextPosition;\n}\n\ninterface CanExitGridOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rowsCount: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid<R, SR>({ cellNavigationMode, columns, rowsCount, selectedPosition: { rowIdx, idx }, shiftKey }: CanExitGridOpts<R, SR>): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === columns.length - 1;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === rowsCount - 1;\n    const atFirstRow = rowIdx === 0;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n","export * from './domUtils';\nexport * from './columnUtils';\nexport * from './keyboardUtils';\nexport * from './selectedCellUtils';\n\nexport function assertIsValidKeyGetter<R>(keyGetter: unknown): asserts keyGetter is (row: R) => React.Key {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n","import { useCallback, memo } from 'react';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn } from './types';\nimport { assertIsValidKeyGetter } from './utils';\nimport type { DataGridProps } from './DataGrid';\n\ntype SharedDataGridProps<R, SR> = Pick<DataGridProps<R, SR>,\n  | 'rows'\n  | 'onSelectedRowsChange'\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n  | 'rowKeyGetter'\n>;\n\nexport interface HeaderRowProps<R, SR> extends SharedDataGridProps<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n}\n\nfunction HeaderRow<R, SR>({\n  columns,\n  rows,\n  rowKeyGetter,\n  onSelectedRowsChange,\n  allRowsSelected,\n  onColumnResize,\n  sortColumn,\n  sortDirection,\n  onSort\n}: HeaderRowProps<R, SR>) {\n  const handleAllRowsSelectionChange = useCallback((checked: boolean) => {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter(rowKeyGetter);\n\n    const newSelectedRows = new Set<React.Key>();\n    if (checked) {\n      for (const row of rows) {\n        newSelectedRows.add(rowKeyGetter(row));\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }, [onSelectedRowsChange, rows, rowKeyGetter]);\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className=\"rdg-header-row\"\n    >\n      {columns.map(column => {\n        return (\n          <HeaderCell<R, SR>\n            key={column.key}\n            column={column}\n            onResize={onColumnResize}\n            allRowsSelected={allRowsSelected}\n            onAllRowsSelectionChange={handleAllRowsSelectionChange}\n            onSort={onSort}\n            sortColumn={sortColumn}\n            sortDirection={sortDirection}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR>(props: HeaderRowProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn, Filters } from './types';\nimport type { DataGridProps } from './DataGrid';\n\ntype SharedDataGridProps<R, SR> = Pick<DataGridProps<R, SR>,\n  | 'filters'\n  | 'onFiltersChange'\n>;\n\ninterface FilterRowProps<R, SR> extends SharedDataGridProps<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n}\n\nfunction FilterRow<R, SR>({\n  columns,\n  filters,\n  onFiltersChange\n}: FilterRowProps<R, SR>) {\n  function onChange(key: string, value: unknown) {\n    const newFilters: Filters = { ...filters };\n    newFilters[key] = value;\n    onFiltersChange?.(newFilters);\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={2}\n      className=\"rdg-filter-row\"\n    >\n      {columns.map(column => {\n        const { key } = column;\n\n        const className = clsx('rdg-cell', {\n          'rdg-cell-frozen': column.frozen,\n          'rdg-cell-frozen-last': column.isLastFrozenColumn\n        });\n        const style: React.CSSProperties = {\n          width: column.width,\n          left: column.left\n        };\n\n        return (\n          <div\n            key={key}\n            style={style}\n            className={className}\n          >\n            {column.filterRenderer && (\n              <column.filterRenderer\n                column={column}\n                value={filters?.[column.key]}\n                onChange={value => onChange(key, value)}\n              />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(FilterRow) as <R, SR>(props: FilterRowProps<R, SR>) => JSX.Element;\n","import { forwardRef, memo, useRef } from 'react';\nimport clsx from 'clsx';\n\nimport type { CellRendererProps } from './types';\nimport { wrapEvent } from './utils';\nimport { useCombinedRefs } from './hooks';\n\nfunction Cell<R, SR>({\n  className,\n  column,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  isRowSelected,\n  row,\n  rowIdx,\n  dragHandleProps,\n  onRowClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  handleCellMouseDown,\n  selectedPosition,\n  selectRow,\n  handleDragEnter,\n  draggedOverRowIdx,\n  draggedOverColumnIdx,\n  hasFirstCopiedCell,\n  hasLastCopiedCell,\n  isFilling,\n  bottomRowIdx,\n  selectedCellsInfo,\n  ...props\n}: CellRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  const cellRef = useRef<HTMLDivElement>(null);\n\n  const { cellClass } = column;\n  className = clsx(\n    'rdg-cell',\n    {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.isLastFrozenColumn,\n      'rdg-cell-selected': isCellSelected,\n      'rdg-cell-copied': isCopied,\n      'rdg-cell-dragged-over': checkIsDraggedOver(),\n      'rdg-cell-align-right': column.alignment === 'right'\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n\n  function checkIsDraggedOver() {\n      if (selectedCellsInfo === selectedPosition.rowIdx && isFilling) {\n          return false;\n      }\n\n      if (selectedCellsInfo !== selectedPosition.rowIdx && column.idx !== draggedOverColumnIdx?.[0] && isFilling) {\n          return false;\n      }\n\n      return isDraggedOver;\n  }\n\n  function selectCellWrapper(openEditor?: boolean) {\n    if (!dragHandleProps) {\n        selectCell({ idx: column.idx, rowIdx }, openEditor);\n    }\n\n    if (dragHandleProps && openEditor) {\n        selectCell({ idx: column.idx, rowIdx }, openEditor);\n    }\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.preventDefault();\n    selectCellWrapper(column.editorOptions?.editOnClick);\n    onRowClick?.(rowIdx, row, column);\n  }\n\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n      event.preventDefault();\n      selectCellWrapper(false);\n      handleCellMouseDown(event);\n  }\n\n  function handleMouseEnter(event: React.MouseEvent<HTMLDivElement>) {\n      if (event.buttons === 1) {\n        handleDragEnter(column.idx);\n      }\n  }\n\n  function handleContextMenu() {\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick() {\n    selectCellWrapper(true);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(rowIdx, newRow);\n  }\n\n  function onRowSelectionChange(checked: boolean, isShiftClick: boolean) {\n    selectRow({ rowIdx, checked, isShiftClick });\n  }\n\n  function checkForTopActiveBorder(): boolean {\n      if (isFilling) {\n          if (selectedPosition.rowIdx === rowIdx && isDraggedOver && selectedPosition.rowIdx !== bottomRowIdx) {\n              return true;\n          }\n\n          if (selectedPosition.rowIdx === bottomRowIdx && isDraggedOver && draggedOverRowIdx === rowIdx && !checkIsDraggedOver()) {\n              return true;\n          }\n      }\n\n      if (isCopied && hasFirstCopiedCell) {\n          return true;\n      }\n\n      return false;\n  }\n\n  function checkForBottomActiveBorder(): boolean {\n      if (isFilling && rowIdx === bottomRowIdx && !checkIsDraggedOver() && isDraggedOver) {\n          return true;\n      }\n\n      if (isCopied && hasLastCopiedCell) {\n          return true;\n      }\n\n      return false;\n  }\n\n  function checkForRightActiveBorder(): boolean {\n      if (\n          isFilling &&\n          draggedOverColumnIdx &&\n          draggedOverColumnIdx[draggedOverColumnIdx.length - 1] === column.idx &&\n          isDraggedOver &&\n          !checkIsDraggedOver()\n      ) {\n          return true;\n      }\n\n      if (isCopied) {\n          return true;\n      }\n\n      return false;\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      ref={useCombinedRefs(cellRef, ref)}\n      className={className}\n      style={{\n        width: column.width,\n        left: column.left\n      }}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n      onMouseEnter={handleMouseEnter}\n      onDoubleClick={wrapEvent(handleDoubleClick, onDoubleClick)}\n      onContextMenu={wrapEvent(handleContextMenu, onContextMenu)}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          <div className={clsx(\n            'rdg-cell-fake-background',\n            {\n              'rdg-cell-fake-background-active-top': checkForTopActiveBorder(),\n              'rdg-cell-fake-background-active-bottom': checkForBottomActiveBorder(),\n              'rdg-cell-fake-background-active-right': checkForRightActiveBorder(),\n              'rdg-cell-fake-background-active-left': (isFilling && draggedOverColumnIdx && draggedOverColumnIdx[0] === column.idx && isDraggedOver && !checkIsDraggedOver()) || isCopied\n          })} />\n          <column.formatter\n            column={column}\n            rowIdx={rowIdx}\n            row={row}\n            isCellSelected={isCellSelected}\n            isRowSelected={isRowSelected}\n            onRowSelectionChange={onRowSelectionChange}\n            onRowChange={handleRowChange}\n          />\n          {dragHandleProps && (\n            <div className=\"rdg-cell-drag-handle\" {...dragHandleProps} />\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(forwardRef(Cell)) as <R, SR = unknown>(props: CellRendererProps<R, SR> & React.RefAttributes<HTMLDivElement>) => JSX.Element;\n","import { createPortal } from 'react-dom';\n\nimport type { EditorProps } from '../types';\nimport { useClickOutside } from '../hooks';\n\nexport default function EditorContainer<R, SR>({\n  row,\n  column,\n  onRowChange,\n  ...props\n}: EditorProps<R, SR>) {\n  const onClickCapture = useClickOutside(() => onRowChange(row, true));\n  if (column.editor === undefined) return null;\n\n  const editor = (\n    <div className=\"rdg-editor-container\" onClickCapture={onClickCapture}>\n      <column.editor\n        row={row}\n        column={column}\n        onRowChange={onRowChange}\n        {...props}\n      />\n    </div>\n  );\n\n  if (column.editorOptions?.createPortal) {\n    return createPortal(editor, props.editorPortalTarget);\n  }\n\n  return editor;\n}\n","import { useState, useCallback } from 'react';\nimport clsx from 'clsx';\n\nimport EditorContainer from './editors/EditorContainer';\nimport type { CellRendererProps, SharedEditorProps, Omit } from './types';\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>,\n  | 'rowIdx'\n  | 'row'\n  | 'column'\n>;\n\ninterface EditCellProps<R, SR> extends SharedCellRendererProps<R, SR>, Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  editorProps: SharedEditorProps<R>;\n}\n\nexport default function EditCell<R, SR>({\n  className,\n  column,\n  row,\n  rowIdx,\n  editorProps,\n  ...props\n}: EditCellProps<R, SR>) {\n  const [dimensions, setDimensions] = useState<{ left: number; top: number } | null>(null);\n\n  const cellRef = useCallback(node => {\n    if (node !== null) {\n      const { left, top } = node.getBoundingClientRect();\n      setDimensions({ left, top });\n    }\n  }, []);\n\n  const { cellClass } = column;\n  className = clsx(\n    'rdg-cell',\n    {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.isLastFrozenColumn\n    },\n    'rdg-cell-selected',\n    'rdg-cell-editing',\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n\n  function getCellContent() {\n    if (dimensions === null) return;\n    const { scrollTop: docTop, scrollLeft: docLeft } = document.scrollingElement ?? document.documentElement;\n    const { left, top } = dimensions;\n    const gridLeft = left + docLeft;\n    const gridTop = top + docTop;\n\n    return (\n      <EditorContainer\n        {...editorProps}\n        rowIdx={rowIdx}\n        column={column}\n        left={gridLeft}\n        top={gridTop}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected\n      ref={cellRef}\n      className={className}\n      style={{\n        width: column.width,\n        left: column.left\n      }}\n      {...props}\n    >\n      {getCellContent()}\n    </div>\n  );\n}\n","import { memo, forwardRef } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport EditCell from './EditCell';\nimport type { RowRendererProps, SelectedCellProps } from './types';\n\nfunction Row<R, SR = unknown>({\n  cellRenderer: CellRenderer = Cell,\n  className,\n  id,\n  rowIdx,\n  isRowSelected,\n  copiedCellIdx,\n  getDraggedOverCellIdx,\n  row,\n  viewportColumns,\n  selectedCellProps,\n  selectedPosition,\n  isFilling,\n  isMultipleRows,\n  onRowClick,\n  rowClass,\n  selectedCellsInfo,\n  setDraggedOverRowIdx,\n  setDraggedOverColumnIdx,\n  hasFirstCopiedCell,\n  hasLastCopiedCell,\n  top,\n  onRowChange,\n  selectCell,\n  selectRow,\n  handleCellMouseDown,\n  bottomRowIdx,\n  dragHandleProps,\n  draggedOverRowIdx,\n  draggedOverColumnIdx,\n  'aria-rowindex': ariaRowIndex,\n  'aria-selected': ariaSelected,\n  ...props\n}: RowRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  function handleDragEnter(colIdx: number) {\n      if (isFilling && selectedCellsInfo) {\n          if (selectedCellsInfo === selectedPosition.rowIdx) {\n              if (colIdx === selectedPosition.idx) {\n                  setDraggedOverRowIdx?.(rowIdx);\n              } else {\n                  setDraggedOverRowIdx?.(selectedCellsInfo);\n              }\n          } else {\n              setDraggedOverRowIdx?.(selectedCellsInfo);\n          }\n      } else {\n          setDraggedOverRowIdx?.(rowIdx);\n      }\n    if (isFilling) {\n        setDraggedOverColumnIdx?.(colIdx);\n    } else {\n        setDraggedOverColumnIdx?.(selectedPosition.idx);\n    }\n  }\n\n  function hasJustFilled() {\n      if (draggedOverColumnIdx && draggedOverColumnIdx.length > 1 && !isFilling) {\n          return true;\n      }\n\n      return false;\n  }\n\n  className = clsx(\n    'rdg-row',\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, {\n      'rdg-row-selected': isRowSelected,\n      'rdg-group-row-selected': selectedCellProps?.idx === -1\n    },\n    rowClass?.(row),\n    className\n  );\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      aria-selected={ariaSelected}\n      ref={ref}\n      className={className}\n      style={{ top }}\n      {...props}\n    >\n      {viewportColumns.map(column => {\n        const isCellSelected = selectedCellProps?.idx === column.idx;\n        const isBottomCell = rowIdx === bottomRowIdx && column.idx === selectedPosition.idx;\n        if (selectedCellProps?.mode === 'EDIT' && isCellSelected) {\n          return (\n            <EditCell<R, SR>\n              key={column.key}\n              rowIdx={rowIdx}\n              column={column}\n              row={row}\n              onKeyDown={selectedCellProps.onKeyDown}\n              editorProps={selectedCellProps.editorProps}\n            />\n          );\n        }\n\n        return (\n          <CellRenderer\n            key={column.key}\n            rowIdx={rowIdx}\n            column={column}\n            row={row}\n            isCopied={copiedCellIdx === column.idx}\n            hasFirstCopiedCell={hasFirstCopiedCell}\n            hasLastCopiedCell={hasLastCopiedCell}\n            isDraggedOver={getDraggedOverCellIdx(rowIdx, column.idx) === column.idx}\n            isCellSelected={isCellSelected}\n            isRowSelected={isRowSelected}\n            dragHandleProps={isBottomCell && !hasJustFilled() ? dragHandleProps : undefined}\n            onFocus={isCellSelected ? (selectedCellProps as SelectedCellProps).onFocus : undefined}\n            onKeyDown={isCellSelected ? selectedCellProps!.onKeyDown : undefined}\n            onRowClick={onRowClick}\n            onRowChange={onRowChange}\n            selectCell={selectCell}\n            selectRow={selectRow}\n            handleCellMouseDown={handleCellMouseDown}\n            handleDragEnter={handleDragEnter}\n            selectedPosition={selectedPosition}\n            draggedOverRowIdx={draggedOverRowIdx}\n            draggedOverColumnIdx={draggedOverColumnIdx}\n            isFilling={isFilling}\n            bottomRowIdx={bottomRowIdx}\n            selectedCellsInfo={selectedCellsInfo}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(forwardRef(Row)) as <R, SR = unknown>(props: RowRendererProps<R, SR> & React.RefAttributes<HTMLDivElement>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<GroupRowRendererProps<R, SR>,\n  | 'id'\n  | 'rowIdx'\n  | 'groupKey'\n  | 'childRows'\n  | 'isExpanded'\n  | 'isRowSelected'\n  | 'selectRow'\n  | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  rowIdx,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  isRowSelected,\n  column,\n  groupColumnIndex,\n  selectRow,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  function onRowSelectionChange(checked: boolean) {\n    selectRow({ rowIdx, checked, isShiftClick: false });\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      key={column.key}\n      className={clsx('rdg-cell', {\n        'rdg-cell-frozen': column.frozen,\n        'rdg-cell-frozen-last': column.isLastFrozenColumn,\n        'rdg-cell-selected': isCellSelected\n      })}\n      style={{\n        width: column.width,\n        left: column.left,\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n    >\n      {column.groupFormatter && (!column.rowGroup || groupColumnIndex === column.idx) && (\n        <column.groupFormatter\n          groupKey={groupKey}\n          childRows={childRows}\n          column={column}\n          isExpanded={isExpanded}\n          isCellSelected={isCellSelected}\n          isRowSelected={isRowSelected}\n          onRowSelectionChange={onRowSelectionChange}\n          toggleGroup={toggleGroup}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn, Position, SelectRowEvent, Omit } from './types';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\n\nexport interface GroupRowRendererProps<R, SR = unknown> extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  top: number;\n  level: number;\n  selectedCellIdx?: number;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectCell: (position: Position, enableEditor?: boolean) => void;\n  selectRow: (selectRowEvent: SelectRowEvent) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  top,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectCell,\n  selectRow,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function selectGroup() {\n    selectCell({ rowIdx, idx: -1 });\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-level={level}\n      aria-expanded={isExpanded}\n      className={clsx(\n        'rdg-row',\n        'rdg-group-row',\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, {\n          'rdg-row-selected': isRowSelected,\n          'rdg-group-row-selected': selectedCellIdx === -1 // Select row if there is no selected cell\n        })}\n      onClick={selectGroup}\n      style={{ top }}\n      {...props}\n    >\n      {viewportColumns.map(column => (\n        <GroupCell<R, SR>\n          key={column.key}\n          id={id}\n          rowIdx={rowIdx}\n          groupKey={groupKey}\n          childRows={childRows}\n          isExpanded={isExpanded}\n          isRowSelected={isRowSelected}\n          isCellSelected={selectedCellIdx === column.idx}\n          column={column}\n          groupColumnIndex={idx}\n          selectRow={selectRow}\n          toggleGroup={toggleGroup}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\n\nimport type { CellRendererProps } from './types';\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'column'>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  row\n}: SummaryCellProps<R, SR>) {\n  const { summaryFormatter: SummaryFormatter, width, left, summaryCellClass } = column;\n  const className = clsx(\n    'rdg-cell',\n    {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.isLastFrozenColumn\n    },\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      className={className}\n      style={{ width, left }}\n    >\n      {SummaryFormatter && <SummaryFormatter column={column} row={row} />}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport SummaryCell from './SummaryCell';\nimport type { RowRendererProps } from './types';\n\ntype SharedRowRendererProps<R, SR> = Pick<RowRendererProps<R, SR>,\n  | 'viewportColumns'\n  | 'rowIdx'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  bottom: number;\n}\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  row,\n  viewportColumns,\n  bottom,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={`rdg-row rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'} rdg-summary-row`}\n      style={{ bottom }}\n    >\n      {viewportColumns.map(column => (\n        <SummaryCell<R, SR>\n          key={column.key}\n          column={column}\n          row={row}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import {\n  forwardRef,\n  useState,\n  useRef,\n  useLayoutEffect,\n  useImperativeHandle,\n  useCallback\n} from 'react';\nimport clsx from 'clsx';\n\nimport { useGridDimensions, useViewportColumns, useViewportRows, useLatestFunc } from './hooks';\nimport HeaderRow from './HeaderRow';\nimport FilterRow from './FilterRow';\nimport Row from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport {\n  assertIsValidKeyGetter,\n  getColumnScrollPosition,\n  onEditorNavigation,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Filters,\n  Position,\n  RowRendererProps,\n  SelectRowEvent,\n  SelectedCellProps,\n  EditCellProps,\n  FillEvent,\n  PasteEvent\n} from './types';\nimport type { CellNavigationMode, SortDirection } from './enums';\n\ninterface SelectCellState extends Position {\n  mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  mode: 'EDIT';\n  row: R;\n  originalRow: R;\n  key: string | null;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<Column<R, SR>,\n  | 'formatter'\n  | 'minWidth'\n  | 'resizable'\n  | 'sortable'\n>;\n\nconst body = globalThis.document?.body;\n\nexport interface DataGridHandle {\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, openEditor?: boolean) => void;\n}\n\ntype SharedDivProps = Pick<React.HTMLAttributes<HTMLDivElement>,\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'className'\n  | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: readonly SR[];\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: (row: R) => React.Key;\n  onRowsChange?: (rows: R[]) => void;\n\n  /**\n   * Dimensions props\n   */\n  /** The height of each row in pixels */\n  rowHeight?: number;\n  /** The height of the header row in pixels */\n  headerRowHeight?: number;\n  /** The height of the header filter row in pixels */\n  headerFiltersHeight?: number;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: ReadonlySet<React.Key>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: (selectedRows: Set<React.Key>) => void;\n  /** The key of the column which is currently being sorted */\n  sortColumn?: string;\n  /** The direction to sort the sortColumn*/\n  sortDirection?: SortDirection;\n  /** Function called whenever grid is sorted*/\n  onSort?: (columnKey: string, direction: SortDirection) => void;\n  filters?: Filters;\n  onFiltersChange?: (filters: Filters) => void;\n  defaultColumnOptions?: DefaultColumnOptions<R, SR>;\n  groupBy?: readonly string[];\n  rowGrouper?: (rows: readonly R[], columnKey: string) => Record<string, readonly R[]>;\n  expandedGroupIds?: ReadonlySet<unknown>;\n  onExpandedGroupIdsChange?: (expandedGroupIds: Set<unknown>) => void;\n  onFill?: (event: FillEvent<R, SR>) => R[];\n  onPaste?: (event: PasteEvent<R>) => R[];\n\n  /**\n   * Custom renderers\n   */\n  rowRenderer?: React.ComponentType<RowRendererProps<R, SR>>;\n  emptyRowsRenderer?: React.ComponentType;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: (rowIdx: number, row: R, column: CalculatedColumn<R, SR>) => void;\n  /** Called when the grid is scrolled */\n  onScroll?: (event: React.UIEvent<HTMLDivElement>) => void;\n  /** Called when a column is resized */\n  onColumnResize?: (idx: number, width: number) => void;\n  /** Function called whenever selected cell is changed */\n  onSelectedCellChange?: (position: Position) => void;\n\n  /**\n   * Toggles and modes\n   */\n  /** Toggles whether filters row is displayed or not */\n  enableFilterRow?: boolean;\n  cellNavigationMode?: CellNavigationMode;\n\n  /**\n   * Miscellaneous\n   */\n  /** The node where the editor portal should mount. */\n  editorPortalTarget?: Element;\n  rowClass?: (row: R) => string | undefined;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n*/\nfunction DataGrid<R, SR>({\n  // Grid and data Props\n  columns: rawColumns,\n  rows: rawRows,\n  summaryRows,\n  rowKeyGetter,\n  onRowsChange,\n  // Dimensions props\n  rowHeight = 35,\n  headerRowHeight = rowHeight,\n  headerFiltersHeight = 45,\n  // Feature props\n  selectedRows,\n  onSelectedRowsChange,\n  sortColumn,\n  sortDirection,\n  onSort,\n  filters,\n  onFiltersChange,\n  defaultColumnOptions,\n  groupBy: rawGroupBy,\n  rowGrouper,\n  expandedGroupIds,\n  onExpandedGroupIdsChange,\n  // Custom renderers\n  rowRenderer: RowRenderer = Row,\n  emptyRowsRenderer: EmptyRowsRenderer,\n  // Event props\n  onRowClick,\n  onScroll,\n  onColumnResize,\n  onSelectedCellChange,\n  onFill,\n  onPaste,\n  // Toggles and modes\n  enableFilterRow = false,\n  cellNavigationMode = 'NONE',\n  // Miscellaneous\n  editorPortalTarget = body,\n  className,\n  style,\n  rowClass,\n  // ARIA\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy,\n  'aria-describedby': ariaDescribedBy\n}: DataGridProps<R, SR>, ref: React.Ref<DataGridHandle>) {\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>({ idx: -1, rowIdx: -1, mode: 'SELECT' });\n  const [copiedCells, setCopiedCells] = useState<{ rows: R[]; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [isFilling, setFilling] = useState(false);\n  const [selectedCellsInfo, setSelectedCells] = useState<number | undefined>(undefined);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [draggedOverColumnIdx, setOverColIdx] = useState<number[] | undefined>(undefined);\n\n  /**\n   * refs\n   */\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const isCellFocusable = useRef(false);\n  const firstSelectedColIdx = useRef(-1);\n  const latestDraggedOverColIdx = useRef(-1);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const selectRowWrapper = useLatestFunc(selectRow);\n  const selectCellWrapper = useLatestFunc(selectCell);\n  const toggleGroupWrapper = useLatestFunc(toggleGroup);\n  const handleFormatterRowChangeWrapper = useLatestFunc(handleFormatterRowChange);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const headerRowsCount = enableFilterRow ? 2 : 1;\n  const summaryRowsCount = summaryRows?.length ?? 0;\n  const totalHeaderHeight = headerRowHeight + (enableFilterRow ? headerFiltersHeight : 0);\n  const clientHeight = gridHeight - totalHeaderHeight - summaryRowsCount * rowHeight;\n  const isSelectable = selectedRows !== undefined && onSelectedRowsChange !== undefined;\n\n  const { columns, viewportColumns, totalColumnWidth, lastFrozenColumnIndex, totalFrozenColumnWidth, groupBy } = useViewportColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined\n  });\n\n  const { rowOverscanStartIdx, rowOverscanEndIdx, rows, rowsCount, isGroupRow } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds\n  });\n\n  const hasGroups = groupBy.length > 0 && rowGrouper;\n  const minColIdx = hasGroups ? -1 : 0;\n\n  // Cell drag is not supported on a treegrid\n  const enableCellDragAndDrop = hasGroups ? false : onFill !== undefined;\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (selectedPosition === prevSelectedPosition.current || selectedPosition.mode === 'EDIT' || !isCellWithinBounds(selectedPosition)) return;\n    prevSelectedPosition.current = selectedPosition;\n    scrollToCell(selectedPosition);\n\n    if (isCellFocusable.current) {\n      isCellFocusable.current = false;\n      return;\n    }\n    focusSinkRef.current!.focus({ preventScroll: true });\n  });\n\n  useImperativeHandle(ref, () => ({\n    scrollToColumn(idx: number) {\n      scrollToCell({ idx });\n    },\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: rowIdx * rowHeight,\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n  * callbacks\n  */\n  const handleColumnResize = useCallback((column: CalculatedColumn<R, SR>, width: number) => {\n    const newColumnWidths = new Map(columnWidths);\n    newColumnWidths.set(column.key, width);\n    setColumnWidths(newColumnWidths);\n\n    onColumnResize?.(column.idx, width);\n  }, [columnWidths, onColumnResize]);\n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  const setDraggedOverColumnIdx = useCallback((colIdx?: number) => {\n    const selectedCellColIdx = firstSelectedColIdx.current;\n\n    if (draggedOverColumnIdx && !draggedOverColumnIdx.some(i => i === colIdx)) return;\n\n    if (!colIdx && selectedCellColIdx) {\n        setOverColIdx([selectedCellColIdx]);\n        latestDraggedOverColIdx.current = selectedCellColIdx;\n    }\n\n    if (colIdx) {\n        const colIdxArray = [];\n        for (let i = selectedCellColIdx; i <= colIdx; i++) {\n            colIdxArray.push(i);\n        }\n        latestDraggedOverColIdx.current = colIdx;\n        setOverColIdx(colIdxArray);\n    }\n  }, []);\n\n  /**\n  * event handlers\n  */\n  function selectRow({ rowIdx, checked, isShiftClick }: SelectRowEvent) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    const row = rows[rowIdx];\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = Math.sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { key, keyCode } = event;\n    const row = rows[selectedPosition.rowIdx];\n\n    if (\n      onPaste\n      && isCtrlKeyHeldDown(event)\n      && isCellWithinBounds(selectedPosition)\n      && !isGroupRow(row)\n      && selectedPosition.idx !== -1\n      && selectedPosition.mode === 'SELECT'\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (\n      isCellWithinBounds(selectedPosition)\n      && isGroupRow(row)\n      && selectedPosition.idx === -1\n      && (\n        // Collapse the current group row if it is focused and is in expanded state\n        (key === 'ArrowLeft' && row.isExpanded)\n        // Expand the current group row if it is focused and is in collapsed state\n        || (key === 'ArrowRight' && !row.isExpanded)\n      )) {\n      event.preventDefault(); // Prevents scrolling\n      toggleGroup(row.id);\n      return;\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCells(null);\n        closeEditor();\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleFocus() {\n    isCellFocusable.current = true;\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    setScrollTop(scrollTop);\n    setScrollLeft(scrollLeft);\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function commitEditorChanges() {\n    if (\n      columns[selectedPosition.idx]?.editor === undefined\n      || selectedPosition.mode === 'SELECT'\n      || selectedPosition.row === selectedPosition.originalRow) {\n      return;\n    }\n\n    const updatedRows = [...rawRows];\n    updatedRows[getRawRowIdx(selectedPosition.rowIdx)] = selectedPosition.row;\n    onRowsChange?.(updatedRows);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const overRowIdx = latestDraggedOverRowIdx.current || -1;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx + 1;\n    const targetRows = overRowIdx ? rawRows.slice(startRowIndex, endRowIndex) : rawRows.slice(rowIdx, rowIdx + 1);\n    setCopiedCells({ rows: targetRows, columnKey: columns[idx].key });\n  }\n\n  function handlePaste() {\n    const { idx, rowIdx } = selectedPosition;\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n    if (\n      !onPaste\n      || !onRowsChange\n      || copiedCells === null\n      || !isCellEditable(selectedPosition)\n    ) {\n      return;\n    }\n\n    const { rows, columnKey } = copiedCells;\n    const startRowIndex = rowIdx;\n    const endRowIndex = rowIdx + rows.length;\n\n    const updatedTargetRows = onPaste({\n      sourceRows: rows,\n      sourceColumnKey: columnKey,\n      targetRows: rows.length === 1 ? [targetRow] : rawRows.slice(startRowIndex, endRowIndex),\n      targetColumnKey: columns[idx].key\n    });\n\n    const updatedRows = [...rawRows];\n    for (let i = startRowIndex; i < endRowIndex; i++) {\n      updatedRows[i] = updatedTargetRows[i - startRowIndex];\n    }\n\n    onRowsChange(updatedRows);\n    setDraggedOverRowIdx(endRowIndex - 1);\n    setDraggedOverColumnIdx(idx);\n    setCopiedCells(null);\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!isCellWithinBounds(selectedPosition)) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key } = event;\n    const column = columns[selectedPosition.idx];\n\n    if (selectedPosition.mode === 'EDIT') {\n      if (key === 'Enter') {\n        // Custom editors can listen for the event and stop propagation to prevent commit\n        commitEditorChanges();\n        closeEditor();\n      }\n      return;\n    }\n\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        key,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    const overColIdx = latestDraggedOverColIdx.current;\n    const firstColIdx = firstSelectedColIdx.current;\n    if (overRowIdx === undefined || overColIdx < 0 || !onFill || !onRowsChange) return;\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[rowIdx];\n    if (overColIdx !== firstColIdx) {\n        const startRowIndex = rowIdx < overRowIdx ? rowIdx : overRowIdx;\n        let endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx + 1;\n        const targetRows = rawRows.slice(startRowIndex, startRowIndex === endRowIndex ? endRowIndex + 1 : endRowIndex);\n        const targetCols = columns.filter((_, i: number) => i > firstColIdx && i <= overColIdx);\n        const updatedTargetRows = onFill({ columnKey: columns[idx].key, targetCols, sourceRow, targetRows, across: true });\n        const updatedRows = [...rawRows];\n        for (let i = startRowIndex; i < endRowIndex; i++) {\n          updatedRows[i] = updatedTargetRows[i - startRowIndex];\n        }\n        onRowsChange(updatedRows);\n    } else {\n        const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n        const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n        const targetRows = rawRows.slice(startRowIndex, endRowIndex);\n\n        const updatedTargetRows = onFill({ columnKey: columns[idx].key, sourceRow, targetRows, across: false });\n        const updatedRows = [...rawRows];\n        for (let i = startRowIndex; i < endRowIndex; i++) {\n          updatedRows[i] = updatedTargetRows[i - startRowIndex];\n        }\n        onRowsChange(updatedRows);\n    }\n    setCopiedCells(null);\n  }\n\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    setFilling(true);\n    setSelectedCells(draggedOverRowIdx || selectedPosition.rowIdx);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      setFilling(false);\n      setSelectedCells(undefined);\n      handleDragEnd();\n    }\n  }\n\n  function handleCellMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n    }\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    if (!onFill || !onRowsChange) return;\n\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[rowIdx];\n    const targetRows = rawRows.slice(rowIdx + 1);\n\n    const updatedTargetRows = onFill({ columnKey: columns[idx].key, sourceRow, targetRows, across: false });\n    const updatedRows = [...rawRows];\n    for (let i = rowIdx + 1; i < updatedRows.length; i++) {\n      updatedRows[i] = updatedTargetRows[i - rowIdx - 1];\n    }\n    onRowsChange(updatedRows);\n  }\n\n  function handleFormatterRowChange(rowIdx: number, row: Readonly<R>) {\n    const newRows = [...rawRows];\n    newRows[rowIdx] = row;\n    onRowsChange?.(newRows);\n  }\n\n  function handleEditorRowChange(row: Readonly<R>, commitChanges?: boolean) {\n    if (selectedPosition.mode === 'SELECT') return;\n    if (commitChanges) {\n      const updatedRows = [...rawRows];\n      updatedRows[getRawRowIdx(selectedPosition.rowIdx)] = row;\n      onRowsChange?.(updatedRows);\n      closeEditor();\n    } else {\n      setSelectedPosition(position => ({ ...position, row }));\n    }\n  }\n\n  function handleOnClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      commitEditorChanges();\n    }\n    closeEditor();\n  }\n\n  /**\n   * utils\n   */\n  function isCellWithinBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= 0 && rowIdx < rows.length && idx >= minColIdx && idx < columns.length;\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return isCellWithinBounds(position)\n      && isSelectedCellEditable<R, SR>({ columns, rows, selectedPosition: position, isGroupRow });\n  }\n\n  function selectCell(position: Position, enableEditor = false): void {\n    if (!isCellWithinBounds(position)) return;\n    commitEditorChanges();\n\n    setDraggedOverRowIdx(undefined);\n    setOverColIdx(undefined);\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', key: null, row, originalRow: row });\n    } else {\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n      firstSelectedColIdx.current = position.idx;\n    }\n    onSelectedCellChange?.({ ...position });\n  }\n\n  function closeEditor() {\n    if (selectedPosition.mode === 'SELECT') return;\n    setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n  }\n\n  function scrollToCell({ idx, rowIdx }: Partial<Position>): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (typeof idx === 'number' && idx > lastFrozenColumnIndex) {\n      const { clientWidth } = current;\n      const { left, width } = columns[idx];\n      const isCellAtLeftBoundary = left < scrollLeft + width + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = left + width > clientWidth + scrollLeft;\n      if (isCellAtLeftBoundary || isCellAtRightBoundary) {\n        const newScrollLeft = getColumnScrollPosition(columns, idx, scrollLeft, clientWidth);\n        current.scrollLeft = scrollLeft + newScrollLeft;\n      }\n    }\n\n    if (typeof rowIdx === 'number') {\n      if (rowIdx * rowHeight < scrollTop) {\n        // at top boundary, scroll to the row's top\n        current.scrollTop = rowIdx * rowHeight;\n      } else if ((rowIdx + 1) * rowHeight > scrollTop + clientHeight) {\n        // at bottom boundary, scroll the next row's top to the bottom of the viewport\n        current.scrollTop = (rowIdx + 1) * rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = isCellWithinBounds(selectedPosition) && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (\n      key === 'ArrowLeft'\n      && isRowSelected\n      && isGroupRow(row)\n      && !row.isExpanded\n      && row.level !== 0\n    ) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case 'ArrowLeft':\n        return { idx: idx - 1, rowIdx };\n      case 'ArrowRight':\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        if (selectedPosition.idx === -1 && selectedPosition.rowIdx === -1) {\n          return shiftKey ? { idx: columns.length - 1, rowIdx: rows.length - 1 } : { idx: 0, rowIdx: 0 };\n        }\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return ctrlKey ? { idx: 0, rowIdx: 0 } : { idx: 0, rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return ctrlKey ? { idx: columns.length - 1, rowIdx: rows.length - 1 } : { idx: columns.length - 1, rowIdx };\n      case 'PageUp':\n        return { idx, rowIdx: rowIdx - Math.floor(clientHeight / rowHeight) };\n      case 'PageDown':\n        return { idx, rowIdx: rowIdx + Math.floor(clientHeight / rowHeight) };\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (selectedPosition.mode === 'EDIT') {\n      const onNavigation = columns[selectedPosition.idx].editorOptions?.onNavigation ?? onEditorNavigation;\n      if (!onNavigation(event)) return;\n    }\n    const { key, shiftKey } = event;\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    let nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      // If we are in a position to leave the grid, stop editing but stay in that cell\n      if (canExitGrid({ shiftKey, cellNavigationMode, columns, rowsCount: rows.length, selectedPosition })) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE'\n        ? 'CHANGE_ROW'\n        : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    nextPosition = getNextSelectedCellPosition<R, SR>({\n      columns,\n      rowsCount: rows.length,\n      cellNavigationMode: mode,\n      nextPosition\n    });\n\n    selectCell(nextPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number, colIdx: number): number | undefined {\n    const { rowIdx } = selectedPosition;\n    if (draggedOverRowIdx === undefined) return;\n    if (draggedOverColumnIdx === undefined) return;\n    if (!draggedOverColumnIdx.some(i => i === colIdx)) return;\n    if (rowIdx < draggedOverRowIdx && (currentRowIdx < rowIdx || currentRowIdx > draggedOverRowIdx)) return;\n    if (rowIdx > draggedOverRowIdx && (currentRowIdx > rowIdx || currentRowIdx < draggedOverRowIdx)) return;\n\n    let isDraggedOver = false;\n\n    if (rowIdx === draggedOverRowIdx && currentRowIdx === rowIdx) {\n        isDraggedOver = draggedOverColumnIdx.some(i => i === colIdx);\n    } else {\n        isDraggedOver = rowIdx <= draggedOverRowIdx\n          ? rowIdx <= currentRowIdx && currentRowIdx <= draggedOverRowIdx && draggedOverColumnIdx.some(i => i === colIdx)\n          : rowIdx >= currentRowIdx && currentRowIdx >= draggedOverRowIdx && draggedOverColumnIdx.some(i => i === colIdx);\n    }\n\n    return isDraggedOver ? colIdx : undefined;\n  }\n\n  function getSelectedCellProps(rowIdx: number): SelectedCellProps | EditCellProps<R> | undefined {\n    if (selectedPosition.rowIdx !== rowIdx) return;\n\n    if (selectedPosition.mode === 'EDIT') {\n      return {\n        mode: 'EDIT',\n        idx: selectedPosition.idx,\n        onKeyDown: handleKeyDown,\n        editorProps: {\n          editorPortalTarget,\n          rowHeight,\n          row: selectedPosition.row,\n          onRowChange: handleEditorRowChange,\n          onClose: handleOnClose\n        }\n      };\n    }\n\n    return {\n      mode: 'SELECT',\n      idx: selectedPosition.idx,\n      onFocus: handleFocus,\n      onKeyDown: handleKeyDown,\n      dragHandleProps: enableCellDragAndDrop && isCellEditable(selectedPosition)\n        ? { onMouseDown: handleMouseDown, onDoubleClick: handleDoubleClick }\n        : undefined\n    };\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n    let startRowIndex = 0;\n    for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n      const row = rows[rowIdx];\n      const top = rowIdx * rowHeight + totalHeaderHeight;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        rowElements.push(\n          <GroupRowRenderer<R, SR>\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={viewportColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            top={top}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedPosition.rowIdx === rowIdx ? selectedPosition.idx : undefined}\n            isRowSelected={isSelectable && row.childRows.every(cr => selectedRows?.has(rowKeyGetter!(cr)))}\n            onFocus={selectedPosition.rowIdx === rowIdx ? handleFocus : undefined}\n            onKeyDown={selectedPosition.rowIdx === rowIdx ? handleKeyDown : undefined}\n            selectCell={selectCellWrapper}\n            selectRow={selectRowWrapper}\n            toggleGroup={toggleGroupWrapper}\n\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key: React.Key = hasGroups ? startRowIndex : rowIdx;\n      let isRowSelected = false;\n      let firstCopiedCell = null;\n      let lastCopiedCell = null;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n        if (copiedCells !== null) {\n            firstCopiedCell = rowKeyGetter(copiedCells.rows[0]);\n            lastCopiedCell = rowKeyGetter(copiedCells.rows[copiedCells.rows.length - 1]);\n        }\n      }\n\n      rowElements.push(\n        <RowRenderer\n          aria-rowindex={headerRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1} // aria-rowindex is 1 based\n          aria-selected={isSelectable ? isRowSelected : undefined}\n          key={key}\n          rowIdx={rowIdx}\n          row={row}\n          viewportColumns={viewportColumns}\n          isRowSelected={isRowSelected}\n          onRowClick={onRowClick}\n          rowClass={rowClass}\n          top={top}\n          copiedCellIdx={copiedCells !== null && typeof rowKeyGetter === 'function' && copiedCells.rows.some(r => rowKeyGetter(r) === key) ? columns.findIndex(c => c.key === copiedCells.columnKey) : undefined}\n          hasFirstCopiedCell={copiedCells !== null && firstCopiedCell === key}\n          hasLastCopiedCell={copiedCells !== null && lastCopiedCell === key}\n          getDraggedOverCellIdx={getDraggedOverCellIdx}\n          setDraggedOverRowIdx={isDragging ? setDraggedOverRowIdx : undefined}\n          setDraggedOverColumnIdx={isDragging ? setDraggedOverColumnIdx : undefined}\n          selectedCellProps={getSelectedCellProps(rowIdx)}\n          onRowChange={handleFormatterRowChangeWrapper}\n          selectCell={selectCellWrapper}\n          selectRow={selectRowWrapper}\n          handleCellMouseDown={handleCellMouseDown}\n          selectedPosition={selectedPosition}\n          bottomRowIdx={draggedOverRowIdx && draggedOverRowIdx > selectedPosition.rowIdx ? draggedOverRowIdx : selectedPosition.rowIdx}\n          dragHandleProps={{\n              onMouseDown: handleMouseDown,\n              onDoubleClick: handleDoubleClick\n          }}\n          isFilling={isFilling}\n          isMultipleRows={selectedPosition.rowIdx !== draggedOverRowIdx}\n          selectedCellsInfo={selectedCellsInfo}\n          draggedOverRowIdx={draggedOverRowIdx}\n          draggedOverColumnIdx={draggedOverColumnIdx}\n        />\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx >= columns.length || selectedPosition.rowIdx >= rows.length) {\n    setSelectedPosition({ idx: -1, rowIdx: -1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  if (selectedPosition.mode === 'EDIT' && rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n    // Discard changes if rows are updated from outside\n    closeEditor();\n  }\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx('rdg', { 'rdg-viewport-dragging': isDragging }, className)}\n      style={{\n        ...style,\n        '--header-row-height': `${headerRowHeight}px`,\n        '--filter-row-height': `${headerFiltersHeight}px`,\n        '--row-width': `${totalColumnWidth}px`,\n        '--row-height': `${rowHeight}px`\n      } as unknown as React.CSSProperties}\n      ref={gridRef}\n      onScroll={handleScroll}\n    >\n      <HeaderRow<R, SR>\n        rowKeyGetter={rowKeyGetter}\n        rows={rawRows}\n        columns={viewportColumns}\n        onColumnResize={handleColumnResize}\n        allRowsSelected={selectedRows?.size === rawRows.length}\n        onSelectedRowsChange={onSelectedRowsChange}\n        sortColumn={sortColumn}\n        sortDirection={sortDirection}\n        onSort={onSort}\n      />\n      {enableFilterRow && (\n        <FilterRow<R, SR>\n          columns={viewportColumns}\n          filters={filters}\n          onFiltersChange={onFiltersChange}\n        />\n      )}\n      {rows.length === 0 && EmptyRowsRenderer ? <EmptyRowsRenderer /> : (\n        <>\n          <div\n            ref={focusSinkRef}\n            tabIndex={0}\n            className=\"rdg-focus-sink\"\n            onKeyDown={handleKeyDown}\n          />\n          <div style={{ height: Math.max(rows.length * rowHeight, clientHeight) }} />\n          {getViewportRows()}\n          {summaryRows?.map((row, rowIdx) => (\n            <SummaryRow<R, SR>\n              aria-rowindex={headerRowsCount + rowsCount + rowIdx + 1}\n              key={rowIdx}\n              rowIdx={rowIdx}\n              row={row}\n              bottom={rowHeight * (summaryRows.length - 1 - rowIdx)}\n              viewportColumns={viewportColumns}\n            />\n          ))}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown>(props: DataGridProps<R, SR> & React.RefAttributes<DataGridHandle>) => JSX.Element;\n","import type { EditorProps } from '../types';\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function TextEditor<TRow, TSummaryRow = unknown>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className=\"rdg-text-editor\"\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={event => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n"],"names":["useCombinedRefs","refs","useCallback","handle","ref","current","useClickOutside","onClick","frameRequestRef","useRef","cancelAnimationFrameRequest","cancelAnimationFrame","undefined","onClickRef","Error","useEffect","onOutsideClick","onWindowCaptureClick","requestAnimationFrame","window","addEventListener","capture","removeEventListener","useGridDimensions","gridRef","gridWidth","setGridWidth","useState","gridHeight","setGridHeight","useLayoutEffect","ResizeObserver","resizeObserver","entries","width","height","contentRect","observe","disconnect","useFocusRef","isCellSelected","focus","preventScroll","SelectCellFormatter","value","tabIndex","disabled","onChange","ariaLabel","ariaLabelledBy","inputRef","handleChange","e","target","checked","nativeEvent","shiftKey","ValueFormatter","props","row","column","key","ToggleGroupFormatter","groupKey","isExpanded","toggleGroup","cellRef","handleKeyDown","d","stopPropagation","event","wrapEvent","ourHandler","theirHandler","SELECT_COLUMN_KEY","SelectColumn","name","maxWidth","resizable","sortable","frozen","headerRenderer","allRowsSelected","onAllRowsSelectionChange","formatter","isRowSelected","onRowSelectionChange","groupFormatter","useViewportColumns","rawColumns","columnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","minColumnWidth","minWidth","defaultFormatter","defaultSortable","defaultResizable","columns","lastFrozenColumnIndex","totalColumnWidth","totalFrozenColumnWidth","groupBy","useMemo","left","totalWidth","allocatedWidths","unassignedColumnsCount","map","metricsColumn","getSpecifiedWidth","clampColumnWidth","includes","rowGroup","sort","aKey","frozenA","bKey","frozenB","indexOf","unallocatedWidth","unallocatedColumnWidth","Math","max","floor","calculatedColumns","idx","newColumn","push","lastFrozenColumn","isLastFrozenColumn","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","length","firstUnfrozenColumnIdx","min","colVisibleStartIdx","colVisibleEndIdx","viewportColumns","colIdx","has","get","test","parseInt","RENDER_BACTCH_SIZE","isReadonlyArray","arr","Array","isArray","useViewportRows","rawRows","rowHeight","clientHeight","scrollTop","rowGrouper","expandedGroupIds","groupedRows","rowsCount","groupRows","rows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","childRows","Object","childGroups","childRowsCount","allGroupRows","Set","flattenedRows","expandGroup","parentId","level","keys","forEach","posInSet","id","groupRow","setSize","add","isGroupRow","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","rowOverscanStartIdx","rowOverscanEndIdx","ceil","useLatestFunc","fn","args","SortableHeaderCell","onSort","sortColumn","sortDirection","children","sortText","sortDescendingFirst","direction","getAriaSort","HeaderCell","onResize","onPointerDown","pointerType","buttons","currentTarget","pointerId","right","getBoundingClientRect","offset","clientX","onPointerMove","onPointerUp","preventDefault","getCell","className","clsx","headerCellClass","alignment","style","getColumnScrollPosition","currentScrollLeft","currentClientWidth","i","selectedColumn","scrollRight","onEditorNavigation","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","nonInputKeys","isCtrlKeyHeldDown","ctrlKey","metaKey","isDefaultCellInput","isSelectedCellEditable","selectedPosition","rowIdx","editor","editable","getNextSelectedCellPosition","cellNavigationMode","nextPosition","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","assertIsValidKeyGetter","keyGetter","HeaderRow","rowKeyGetter","onSelectedRowsChange","onColumnResize","handleAllRowsSelectionChange","newSelectedRows","memo","FilterRow","filters","onFiltersChange","newFilters","filterRenderer","Cell","isCopied","isDraggedOver","dragHandleProps","onRowClick","onDoubleClick","onContextMenu","onRowChange","selectCell","handleCellMouseDown","selectRow","handleDragEnter","draggedOverRowIdx","draggedOverColumnIdx","hasFirstCopiedCell","hasLastCopiedCell","isFilling","bottomRowIdx","selectedCellsInfo","cellClass","checkIsDraggedOver","selectCellWrapper","openEditor","handleClick","editorOptions","editOnClick","handleMouseDown","handleMouseEnter","handleContextMenu","handleDoubleClick","handleRowChange","newRow","isShiftClick","checkForTopActiveBorder","checkForBottomActiveBorder","checkForRightActiveBorder","forwardRef","EditorContainer","onClickCapture","createPortal","editorPortalTarget","EditCell","editorProps","dimensions","setDimensions","node","top","getCellContent","docTop","docLeft","document","scrollingElement","documentElement","gridLeft","gridTop","Row","cellRenderer","CellRenderer","copiedCellIdx","getDraggedOverCellIdx","selectedCellProps","isMultipleRows","rowClass","setDraggedOverRowIdx","setDraggedOverColumnIdx","ariaRowIndex","ariaSelected","hasJustFilled","isBottomCell","mode","onKeyDown","onFocus","GroupCell","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","GroupedRow","selectedCellIdx","selectGroup","SummaryCell","summaryFormatter","SummaryFormatter","summaryCellClass","SummaryRow","bottom","body","globalThis","DataGrid","summaryRows","onRowsChange","headerRowHeight","headerFiltersHeight","selectedRows","onExpandedGroupIdsChange","rowRenderer","RowRenderer","emptyRowsRenderer","EmptyRowsRenderer","onScroll","onSelectedCellChange","onFill","onPaste","enableFilterRow","ariaDescribedBy","setScrollTop","setScrollLeft","setColumnWidths","Map","setSelectedPosition","copiedCells","setCopiedCells","isDragging","setDragging","setFilling","setSelectedCells","setOverRowIdx","setOverColIdx","focusSinkRef","prevSelectedPosition","latestDraggedOverRowIdx","lastSelectedRowIdx","isCellFocusable","firstSelectedColIdx","latestDraggedOverColIdx","selectRowWrapper","handleFormatterRowChangeWrapper","handleFormatterRowChange","headerRowsCount","summaryRowsCount","totalHeaderHeight","isSelectable","hasGroups","minColIdx","enableCellDragAndDrop","isCellWithinBounds","scrollToCell","useImperativeHandle","scrollToColumn","scrollToRow","scrollTo","behavior","handleColumnResize","newColumnWidths","set","selectedCellColIdx","some","colIdxArray","childRow","rowKey","delete","previousRowIdx","step","sign","expandedGroupId","newExpandedGroupIds","keyCode","cKey","vKey","handleCopy","handlePaste","closeEditor","navigate","handleCellInput","handleFocus","handleScroll","getRawRowIdx","commitEditorChanges","originalRow","updatedRows","overRowIdx","endRowIndex","targetRows","slice","columnKey","targetRow","isCellEditable","updatedTargetRows","sourceRows","sourceColumnKey","targetColumnKey","onCellKeyDown","isDefaultPrevented","handleDragEnd","overColIdx","firstColIdx","sourceRow","targetCols","filter","_","across","onMouseOver","onMouseUp","newRows","handleEditorRowChange","commitChanges","position","handleOnClose","enableEditor","clientWidth","isCellAtLeftBoundary","isCellAtRightBoundary","newScrollLeft","getNextPosition","parentRowIdx","parentRow","onNavigation","currentRowIdx","getSelectedCellProps","onClose","onMouseDown","getViewportRows","rowElements","every","cr","firstCopiedCell","lastCopiedCell","r","findIndex","c","size","autoFocusAndSelect","input","select","TextEditor"],"mappings":"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"}