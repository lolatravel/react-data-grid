{"version":3,"file":"bundle.js","sources":["../src/hooks/useCombinedRefs.ts","../src/hooks/useClickOutside.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useFocusRef.ts","../src/formatters/SelectCellFormatter.tsx","../src/formatters/ValueFormatter.tsx","../src/formatters/ToggleGroupFormatter.tsx","../src/utils/domUtils.ts","../src/Columns.tsx","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/hooks/useLatestFunc.ts","../src/headerCells/SortableHeaderCell.tsx","../src/HeaderCell.tsx","../src/utils/columnUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/selectedCellUtils.ts","../src/utils/index.ts","../src/HeaderRow.tsx","../src/FilterRow.tsx","../src/Cell.tsx","../src/editors/EditorContainer.tsx","../src/EditCell.tsx","../src/Row.tsx","../src/GroupCell.tsx","../src/GroupRow.tsx","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/DataGrid.tsx","../src/editors/TextEditor.tsx"],"sourcesContent":["import { useCallback } from 'react';\n\nexport function useCombinedRefs<T>(...refs: readonly React.Ref<T>[]) {\n  return useCallback(\n    (handle: T | null) => {\n      for (const ref of refs) {\n        if (typeof ref === 'function') {\n          ref(handle);\n        } else if (ref !== null) {\n          // @ts-expect-error: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065\n          ref.current = handle;\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    refs\n  );\n}\n","import  { useRef, useEffect } from 'react';\n\n/**\n * Detecting outside click on a react component is surprisingly hard.\n * A general approach is to have a global click handler on the document\n * which checks if the click target is inside the editor container or\n * not using editorContainer.contains(e.target). This approach works well\n * until portals are used for editors. Portals render children into a DOM\n * node that exists outside the DOM hierarchy of the parent component so\n * editorContainer.contains(e.target) does not work. Here are some examples\n * of the DOM structure with different types of editors\n *\n *\n * SimpleEditor for example Texbox (No Portals)\n *   <div data-grid>..</div>\n *   <div portal-created-by-the-grid-for-editors>\n *      <div editor-container>\n *        <div simple-editor>..</div>\n *      </div>\n *   </div>\n *\n * ComplexEditor for example Modals (using Portals)\n *   <div data-grid>..</div>\n *   <div portal-created-by-the-grid-for-editors>\n *      <div editor-container>\n *        // Nothing here\n *      </div>\n *   </div>\n *   <div portal-created-by-the-editor>\n *     <div complex-editor>..</div>\n *   </div>\n *\n *\n * One approach to detect outside click is to use synthetic event bubbling through\n * portals. An event fired from inside a portal will propagate to ancestors\n * in the containing React tree, even if those elements are not ancestors\n * in the DOM tree. This means a click handler can be attached on the window\n * and on the editor container. The editor container can set a flag to notify\n * that the click was inside the editor and the window click handler can use\n * this flag to call onClickOutside. This approach however has a few caveats\n * - Click handler on the window is set using window.addEventListener\n * - Click handler on the editor container is set using onClick prop\n *\n * This means if a child component inside the editor calls e.stopPropagation\n * then the click handler on the editor container will not be called whereas\n * the document click handler will be called.\n * https://github.com/facebook/react/issues/12518\n *\n * To solve this issue onClickCapture event is used.\n */\n\nexport function useClickOutside(onClick: () => void) {\n  const frameRequestRef = useRef<number | undefined>();\n\n  function cancelAnimationFrameRequest() {\n    if (typeof frameRequestRef.current === 'number') {\n      cancelAnimationFrame(frameRequestRef.current);\n      frameRequestRef.current = undefined;\n    }\n  }\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `handleDocumentClick` might otherwise miss valid click events.\n  // To that end we instead access the latest `onClick` prop via a ref.\n  const onClickRef = useRef((): void => {\n    throw new Error('Cannot call an event handler while rendering.');\n  });\n\n  useEffect(() => {\n    onClickRef.current = onClick;\n  });\n\n  useEffect(() => {\n    function onOutsideClick() {\n      frameRequestRef.current = undefined;\n      onClickRef.current();\n    }\n\n    function onWindowCaptureClick() {\n      cancelAnimationFrameRequest();\n      frameRequestRef.current = requestAnimationFrame(onOutsideClick);\n    }\n\n    window.addEventListener('click', onWindowCaptureClick, { capture: true });\n\n    return () => {\n      window.removeEventListener('click', onWindowCaptureClick, { capture: true });\n      cancelAnimationFrameRequest();\n    };\n  }, []);\n\n  return cancelAnimationFrameRequest;\n}\n","import { useRef, useState, useLayoutEffect } from 'react';\n\n// https://github.com/microsoft/TypeScript/issues/37861\ninterface ResizeObserverEntry {\n  contentRect: {\n    width: number;\n    height: number;\n  };\n}\n\ntype ResizeObserver = new (callback: (entries: readonly ResizeObserverEntry[]) => void) => {\n  observe: (target: Element) => void;\n  disconnect: () => void;\n};\n\nexport function useGridDimensions(): [React.RefObject<HTMLDivElement>, number, number] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [gridWidth, setGridWidth] = useState(1);\n  const [gridHeight, setGridHeight] = useState(1);\n\n  useLayoutEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const { ResizeObserver } = window as typeof window & { ResizeObserver: ResizeObserver };\n\n    // don't break in jest/jsdom and browsers that don't support ResizeObserver\n    if (ResizeObserver == null) return;\n\n    const resizeObserver = new ResizeObserver(entries => {\n      const { width, height } = entries[0].contentRect;\n      setGridWidth(width);\n      setGridHeight(height);\n    });\n\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, gridWidth, gridHeight];\n}\n","import { useRef, useLayoutEffect } from 'react';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isCellSelected: boolean | undefined) {\n  const ref = useRef<T>(null);\n  useLayoutEffect(() => {\n    if (!isCellSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isCellSelected]);\n\n  return ref;\n}\n","import React from 'react';\nimport clsx from 'clsx';\n\nimport { useFocusRef } from '../hooks/useFocusRef';\n\ntype SharedInputProps = Pick<React.InputHTMLAttributes<HTMLInputElement>,\n  | 'disabled'\n  | 'tabIndex'\n  | 'onClick'\n  | 'aria-label'\n  | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected?: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  isCellSelected,\n  disabled,\n  onClick,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const inputRef = useFocusRef<HTMLInputElement>(isCellSelected);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label className={clsx('rdg-checkbox-label', { 'rdg-checkbox-label-disabled': disabled })}>\n      <input\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        tabIndex={tabIndex}\n        ref={inputRef}\n        type=\"checkbox\"\n        className=\"rdg-checkbox-input\"\n        disabled={disabled}\n        checked={value}\n        onChange={handleChange}\n        onClick={onClick}\n      />\n      <div className=\"rdg-checkbox\" />\n    </label>\n  );\n}\n","import React, { useMemo } from 'react';\nimport type { FormatterProps } from '../types';\n\nexport function ValueFormatter<R>(props: FormatterProps<R>) {\n    const cellValue = props.cell;\n    const valueComponent = useMemo(() => {\n        try {\n            if (typeof cellValue === 'object') {\n                return <>{cellValue.value}</>;\n            }\n            return <>{cellValue}</>;\n        } catch {\n            return null;\n        }\n    }, [cellValue]);\n\n    return valueComponent;\n}\n","import React from 'react';\nimport type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nexport function ToggleGroupFormatter<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const cellRef = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={cellRef}\n      className=\"rdg-group-cell-content\"\n      tabIndex={-1}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className=\"rdg-caret\">\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","export function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n\nexport function wrapEvent<E extends React.SyntheticEvent>(ourHandler: React.EventHandler<E>, theirHandler: React.EventHandler<E> | undefined) {\n  if (theirHandler === undefined) return ourHandler;\n\n  return function(event: E) {\n    ourHandler(event);\n    theirHandler(event);\n  };\n}\n","import React from 'react';\nimport { SelectCellFormatter } from './formatters';\nimport type { Column } from './types';\nimport { stopPropagation } from './utils/domUtils';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n      />\n    );\n  },\n  formatter(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select\"\n        tabIndex={-1}\n        isCellSelected={props.isCellSelected}\n        value={props.isRowSelected}\n        onClick={stopPropagation}\n        onChange={props.onRowSelectionChange}\n      />\n    );\n  },\n  groupFormatter(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select Group\"\n        tabIndex={-1}\n        isCellSelected={props.isCellSelected}\n        value={props.isRowSelected}\n        onChange={props.onRowSelectionChange}\n        // Stop propagation to prevent row selection\n        onClick={stopPropagation}\n      />\n    );\n  }\n};\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { ValueFormatter, ToggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\n\ninterface ViewportColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy?: readonly string[];\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n}\n\nexport function useViewportColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy\n}: ViewportColumnsArgs<R, SR>) {\n  const minColumnWidth = defaultColumnOptions?.minWidth ?? 54;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? ValueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, lastFrozenColumnIndex, totalColumnWidth, totalFrozenColumnWidth, groupBy } = useMemo(() => {\n    let left = 0;\n    let totalWidth = 0;\n    let allocatedWidths = 0;\n    let unassignedColumnsCount = 0;\n    let lastFrozenColumnIndex = -1;\n    type IntermediateColumn = Column<R, SR> & { width: number | undefined; rowGroup?: boolean };\n    let totalFrozenColumnWidth = 0;\n\n    const columns = rawColumns.map(metricsColumn => {\n      let width = getSpecifiedWidth(metricsColumn, columnWidths, viewportWidth);\n\n      if (width === undefined) {\n        unassignedColumnsCount++;\n      } else {\n        width = clampColumnWidth(width, metricsColumn, minColumnWidth);\n        allocatedWidths += width;\n      }\n\n      const column: IntermediateColumn = { ...metricsColumn, width };\n\n      if (rawGroupBy?.includes(column.key)) {\n        column.frozen = true;\n        column.rowGroup = true;\n      }\n\n      if (column.frozen && !column.frozenAlignment) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const unallocatedWidth = viewportWidth - allocatedWidths;\n    const unallocatedColumnWidth = Math.max(\n      Math.floor(unallocatedWidth / unassignedColumnsCount),\n      minColumnWidth\n    );\n\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    const calculatedColumns: CalculatedColumn<R, SR>[] = columns.map((column, idx) => {\n      // Every column should have a valid width as this stage\n      const width = column.width ?? clampColumnWidth(unallocatedColumnWidth, column, minColumnWidth);\n      const newColumn = {\n        ...column,\n        idx,\n        width,\n        left,\n        sortable: column.sortable ?? defaultSortable,\n        resizable: column.resizable ?? defaultResizable,\n        formatter: column.formatter ?? defaultFormatter\n      };\n\n      if (newColumn.rowGroup) {\n        groupBy.push(column.key);\n        newColumn.groupFormatter = column.groupFormatter ?? ToggleGroupFormatter;\n      }\n\n      totalWidth += width;\n      left = column.frozenAlignment === 'right' ? left : left + width;\n      return newColumn;\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      const lastFrozenColumn = calculatedColumns[lastFrozenColumnIndex];\n      lastFrozenColumn.isLastFrozenColumn = true;\n      totalFrozenColumnWidth = lastFrozenColumn.left + lastFrozenColumn.width;\n    }\n\n    return {\n      columns: calculatedColumns,\n      lastFrozenColumnIndex,\n      totalFrozenColumnWidth,\n      totalColumnWidth: totalWidth,\n      groupBy\n    };\n  }, [columnWidths, defaultFormatter, defaultResizable, defaultSortable, minColumnWidth, rawColumns, rawGroupBy, viewportWidth]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = Math.min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columns[colVisibleStartIdx];\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columns[colVisibleEndIdx];\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = Math.max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = Math.min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [columns, lastFrozenColumnIndex, scrollLeft, totalFrozenColumnWidth, viewportWidth]);\n\n  const viewportColumns = useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < colOverscanStartIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [colOverscanEndIdx, colOverscanStartIdx, columns]);\n\n  return { columns, viewportColumns, totalColumnWidth, lastFrozenColumnIndex, totalFrozenColumnWidth, groupBy };\n}\n\nfunction getSpecifiedWidth<R, SR>(\n  { key, width }: Column<R, SR>,\n  columnWidths: ReadonlyMap<string, number>,\n  viewportWidth: number\n): number | undefined {\n  if (columnWidths.has(key)) {\n    // Use the resized width if available\n    return columnWidths.get(key);\n  }\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (typeof width === 'string' && /^\\d+%$/.test(width)) {\n    return Math.floor(viewportWidth * parseInt(width, 10) / 100);\n  }\n  return undefined;\n}\n\nfunction clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: Column<R, SR>,\n  minColumnWidth: number\n): number {\n  width = Math.max(width, minWidth ?? minColumnWidth);\n\n  if (typeof maxWidth === 'number') {\n    return Math.min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { useMemo } from 'react';\nimport type { GroupRow, GroupByDictionary } from '../types';\n\nconst RENDER_BACTCH_SIZE = 8;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number;\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper?: (rows: readonly R[], columnKey: string) => Record<string, readonly R[]>;\n  expandedGroupIds?: ReadonlySet<unknown>;\n}\n\n// https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || !rowGrouper) return [undefined, rawRows.length];\n\n    const groupRows = (rows: readonly R[], [groupByKey, ...remainingGroupByKeys]: readonly string[], startRowIndex: number): [GroupByDictionary<R>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] = remainingGroupByKeys.length === 0\n          ? [childRows, childRows.length]\n          : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, allGroupRows] = useMemo(() => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, allGroupRows];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (rows: GroupByDictionary<R> | readonly R[], parentId: string | undefined, level: number): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, allGroupRows];\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const isGroupRow = <R>(row: unknown): row is GroupRow<R> => allGroupRows.has(row);\n\n  const overscanThreshold = 4;\n  const rowVisibleStartIdx = Math.floor(scrollTop / rowHeight);\n  const rowVisibleEndIdx = Math.min(rows.length - 1, Math.floor((scrollTop + clientHeight) / rowHeight));\n  const rowOverscanStartIdx = Math.max(0, Math.floor((rowVisibleStartIdx - overscanThreshold) / RENDER_BACTCH_SIZE) * RENDER_BACTCH_SIZE);\n  const rowOverscanEndIdx = Math.min(rows.length - 1, Math.ceil((rowVisibleEndIdx + overscanThreshold) / RENDER_BACTCH_SIZE) * RENDER_BACTCH_SIZE);\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    isGroupRow\n  };\n}\n","import { useRef, useEffect, useCallback } from 'react';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends (...args: any[]) => any>(fn: T) {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback((...args: Parameters<T>) => {\n    ref.current(...args);\n  }, []);\n}\n","import React from 'react';\nimport type { HeaderCellProps } from '../HeaderCell';\nimport type { SortDirection } from '../enums';\n\ntype SharedHeaderCellProps<R, SR> = Pick<HeaderCellProps<R, SR>,\n  | 'column'\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n>;\n\ninterface Props<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nexport default function SortableHeaderCell<R, SR>({\n  column,\n  onSort,\n  sortColumn,\n  sortDirection,\n  children\n}: Props<R, SR>) {\n  sortDirection = sortColumn === column.key && sortDirection || 'NONE';\n  let sortText = '';\n  if (sortDirection === 'ASC') {\n    sortText = '\\u25B2';\n  } else if (sortDirection === 'DESC') {\n    sortText = '\\u25BC';\n  }\n\n  function onClick() {\n    if (!onSort) return;\n    const { sortDescendingFirst } = column;\n    let direction: SortDirection;\n    switch (sortDirection) {\n      case 'ASC':\n        direction = sortDescendingFirst ? 'NONE' : 'DESC';\n        break;\n      case 'DESC':\n        direction = sortDescendingFirst ? 'ASC' : 'NONE';\n        break;\n      default:\n        direction = sortDescendingFirst ? 'DESC' : 'ASC';\n        break;\n    }\n    onSort(column.key, direction);\n  }\n\n  return (\n    <span className=\"rdg-header-sort-cell\" onClick={onClick}>\n      <span className=\"rdg-header-sort-name\">{children}</span>\n      <span>{sortText}</span>\n    </span>\n  );\n}\n","import React from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport SortableHeaderCell from './headerCells/SortableHeaderCell';\nimport type { SortDirection } from './enums';\n\nfunction getAriaSort(sortDirection?: SortDirection) {\n  switch (sortDirection) {\n    case 'ASC':\n      return 'ascending';\n    case 'DESC':\n      return 'descending';\n    default:\n      return 'none';\n  }\n}\n\ntype SharedHeaderRowProps<R, SR> = Pick<HeaderRowProps<R, SR>,\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n  | 'allRowsSelected'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  onResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n  gridWidth: number;\n  scrollLeft: number;\n  scrolledToEnd: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  onResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumn,\n  sortDirection,\n  gridWidth,\n  scrollLeft,\n  onSort,\n  scrolledToEnd\n}: HeaderCellProps<R, SR>) {\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right } = currentTarget.getBoundingClientRect();\n    const offset = right - event.clientX;\n\n    if (offset > 11) { // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      if (event.pointerId !== pointerId) return;\n      if (event.pointerType === 'mouse' && event.buttons !== 1) {\n        onPointerUp();\n        return;\n      }\n      const width = event.clientX + offset - currentTarget.getBoundingClientRect().left;\n      if (width > 0) {\n        onResize(column, width);\n      }\n    }\n\n    function onPointerUp() {\n      if (event.pointerId !== pointerId) return;\n      window.removeEventListener('pointermove', onPointerMove);\n      window.removeEventListener('pointerup', onPointerUp);\n    }\n\n    event.preventDefault();\n    window.addEventListener('pointermove', onPointerMove);\n    window.addEventListener('pointerup', onPointerUp);\n  }\n\n  function getCell() {\n    if (column.headerRenderer) {\n      return (\n        <column.headerRenderer\n          column={column}\n          sortColumn={sortColumn}\n          sortDirection={sortDirection}\n          onSort={onSort}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={onAllRowsSelectionChange}\n        />\n      );\n    }\n\n    if (column.sortable) {\n      return (\n        <SortableHeaderCell\n          column={column}\n          onSort={onSort}\n          sortColumn={sortColumn}\n          sortDirection={sortDirection}\n        >\n          {column.name}\n        </SortableHeaderCell>\n      );\n    }\n\n    return column.name;\n  }\n\n  const className = clsx('rdg-cell', column.headerCellClass, {\n    'rdg-cell-resizable': column.resizable,\n    'rdg-cell-frozen': column.frozen,\n    'rdg-cell-frozen-last': column.isLastFrozenColumn && scrollLeft > 0,\n    'rdg-cell-frozen-align-right': column.frozenAlignment === 'right',\n    'rdg-cell-frozen-align-right-no-shadow': scrolledToEnd && column.frozenAlignment === 'right',\n    'rdg-cell-align-right': column.alignment === 'right'\n  });\n  const style: React.CSSProperties = column.frozenAlignment === 'right' ? { width: column.width, left: gridWidth - column.width } : {\n    width: column.width,\n    left: column.left\n  };\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-sort={sortColumn === column.key ? getAriaSort(sortDirection) : undefined}\n      className={className}\n      style={style}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n        <div className={clsx('rdg-cell-fake-background')} />\n      {getCell()}\n    </div>\n  );\n}\n","import type { CalculatedColumn } from '../types';\n\nexport function getColumnScrollPosition<R, SR>(columns: readonly CalculatedColumn<R, SR>[], idx: number, currentScrollLeft: number, currentClientWidth: number): number {\n  let left = 0;\n  let frozen = 0;\n\n  for (let i = 0; i < idx; i++) {\n    const column = columns[i];\n    if (column) {\n      if (column.width) {\n        left += column.width;\n      }\n      if (column.frozen) {\n        frozen += column.width;\n      }\n    }\n  }\n\n  const selectedColumn = columns[idx];\n  if (selectedColumn) {\n    const scrollLeft = left - frozen - currentScrollLeft;\n    const scrollRight = left + selectedColumn.width - currentScrollLeft;\n\n    if (scrollLeft < 0) {\n      return scrollLeft;\n    }\n    if (scrollRight > currentClientWidth) {\n      return scrollRight - currentClientWidth;\n    }\n  }\n\n  return 0;\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (key === 'Tab' && (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement)) {\n    return target.matches('.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child');\n  }\n  return false;\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n","import type { CellNavigationMode } from '../enums';\nimport type { CalculatedColumn, Position, GroupRow, CellType } from '../types';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({ selectedPosition, columns, rows, isGroupRow }: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return column.editor != null\n    && !column.rowGroup\n    && !isGroupRow(row)\n    && (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false;\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rowsCount: number;\n  nextPosition: Position;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({ cellNavigationMode, columns, rowsCount, nextPosition }: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  if (cellNavigationMode !== 'NONE') {\n    const { idx, rowIdx } = nextPosition;\n    const columnsCount = columns.length;\n    const isAfterLastColumn = idx === columnsCount;\n    const isBeforeFirstColumn = idx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = rowIdx === rowsCount - 1;\n        if (!isLastRow) {\n          return {\n            idx: 0,\n            rowIdx: rowIdx + 1\n          };\n        }\n      } else if (cellNavigationMode === 'LOOP_OVER_ROW') {\n        return {\n          rowIdx,\n          idx: 0\n        };\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = rowIdx === 0;\n        if (!isFirstRow) {\n          return {\n            rowIdx: rowIdx - 1,\n            idx: columnsCount - 1\n          };\n        }\n      } else if (cellNavigationMode === 'LOOP_OVER_ROW') {\n        return {\n          rowIdx,\n          idx: columnsCount - 1\n        };\n      }\n    }\n  }\n\n  return nextPosition;\n}\n\ninterface CanExitGridOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rowsCount: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid<R, SR>({ cellNavigationMode, columns, rowsCount, selectedPosition: { rowIdx, idx }, shiftKey }: CanExitGridOpts<R, SR>): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === columns.length - 1;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === rowsCount - 1;\n    const atFirstRow = rowIdx === 0;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n\nexport function checkIfCellDisabled(cell: undefined | string | CellType): boolean {\n    if (!cell) return false;\n\n    if (typeof cell === 'string' || !cell.disabled) {\n        return false;\n    }\n\n    return true;\n}\n","export * from './domUtils';\nexport * from './columnUtils';\nexport * from './keyboardUtils';\nexport * from './selectedCellUtils';\n\nexport function assertIsValidKeyGetter<R>(keyGetter: unknown): asserts keyGetter is (row: R) => React.Key {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n","import React, { useCallback, memo } from 'react';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn } from './types';\nimport { assertIsValidKeyGetter } from './utils';\nimport type { DataGridProps } from './DataGrid';\n\ntype SharedDataGridProps<R, SR> = Pick<DataGridProps<R, SR>,\n  | 'rows'\n  | 'onSelectedRowsChange'\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n  | 'rowKeyGetter'\n>;\n\nexport interface HeaderRowProps<R, SR> extends SharedDataGridProps<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n  gridWidth: number;\n  scrollLeft: number;\n  scrolledToEnd: boolean;\n}\n\nfunction HeaderRow<R, SR>({\n  columns,\n  rows,\n  rowKeyGetter,\n  onSelectedRowsChange,\n  allRowsSelected,\n  onColumnResize,\n  sortColumn,\n  sortDirection,\n  gridWidth,\n  onSort,\n  scrollLeft,\n  scrolledToEnd\n}: HeaderRowProps<R, SR>) {\n  const handleAllRowsSelectionChange = useCallback((checked: boolean) => {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter(rowKeyGetter);\n\n    const newSelectedRows = new Set<React.Key>();\n    if (checked) {\n      for (const row of rows) {\n        newSelectedRows.add(rowKeyGetter(row));\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }, [onSelectedRowsChange, rows, rowKeyGetter]);\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className=\"rdg-header-row\"\n    >\n      {columns.map(column => {\n        return (\n          <HeaderCell<R, SR>\n            key={column.key}\n            column={column}\n            onResize={onColumnResize}\n            allRowsSelected={allRowsSelected}\n            onAllRowsSelectionChange={handleAllRowsSelectionChange}\n            onSort={onSort}\n            sortColumn={sortColumn}\n            sortDirection={sortDirection}\n            gridWidth={gridWidth}\n            scrollLeft={scrollLeft}\n            scrolledToEnd={scrolledToEnd}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR>(props: HeaderRowProps<R, SR>) => JSX.Element;\n","import React, { memo } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn, Filters } from './types';\nimport type { DataGridProps } from './DataGrid';\n\ntype SharedDataGridProps<R, SR> = Pick<DataGridProps<R, SR>,\n  | 'filters'\n  | 'onFiltersChange'\n>;\n\ninterface FilterRowProps<R, SR> extends SharedDataGridProps<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n}\n\nfunction FilterRow<R, SR>({\n  columns,\n  filters,\n  onFiltersChange\n}: FilterRowProps<R, SR>) {\n  function onChange(key: string, value: unknown) {\n    const newFilters: Filters = { ...filters };\n    newFilters[key] = value;\n    onFiltersChange?.(newFilters);\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={2}\n      className=\"rdg-filter-row\"\n    >\n      {columns.map(column => {\n        const { key } = column;\n\n        const className = clsx('rdg-cell', {\n          'rdg-cell-frozen': column.frozen,\n          'rdg-cell-frozen-last': column.isLastFrozenColumn\n        });\n        const style: React.CSSProperties = {\n          width: column.width,\n          left: column.left\n        };\n\n        return (\n          <div\n            key={key}\n            style={style}\n            className={className}\n          >\n            {column.filterRenderer && (\n              <column.filterRenderer\n                column={column}\n                value={filters?.[column.key]}\n                onChange={value => onChange(key, value)}\n              />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(FilterRow) as <R, SR>(props: FilterRowProps<R, SR>) => JSX.Element;\n","import React, { forwardRef, memo, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { usePopper } from 'react-popper';\nimport clsx from 'clsx';\n\nimport type { CellRendererProps } from './types';\nimport { wrapEvent, checkIfCellDisabled } from './utils';\nimport { useCombinedRefs } from './hooks';\n\nfunction Cell<R, SR>({\n  className,\n  column,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  isRowSelected,\n  row,\n  rowIdx,\n  dragHandleProps,\n  onDoubleClick,\n  onRowChange,\n  selectCell,\n  handleCellMouseDown,\n  selectedPosition,\n  selectRow,\n  handleDragEnter,\n  draggedOverRowIdx,\n  draggedOverColumnIdx,\n  hasFirstCopiedCell,\n  hasLastCopiedCell,\n  isFilling,\n  bottomRowIdx,\n  selectedCellsInfo,\n  gridWidth,\n  scrolledToEnd,\n  cell,\n  scrollLeft,\n  expandRow\n}: CellRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  const cellRef = useRef<HTMLDivElement>(null);\n  const disabled = checkIfCellDisabled(cell);\n  const error = typeof cell === 'object' && cell.error;\n  const alert = typeof cell === 'object' && cell.alert;\n  const warning = typeof cell === 'object' && cell.warning;\n  const frozen = column.frozen;\n  const frozenRightAlign = column.frozenAlignment && column.frozenAlignment === 'right';\n  const hasChildren = row.children && row.children.length > 0;\n\n  const { cellClass } = column;\n  className = clsx(\n    'rdg-cell',\n    {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-align-right': frozenRightAlign,\n      'rdg-cell-frozen-align-right-no-shadow': scrolledToEnd && frozenRightAlign,\n      'rdg-cell-frozen-last': column.isLastFrozenColumn && scrollLeft > 0,\n      'rdg-cell-selected': isCellSelected,\n      'rdg-cell-copied': isCopied && !disabled,\n      'rdg-cell-dragged-over': !alert && checkIsDraggedOver(true),\n      'rdg-cell-align-right': column.alignment === 'right',\n      'rdg-cell-disabled': disabled,\n      'rdg-cell-error': error,\n      'rdg-cell-alert': alert,\n      'rdg-cell-warning': warning\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n  const [showTooltip, setShowTooltip] = useState(false);\n  const [reference, setReference] = useState<HTMLDivElement | null>(null);\n  const [popper, setPopper] = useState<HTMLDivElement | null>(null);\n  const { styles } = usePopper(reference, popper, {\n    placement: 'top',\n    modifiers: [{ name: 'offset', options: { offset: [0, 8] } }]\n  });\n\n  function checkIsDraggedOver(shouldCareIfDisabled?: boolean) {\n      if (shouldCareIfDisabled && disabled) {\n          return false;\n      }\n\n      if (frozen || !isDraggedOver) {\n          return false;\n      }\n\n      if (selectedCellsInfo === selectedPosition.rowIdx && isFilling) {\n          return false;\n      }\n\n      if (selectedCellsInfo !== selectedPosition.rowIdx && column.idx !== draggedOverColumnIdx?.[0] && isFilling) {\n          return false;\n      }\n\n      return isDraggedOver;\n  }\n\n  function selectCellWrapper(openEditor?: boolean) {\n    if (!dragHandleProps) {\n        selectCell({ idx: column.idx, rowIdx }, openEditor);\n    }\n\n    if (dragHandleProps && openEditor) {\n        selectCell({ idx: column.idx, rowIdx }, openEditor);\n    }\n  }\n\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement>) {\n      event.preventDefault();\n      if (event.buttons === 2) return;\n      if (disabled || frozen || frozenRightAlign) return;\n      selectCellWrapper(false);\n      handleCellMouseDown(event);\n  }\n\n  function handleMouseEnter(event: React.MouseEvent<HTMLDivElement>) {\n      if (event.buttons === 1) {\n        handleDragEnter(column.idx);\n      }\n\n      if (alert || warning) {\n          setShowTooltip(true);\n      }\n  }\n\n  function handleMouseLeave() {\n      if (alert || warning) {\n          setShowTooltip(false);\n      }\n  }\n\n  function handleDoubleClick() {\n      if (!disabled && !frozen && !frozenRightAlign) {\n          selectCellWrapper(true);\n      }\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(rowIdx, newRow);\n  }\n\n  function onRowSelectionChange(checked: boolean, isShiftClick: boolean) {\n    selectRow({ rowIdx, checked, isShiftClick });\n  }\n\n  function checkForTopActiveBorder(): boolean {\n      if (isFilling) {\n          if (selectedPosition.rowIdx === rowIdx && isDraggedOver && selectedPosition.rowIdx !== bottomRowIdx) {\n              return true;\n          }\n\n          if (selectedPosition.rowIdx === bottomRowIdx && isDraggedOver && draggedOverRowIdx === rowIdx && !checkIsDraggedOver()) {\n              return true;\n          }\n      }\n\n      if (isCopied && hasFirstCopiedCell) {\n          return true;\n      }\n\n      return false;\n  }\n\n  function checkForBottomActiveBorder(): boolean {\n      if (isFilling && rowIdx === bottomRowIdx && !checkIsDraggedOver() && isDraggedOver) {\n          return true;\n      }\n\n      if (isCopied && hasLastCopiedCell) {\n          return true;\n      }\n\n      return false;\n  }\n\n  function checkForRightActiveBorder(): boolean {\n      if (\n          isFilling &&\n          draggedOverColumnIdx &&\n          draggedOverColumnIdx[draggedOverColumnIdx.length - 1] === column.idx &&\n          isDraggedOver &&\n          !checkIsDraggedOver()\n      ) {\n          return true;\n      }\n\n      if (isCopied) {\n          return true;\n      }\n\n      return false;\n  }\n\n  function checkForLeftActiveBorder(): boolean {\n      if (isFilling && draggedOverColumnIdx && draggedOverColumnIdx[0] === column.idx && isDraggedOver && !checkIsDraggedOver()) {\n          return true;\n      }\n\n      if (isCopied) {\n          return true;\n      }\n\n      return false;\n  }\n\n  function handleClickToExpand() {\n      if (column.key !== 'name') return;\n      if (!expandRow) return;\n      if (!hasChildren) return;\n\n      expandRow(row, 'toggleSubRow');\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      ref={useCombinedRefs(cellRef, ref)}\n      className={className}\n      style={column.frozenAlignment === 'right' ? { width: column.width, left: gridWidth - column.width } : {\n        width: column.width,\n        left: column.left\n      }}\n      onMouseDown={handleMouseDown}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onDoubleClick={wrapEvent(handleDoubleClick, onDoubleClick)}\n      onClick={handleClickToExpand}\n    >\n      {!column.rowGroup && (\n        <>\n          <div className={clsx(\n            'rdg-cell-fake-background',\n            {\n              'rdg-cell-fake-background-active-top': checkForTopActiveBorder(),\n              'rdg-cell-fake-background-active-bottom': checkForBottomActiveBorder(),\n              'rdg-cell-fake-background-active-right': checkForRightActiveBorder(),\n              'rdg-cell-fake-background-active-left': checkForLeftActiveBorder()\n          })} ref={setReference} />\n          <column.formatter\n            rowIdx={rowIdx}\n            cell={cell}\n            row={row}\n            isCellSelected={isCellSelected}\n            isRowSelected={isRowSelected}\n            onRowSelectionChange={onRowSelectionChange}\n            onRowChange={handleRowChange}\n          />\n          {dragHandleProps && !disabled && !frozenRightAlign && !frozen && (\n            <div className=\"rdg-cell-drag-handle\" {...dragHandleProps} />\n          )}\n        </>\n      )}\n      {(alert || warning) && showTooltip && createPortal(\n          <div ref={setPopper} className={warning ? 'rdg-warning' : 'rdg-alert'} style={styles.popper}>{alert || warning}</div>,\n          document.body\n      )}\n    </div>\n  );\n}\n\nexport default memo(forwardRef(Cell)) as <R, SR = unknown>(props: CellRendererProps<R, SR> & React.RefAttributes<HTMLDivElement>) => JSX.Element;\n","import React from 'react';\nimport { createPortal } from 'react-dom';\n\nimport type { EditorProps } from '../types';\nimport { useClickOutside } from '../hooks';\n\nexport default function EditorContainer<R, SR>({\n  row,\n  column,\n  onRowChange,\n  ...props\n}: EditorProps<R, SR>) {\n  const onClickCapture = useClickOutside(() => onRowChange(row, true));\n  if (column.editor === undefined) return null;\n\n  const editor = (\n    <div className=\"rdg-editor-container\" onClickCapture={onClickCapture}>\n      <column.editor\n        row={row}\n        column={column}\n        onRowChange={onRowChange}\n        {...props}\n      />\n    </div>\n  );\n\n  if (column.editorOptions?.createPortal) {\n    return createPortal(editor, props.editorPortalTarget);\n  }\n\n  return editor;\n}\n","import React, { useState, useCallback } from 'react';\nimport clsx from 'clsx';\n\nimport EditorContainer from './editors/EditorContainer';\nimport type { CellRendererProps, SharedEditorProps, Omit } from './types';\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>,\n  | 'rowIdx'\n  | 'row'\n  | 'column'\n>;\n\ninterface EditCellProps<R, SR> extends SharedCellRendererProps<R, SR>, Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  editorProps: SharedEditorProps<R>;\n}\n\nexport default function EditCell<R, SR>({\n  className,\n  column,\n  row,\n  rowIdx,\n  editorProps,\n  ...props\n}: EditCellProps<R, SR>) {\n  const [dimensions, setDimensions] = useState<{ left: number; top: number } | null>(null);\n\n  const cellRef = useCallback(node => {\n    if (node !== null) {\n      const { left, top } = node.getBoundingClientRect();\n      setDimensions({ left, top });\n    }\n  }, []);\n\n  const { cellClass } = column;\n  className = clsx(\n    'rdg-cell',\n    {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.isLastFrozenColumn\n    },\n    'rdg-cell-selected',\n    'rdg-cell-editing',\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n\n  function getCellContent() {\n    if (dimensions === null) return;\n    const { scrollTop: docTop, scrollLeft: docLeft } = document.scrollingElement ?? document.documentElement;\n    const { left, top } = dimensions;\n    const gridLeft = left + docLeft;\n    const gridTop = top + docTop;\n\n    return (\n      <EditorContainer\n        {...editorProps}\n        rowIdx={rowIdx}\n        column={column}\n        left={gridLeft}\n        top={gridTop}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected\n      ref={cellRef}\n      className={className}\n      style={{\n        width: column.width,\n        left: column.left\n      }}\n      {...props}\n    >\n      {getCellContent()}\n    </div>\n  );\n}\n","import React, { memo, forwardRef } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport EditCell from './EditCell';\nimport { checkIfCellDisabled } from './utils';\nimport type { RowRendererProps, SelectedCellProps, CellType } from './types';\n\nfunction Row<R, SR = unknown>({\n  cellRenderer: CellRenderer = Cell,\n  className,\n  id,\n  rowIdx,\n  isRowSelected,\n  copiedCellIdx,\n  getDraggedOverCellIdx,\n  row,\n  viewportColumns,\n  selectedCellProps,\n  selectedPosition,\n  isFilling,\n  isMultipleRows,\n  onRowClick,\n  rowClass,\n  selectedCellsInfo,\n  setDraggedOverRowIdx,\n  setDraggedOverColumnIdx,\n  hasFirstCopiedCell,\n  hasLastCopiedCell,\n  top,\n  onRowChange,\n  selectCell,\n  selectRow,\n  handleCellMouseDown,\n  bottomRowIdx,\n  dragHandleProps,\n  draggedOverRowIdx,\n  draggedOverColumnIdx,\n  gridWidth,\n  scrollLeft,\n  scrolledToEnd,\n  expandRow,\n  'aria-rowindex': ariaRowIndex,\n  'aria-selected': ariaSelected,\n  ...props\n}: RowRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  function handleDragEnter(colIdx: number) {\n      if (isFilling && typeof selectedCellsInfo === 'number') {\n          if (selectedCellsInfo === selectedPosition.rowIdx) {\n              if (colIdx === selectedPosition.idx) {\n                  setDraggedOverRowIdx?.(rowIdx);\n              } else {\n                  setDraggedOverRowIdx?.(selectedCellsInfo);\n              }\n          } else {\n              setDraggedOverRowIdx?.(selectedCellsInfo);\n          }\n      } else {\n          setDraggedOverRowIdx?.(rowIdx);\n      }\n    if (isFilling) {\n        setDraggedOverColumnIdx?.(colIdx);\n    } else {\n        setDraggedOverColumnIdx?.(selectedPosition.idx);\n    }\n  }\n\n  function hasJustFilled() {\n      if (draggedOverColumnIdx && draggedOverColumnIdx.length > 1 && !isFilling) {\n          return true;\n      }\n\n      return false;\n  }\n\n  className = clsx(\n    'rdg-row',\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, {\n      'rdg-row-selected': isRowSelected,\n      'rdg-group-row-selected': selectedCellProps?.idx === -1\n    },\n    rowClass?.(row),\n    className\n  );\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      aria-selected={ariaSelected}\n      ref={ref}\n      className={className}\n      style={{ top }}\n      {...props}\n    >\n      {viewportColumns.map(column => {\n        const isCellSelected = selectedCellProps?.idx === column.idx;\n        const isBottomCell = rowIdx === bottomRowIdx && column.idx === selectedPosition.idx;\n        const cell = row[column.key as keyof R] as unknown as CellType;\n        const cellCanBeEdited = !checkIfCellDisabled(cell);\n\n        if (selectedCellProps?.mode === 'EDIT' && isCellSelected && cellCanBeEdited) {\n          return (\n            <EditCell<R, SR>\n              key={column.key}\n              rowIdx={rowIdx}\n              column={column}\n              row={row}\n              onKeyDown={selectedCellProps.onKeyDown}\n              editorProps={selectedCellProps.editorProps}\n            />\n          );\n        }\n\n        return (\n          <CellRenderer\n            key={column.key}\n            rowIdx={rowIdx}\n            column={column}\n            row={row}\n            cell={cell}\n            isCopied={copiedCellIdx === column.idx}\n            hasFirstCopiedCell={hasFirstCopiedCell}\n            hasLastCopiedCell={hasLastCopiedCell}\n            isDraggedOver={getDraggedOverCellIdx(rowIdx, column.idx) === column.idx}\n            isCellSelected={isCellSelected}\n            isRowSelected={isRowSelected}\n            dragHandleProps={isBottomCell && !hasJustFilled() ? dragHandleProps : undefined}\n            onFocus={isCellSelected ? (selectedCellProps as SelectedCellProps).onFocus : undefined}\n            onKeyDown={isCellSelected ? selectedCellProps!.onKeyDown : undefined}\n            onRowClick={onRowClick}\n            onRowChange={onRowChange}\n            selectCell={selectCell}\n            selectRow={selectRow}\n            handleCellMouseDown={handleCellMouseDown}\n            handleDragEnter={handleDragEnter}\n            selectedPosition={selectedPosition}\n            draggedOverRowIdx={draggedOverRowIdx}\n            draggedOverColumnIdx={draggedOverColumnIdx}\n            isFilling={isFilling}\n            bottomRowIdx={bottomRowIdx}\n            selectedCellsInfo={selectedCellsInfo}\n            gridWidth={gridWidth}\n            scrollLeft={scrollLeft}\n            scrolledToEnd={scrolledToEnd}\n            expandRow={expandRow}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(forwardRef(Row)) as <R, SR = unknown>(props: RowRendererProps<R, SR> & React.RefAttributes<HTMLDivElement>) => JSX.Element;\n","import React, { memo } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<GroupRowRendererProps<R, SR>,\n  | 'id'\n  | 'rowIdx'\n  | 'groupKey'\n  | 'childRows'\n  | 'isExpanded'\n  | 'isRowSelected'\n  | 'selectRow'\n  | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  rowIdx,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  isRowSelected,\n  column,\n  groupColumnIndex,\n  selectRow,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  function onRowSelectionChange(checked: boolean) {\n    selectRow({ rowIdx, checked, isShiftClick: false });\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      key={column.key}\n      className={clsx('rdg-cell', {\n        'rdg-cell-frozen': column.frozen,\n        'rdg-cell-frozen-last': column.isLastFrozenColumn,\n        'rdg-cell-selected': isCellSelected\n      })}\n      style={{\n        width: column.width,\n        left: column.left,\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n    >\n      {column.groupFormatter && (!column.rowGroup || groupColumnIndex === column.idx) && (\n        <column.groupFormatter\n          groupKey={groupKey}\n          childRows={childRows}\n          column={column}\n          isExpanded={isExpanded}\n          isCellSelected={isCellSelected}\n          isRowSelected={isRowSelected}\n          onRowSelectionChange={onRowSelectionChange}\n          toggleGroup={toggleGroup}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import React, { memo } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn, Position, SelectRowEvent, Omit } from './types';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\n\nexport interface GroupRowRendererProps<R, SR = unknown> extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  top: number;\n  level: number;\n  selectedCellIdx?: number;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectCell: (position: Position, enableEditor?: boolean) => void;\n  selectRow: (selectRowEvent: SelectRowEvent) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  top,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectCell,\n  selectRow,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function selectGroup() {\n    selectCell({ rowIdx, idx: -1 });\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-level={level}\n      aria-expanded={isExpanded}\n      className={clsx(\n        'rdg-row',\n        'rdg-group-row',\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, {\n          'rdg-row-selected': isRowSelected,\n          'rdg-group-row-selected': selectedCellIdx === -1 // Select row if there is no selected cell\n        })}\n      onClick={selectGroup}\n      style={{ top }}\n      {...props}\n    >\n      {viewportColumns.map(column => (\n        <GroupCell<R, SR>\n          key={column.key}\n          id={id}\n          rowIdx={rowIdx}\n          groupKey={groupKey}\n          childRows={childRows}\n          isExpanded={isExpanded}\n          isRowSelected={isRowSelected}\n          isCellSelected={selectedCellIdx === column.idx}\n          column={column}\n          groupColumnIndex={idx}\n          selectRow={selectRow}\n          toggleGroup={toggleGroup}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import React, { memo } from 'react';\nimport clsx from 'clsx';\n\nimport type { CellRendererProps } from './types';\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'column'>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  row\n}: SummaryCellProps<R, SR>) {\n  const { summaryFormatter: SummaryFormatter, width, left, summaryCellClass } = column;\n  const className = clsx(\n    'rdg-cell',\n    {\n      'rdg-cell-frozen': column.frozen,\n      'rdg-cell-frozen-last': column.isLastFrozenColumn\n    },\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      className={className}\n      style={{ width, left }}\n    >\n      {SummaryFormatter && <SummaryFormatter column={column} row={row} />}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import React, { memo } from 'react';\nimport SummaryCell from './SummaryCell';\nimport type { RowRendererProps } from './types';\n\ntype SharedRowRendererProps<R, SR> = Pick<RowRendererProps<R, SR>,\n  | 'viewportColumns'\n  | 'rowIdx'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  bottom: number;\n}\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  row,\n  viewportColumns,\n  bottom,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={`rdg-row rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'} rdg-summary-row`}\n      style={{ bottom }}\n    >\n      {viewportColumns.map(column => (\n        <SummaryCell<R, SR>\n          key={column.key}\n          column={column}\n          row={row}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import React, {\n  forwardRef,\n  useState,\n  useRef,\n  useLayoutEffect,\n  useImperativeHandle,\n  useCallback\n} from 'react';\nimport clsx from 'clsx';\nimport isEqual from 'lodash/isEqual';\n\nimport { useGridDimensions, useViewportColumns, useViewportRows, useLatestFunc } from './hooks';\nimport HeaderRow from './HeaderRow';\nimport FilterRow from './FilterRow';\nimport Row from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport {\n  assertIsValidKeyGetter,\n  getColumnScrollPosition,\n  onEditorNavigation,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  checkIfCellDisabled\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Filters,\n  Position,\n  RowRendererProps,\n  SelectRowEvent,\n  SelectedCellProps,\n  EditCellProps,\n  FillEvent,\n  PasteEvent,\n  CellType\n} from './types';\nimport type { CellNavigationMode, SortDirection } from './enums';\n\ninterface SelectCellState extends Position {\n  mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  mode: 'EDIT';\n  row: R;\n  originalRow: R;\n  key: string | null;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<Column<R, SR>,\n  | 'formatter'\n  | 'minWidth'\n  | 'resizable'\n  | 'sortable'\n>;\n\ninterface RowsChangeParams<R, SR> {\n    newRows: R[],\n    updatedTargetRows?: R[],\n    targetRows?: R[],\n    targetCols?: CalculatedColumn<R, SR>[]\n    key?: string | null,\n    position?: {},\n    type?: 'paste' | 'fill' | 'edit'\n}\n\nconst body = globalThis.document?.body;\n\nexport interface DataGridHandle {\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, openEditor?: boolean) => void;\n}\n\ntype SharedDivProps = Pick<React.HTMLAttributes<HTMLDivElement>,\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'className'\n  | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: readonly SR[];\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: (row: R) => React.Key;\n  onRowsChange?: (arg0: RowsChangeParams<R, SR>) => void;\n\n  /**\n   * Dimensions props\n   */\n  /** The height of each row in pixels */\n  rowHeight?: number;\n  /** The height of the header row in pixels */\n  headerRowHeight?: number;\n  /** The height of the header filter row in pixels */\n  headerFiltersHeight?: number;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: ReadonlySet<React.Key>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: (selectedRows: Set<React.Key>) => void;\n  /** The key of the column which is currently being sorted */\n  sortColumn?: string;\n  /** The direction to sort the sortColumn*/\n  sortDirection?: SortDirection;\n  /** Function called whenever grid is sorted*/\n  onSort?: (columnKey: string, direction: SortDirection) => void;\n  filters?: Filters;\n  onFiltersChange?: (filters: Filters) => void;\n  defaultColumnOptions?: DefaultColumnOptions<R, SR>;\n  groupBy?: readonly string[];\n  rowGrouper?: (rows: readonly R[], columnKey: string) => Record<string, readonly R[]>;\n  expandedGroupIds?: ReadonlySet<unknown>;\n  onExpandedGroupIdsChange?: (expandedGroupIds: Set<unknown>) => void;\n  onFill?: (event: FillEvent<R, SR>) => R[];\n  onPaste?: (event: PasteEvent<R>) => R[];\n  expandRow?: () => void;\n\n  /**\n   * Custom renderers\n   */\n  rowRenderer?: React.ComponentType<RowRendererProps<R, SR>>;\n  emptyRowsRenderer?: React.ComponentType;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: (rowIdx: number, row: R, column: CalculatedColumn<R, SR>) => void;\n  /** Called when the grid is scrolled */\n  onScroll?: (event: React.UIEvent<HTMLDivElement>) => void;\n  /** Called when a column is resized */\n  onColumnResize?: (idx: number, width: number) => void;\n  /** Function called whenever selected cell is changed */\n  onSelectedCellChange?: (position: Position) => void;\n\n  /**\n   * Toggles and modes\n   */\n  /** Toggles whether filters row is displayed or not */\n  enableFilterRow?: boolean;\n  cellNavigationMode?: CellNavigationMode;\n\n  /**\n   * Miscellaneous\n   */\n  /** The node where the editor portal should mount. */\n  editorPortalTarget?: Element;\n  rowClass?: (row: R) => string | undefined;\n  enableOptionsCol?: boolean;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n*/\nfunction DataGrid<R, SR>({\n  // Grid and data Props\n  columns: rawColumns,\n  rows: rawRows,\n  summaryRows,\n  rowKeyGetter,\n  onRowsChange,\n  // Dimensions props\n  rowHeight = 35,\n  headerRowHeight = rowHeight,\n  headerFiltersHeight = 45,\n  // Feature props\n  selectedRows,\n  onSelectedRowsChange,\n  sortColumn,\n  sortDirection,\n  onSort,\n  filters,\n  onFiltersChange,\n  defaultColumnOptions,\n  groupBy: rawGroupBy,\n  rowGrouper,\n  expandedGroupIds,\n  onExpandedGroupIdsChange,\n  // Custom renderers\n  rowRenderer: RowRenderer = Row,\n  emptyRowsRenderer: EmptyRowsRenderer,\n  // Event props\n  onRowClick,\n  onScroll,\n  onColumnResize,\n  onSelectedCellChange,\n  onFill,\n  onPaste,\n  // Toggles and modes\n  enableFilterRow = false,\n  cellNavigationMode = 'NONE',\n  // Miscellaneous\n  editorPortalTarget = body,\n  className,\n  style,\n  rowClass,\n  enableOptionsCol,\n  expandRow,\n  // ARIA\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy,\n  'aria-describedby': ariaDescribedBy\n}: DataGridProps<R, SR>, ref: React.Ref<DataGridHandle>) {\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>({ idx: -1, rowIdx: -1, mode: 'SELECT' });\n  const [copiedCells, setCopiedCells] = useState<{ rows: R[]; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [isFilling, setFilling] = useState(false);\n  const [selectedCellsInfo, setSelectedCells] = useState<number | undefined>(undefined);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [draggedOverColumnIdx, setOverColIdx] = useState<number[] | undefined>(undefined);\n\n  /**\n   * refs\n   */\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const isCellFocusable = useRef(false);\n  const firstSelectedColIdx = useRef(-1);\n  const latestDraggedOverColIdx = useRef(-1);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const selectRowWrapper = useLatestFunc(selectRow);\n  const selectCellWrapper = useLatestFunc(selectCell);\n  const toggleGroupWrapper = useLatestFunc(toggleGroup);\n  const handleFormatterRowChangeWrapper = useLatestFunc(handleFormatterRowChange);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const headerRowsCount = enableFilterRow ? 2 : 1;\n  const summaryRowsCount = summaryRows?.length ?? 0;\n  const totalHeaderHeight = headerRowHeight + (enableFilterRow ? headerFiltersHeight : 0);\n  const clientHeight = gridHeight - totalHeaderHeight - summaryRowsCount * rowHeight;\n  const isSelectable = selectedRows !== undefined && onSelectedRowsChange !== undefined;\n\n  const { columns, viewportColumns, totalColumnWidth, lastFrozenColumnIndex, totalFrozenColumnWidth, groupBy } = useViewportColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined\n  });\n\n  const { rowOverscanStartIdx, rowOverscanEndIdx, rows, rowsCount, isGroupRow } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds\n  });\n\n  const hasGroups = groupBy.length > 0 && rowGrouper;\n  const minColIdx = hasGroups ? -1 : 0;\n\n  // Cell drag is not supported on a treegrid\n  const enableCellDragAndDrop = hasGroups ? false : onFill !== undefined;\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (selectedPosition === prevSelectedPosition.current || selectedPosition.mode === 'EDIT' || !isCellWithinBounds(selectedPosition)) return;\n    prevSelectedPosition.current = selectedPosition;\n    scrollToCell(selectedPosition);\n\n    if (isCellFocusable.current) {\n      isCellFocusable.current = false;\n      return;\n    }\n    focusSinkRef.current!.focus({ preventScroll: true });\n  });\n\n  useImperativeHandle(ref, () => ({\n    scrollToColumn(idx: number) {\n      scrollToCell({ idx });\n    },\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: rowIdx * rowHeight,\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n  * callbacks\n  */\n  const handleColumnResize = useCallback((column: CalculatedColumn<R, SR>, width: number) => {\n    const newColumnWidths = new Map(columnWidths);\n    newColumnWidths.set(column.key, width);\n    setColumnWidths(newColumnWidths);\n\n    onColumnResize?.(column.idx, width);\n  }, [columnWidths, onColumnResize]);\n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  const setDraggedOverColumnIdx = useCallback((colIdx?: number) => {\n    const selectedCellColIdx = firstSelectedColIdx.current;\n\n    if (draggedOverColumnIdx && !draggedOverColumnIdx.some(i => i === colIdx)) return;\n\n    if (!colIdx && selectedCellColIdx) {\n        setOverColIdx([selectedCellColIdx]);\n        latestDraggedOverColIdx.current = selectedCellColIdx;\n    }\n\n    if (colIdx) {\n        const colIdxArray = [];\n        for (let i = selectedCellColIdx; i <= colIdx; i++) {\n            colIdxArray.push(i);\n        }\n        latestDraggedOverColIdx.current = colIdx;\n        setOverColIdx(colIdxArray);\n    }\n  }, []);\n\n  /**\n  * event handlers\n  */\n  function selectRow({ rowIdx, checked, isShiftClick }: SelectRowEvent) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    const row = rows[rowIdx];\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = Math.sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { key, keyCode } = event;\n    const row = rows[selectedPosition.rowIdx];\n\n    if (\n      onPaste\n      && isCtrlKeyHeldDown(event)\n      && isCellWithinBounds(selectedPosition)\n      && !isGroupRow(row)\n      && selectedPosition.idx !== -1\n      && selectedPosition.mode === 'SELECT'\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (\n      isCellWithinBounds(selectedPosition)\n      && isGroupRow(row)\n      && selectedPosition.idx === -1\n      && (\n        // Collapse the current group row if it is focused and is in expanded state\n        (key === 'ArrowLeft' && row.isExpanded)\n        // Expand the current group row if it is focused and is in collapsed state\n        || (key === 'ArrowRight' && !row.isExpanded)\n      )) {\n      event.preventDefault(); // Prevents scrolling\n      toggleGroup(row.id);\n      return;\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCells(null);\n        closeEditor();\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleFocus() {\n    isCellFocusable.current = true;\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    setScrollTop(scrollTop);\n    setScrollLeft(scrollLeft);\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function commitEditorChanges() {\n    if (\n      columns[selectedPosition.idx]?.editor === undefined\n      || selectedPosition.mode === 'SELECT'\n      || isEqual(selectedPosition.row, selectedPosition.originalRow)) {\n      return;\n    }\n\n    const updatedRows = [...rawRows];\n    updatedRows[getRawRowIdx(selectedPosition.rowIdx)] = selectedPosition.row;\n    onRowsChange?.({ newRows: updatedRows, position: selectedPosition.row, key: columns[selectedPosition.idx].key});\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const selectedCell = rawRows[rowIdx][columns[idx].key as keyof R] as unknown as CellType;\n    if (typeof selectedCell === 'string' || !selectedCell.disabled) {\n        const overRowIdx = latestDraggedOverRowIdx.current || rowIdx;\n        const startRowIndex = rowIdx < overRowIdx ? rowIdx : overRowIdx;\n        const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx + 1;\n        const targetRows = overRowIdx ? rawRows.slice(startRowIndex, endRowIndex) : rawRows.slice(rowIdx, rowIdx + 1);\n        setCopiedCells({ rows: targetRows, columnKey: columns[idx].key });\n    }\n  }\n\n  function handlePaste() {\n    const { idx, rowIdx } = selectedPosition;\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n    const selectedCell = rawRows[rowIdx][columns[idx].key as keyof R] as unknown as CellType;\n    const cellCanBePasted = !checkIfCellDisabled(selectedCell);\n    if (\n      !onPaste\n      || !onRowsChange\n      || copiedCells === null\n      || !isCellEditable(selectedPosition)\n      || !cellCanBePasted\n    ) {\n      return;\n    }\n\n    const { rows, columnKey } = copiedCells;\n    let updatedTargetRows;\n    const startRowIndex = rowIdx;\n    let endRowIndex = rowIdx;\n\n    if (rows.length > 1) {\n        const filteredRows = rows.filter(r => {\n            const cell = r[columnKey as keyof R] as unknown as CellType;\n            return !checkIfCellDisabled(cell);\n        });\n        let checkIndex = 0;\n\n        while (checkIndex < filteredRows.length && endRowIndex < rawRows.length) {\n            const cell = rawRows[endRowIndex][columnKey as keyof R] as unknown as CellType;\n            if (!checkIfCellDisabled(cell)) {\n                checkIndex += 1;\n            }\n            endRowIndex += 1;\n        }\n\n        updatedTargetRows = onPaste({\n          sourceRows: filteredRows,\n          sourceColumnKey: columnKey,\n          targetRows: rows.length === 1 ? [targetRow] : rawRows.slice(startRowIndex, endRowIndex),\n          targetColumnKey: columns[idx].key\n        });\n    } else {\n        endRowIndex += 1;\n        updatedTargetRows = onPaste({\n          sourceRows: rows,\n          sourceColumnKey: columnKey,\n          targetRows: [targetRow],\n          targetColumnKey: columns[idx].key\n        });\n    }\n\n    const updatedRows = [...rawRows];\n    for (let i = startRowIndex; i < endRowIndex; i++) {\n      updatedRows[i] = updatedTargetRows[i - startRowIndex];\n    }\n\n    onRowsChange({ newRows: updatedRows, updatedTargetRows, key: columns[idx].key, type: 'paste' });\n    setDraggedOverRowIdx(endRowIndex - 1);\n    setDraggedOverColumnIdx(idx);\n    setCopiedCells(null);\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!isCellWithinBounds(selectedPosition)) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key } = event;\n    const column = columns[selectedPosition.idx];\n\n    if (selectedPosition.mode === 'EDIT') {\n      if (key === 'Enter') {\n        // Custom editors can listen for the event and stop propagation to prevent commit\n        commitEditorChanges();\n        closeEditor();\n      }\n      return;\n    }\n\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        key,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    const overColIdx = latestDraggedOverColIdx.current;\n    const firstColIdx = firstSelectedColIdx.current;\n    if (overRowIdx === undefined || overColIdx < 0 || !onFill || !onRowsChange) return;\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[rowIdx];\n    if (overColIdx !== firstColIdx) {\n        const startRowIndex = rowIdx < overRowIdx ? rowIdx : overRowIdx;\n        let endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx + 1;\n        const targetRows = rawRows.slice(startRowIndex, startRowIndex === endRowIndex ? endRowIndex + 1 : endRowIndex);\n        const targetCols = columns.filter((_, i: number) => i > firstColIdx && i <= overColIdx);\n        const updatedTargetRows = onFill({ columnKey: columns[idx].key, targetCols, sourceRow, targetRows, across: true });\n        const updatedRows = [...rawRows];\n        for (let i = startRowIndex; i < endRowIndex; i++) {\n          updatedRows[i] = updatedTargetRows[i - startRowIndex];\n        }\n        onRowsChange({ newRows: updatedRows, updatedTargetRows, targetCols, targetRows, type: 'fill' });\n    } else {\n        const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n        const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n        const targetRows = rawRows.slice(startRowIndex, endRowIndex);\n\n        const updatedTargetRows = onFill({ columnKey: columns[idx].key, sourceRow, targetRows, across: false });\n        const updatedRows = [...rawRows];\n        for (let i = startRowIndex; i < endRowIndex; i++) {\n          updatedRows[i] = updatedTargetRows[i - startRowIndex];\n        }\n        onRowsChange({ newRows: updatedRows, updatedTargetRows, targetRows, key: columns[idx].key, type: 'fill' });\n    }\n    setCopiedCells(null);\n  }\n\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    setFilling(true);\n    setSelectedCells(draggedOverRowIdx || selectedPosition.rowIdx);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      setFilling(false);\n      setSelectedCells(undefined);\n      handleDragEnd();\n    }\n  }\n\n  function handleCellMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n    }\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    if (!onFill || !onRowsChange) return;\n\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[rowIdx];\n    const targetRows = rawRows.slice(rowIdx + 1);\n\n    const updatedTargetRows = onFill({ columnKey: columns[idx].key, sourceRow, targetRows, across: false });\n    const updatedRows = [...rawRows];\n    for (let i = rowIdx + 1; i < updatedRows.length; i++) {\n      updatedRows[i] = updatedTargetRows[i - rowIdx - 1];\n    }\n    onRowsChange({ newRows: updatedRows });\n  }\n\n  function handleFormatterRowChange(rowIdx: number, row: Readonly<R>) {\n    const newRows = [...rawRows];\n    newRows[rowIdx] = row;\n    onRowsChange?.({ newRows });\n  }\n\n  function handleEditorRowChange(row: Readonly<R>, commitChanges?: boolean) {\n    if (selectedPosition.mode === 'SELECT') return;\n    if (commitChanges) {\n      const updatedRows = [...rawRows];\n      updatedRows[getRawRowIdx(selectedPosition.rowIdx)] = row;\n      onRowsChange?.({ newRows: updatedRows });\n      closeEditor();\n    } else {\n      setSelectedPosition(position => ({ ...position, row }));\n    }\n  }\n\n  function handleOnClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      commitEditorChanges();\n    }\n    closeEditor();\n  }\n\n  /**\n   * utils\n   */\n  function isCellWithinBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= 0 && rowIdx < rows.length && idx >= minColIdx && idx < columns.length;\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return isCellWithinBounds(position)\n      && isSelectedCellEditable<R, SR>({ columns, rows, selectedPosition: position, isGroupRow });\n  }\n\n  function selectCell(position: Position, enableEditor = false): void {\n    if (!isCellWithinBounds(position)) return;\n    commitEditorChanges();\n\n    setDraggedOverRowIdx(undefined);\n    setOverColIdx(undefined);\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', key: null, row, originalRow: row });\n    } else {\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n      firstSelectedColIdx.current = position.idx;\n    }\n    onSelectedCellChange?.({ ...position });\n  }\n\n  function closeEditor() {\n    if (selectedPosition.mode === 'SELECT') return;\n    setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n  }\n\n  function scrollToCell({ idx, rowIdx }: Partial<Position>): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (typeof idx === 'number' && idx > lastFrozenColumnIndex) {\n      const { clientWidth } = current;\n      const { left, width } = columns[idx];\n      const isCellAtLeftBoundary = left < scrollLeft + width + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = left + width > clientWidth + scrollLeft;\n      if (isCellAtLeftBoundary || isCellAtRightBoundary) {\n        const newScrollLeft = getColumnScrollPosition(columns, idx, scrollLeft, clientWidth);\n        current.scrollLeft = scrollLeft + newScrollLeft;\n      }\n    }\n\n    if (typeof rowIdx === 'number') {\n      if (rowIdx * rowHeight < scrollTop) {\n        // at top boundary, scroll to the row's top\n        current.scrollTop = rowIdx * rowHeight;\n      } else if ((rowIdx + 1) * rowHeight > scrollTop + clientHeight) {\n        // at bottom boundary, scroll the next row's top to the bottom of the viewport\n        current.scrollTop = (rowIdx + 1) * rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = isCellWithinBounds(selectedPosition) && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (\n      key === 'ArrowLeft'\n      && isRowSelected\n      && isGroupRow(row)\n      && !row.isExpanded\n      && row.level !== 0\n    ) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    const prevCol = columns[idx - 1];\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case 'ArrowLeft':\n        return prevCol && prevCol.frozen ? { idx, rowIdx } : { idx: idx - 1, rowIdx };\n      case 'ArrowRight':\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        if (selectedPosition.idx === -1 && selectedPosition.rowIdx === -1) {\n          return shiftKey ? { idx: columns.length - 1, rowIdx: rows.length - 1 } : { idx: 0, rowIdx: 0 };\n        }\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return ctrlKey ? { idx: 0, rowIdx: 0 } : { idx: 0, rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return ctrlKey ? { idx: columns.length - 1, rowIdx: rows.length - 1 } : { idx: columns.length - 1, rowIdx };\n      case 'PageUp':\n        return { idx, rowIdx: rowIdx - Math.floor(clientHeight / rowHeight) };\n      case 'PageDown':\n        return { idx, rowIdx: rowIdx + Math.floor(clientHeight / rowHeight) };\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (selectedPosition.mode === 'EDIT') {\n      const onNavigation = columns[selectedPosition.idx].editorOptions?.onNavigation ?? onEditorNavigation;\n      if (!onNavigation(event)) return;\n    }\n    const { key, shiftKey } = event;\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    let nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      // If we are in a position to leave the grid, stop editing but stay in that cell\n      if (canExitGrid({ shiftKey, cellNavigationMode, columns, rowsCount: rows.length, selectedPosition })) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE'\n        ? 'CHANGE_ROW'\n        : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    nextPosition = getNextSelectedCellPosition<R, SR>({\n      columns,\n      rowsCount: rows.length,\n      cellNavigationMode: mode,\n      nextPosition\n    });\n\n    selectCell(nextPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number, colIdx: number): number | undefined {\n    const { rowIdx } = selectedPosition;\n    if (draggedOverRowIdx === undefined) return;\n    if (draggedOverColumnIdx === undefined) return;\n    if (!draggedOverColumnIdx.some(i => i === colIdx)) return;\n    if (rowIdx < draggedOverRowIdx && (currentRowIdx < rowIdx || currentRowIdx > draggedOverRowIdx)) return;\n    if (rowIdx > draggedOverRowIdx && (currentRowIdx > rowIdx || currentRowIdx < draggedOverRowIdx)) return;\n\n    let isDraggedOver = false;\n\n    if (rowIdx === draggedOverRowIdx && currentRowIdx === rowIdx) {\n        isDraggedOver = draggedOverColumnIdx.some(i => i === colIdx);\n    } else {\n        isDraggedOver = rowIdx <= draggedOverRowIdx\n          ? rowIdx <= currentRowIdx && currentRowIdx <= draggedOverRowIdx && draggedOverColumnIdx.some(i => i === colIdx)\n          : rowIdx >= currentRowIdx && currentRowIdx >= draggedOverRowIdx && draggedOverColumnIdx.some(i => i === colIdx);\n    }\n\n    return isDraggedOver ? colIdx : undefined;\n  }\n\n  function getSelectedCellProps(rowIdx: number): SelectedCellProps | EditCellProps<R> | undefined {\n    if (selectedPosition.rowIdx !== rowIdx) return;\n\n    if (selectedPosition.mode === 'EDIT') {\n      return {\n        mode: 'EDIT',\n        idx: selectedPosition.idx,\n        onKeyDown: handleKeyDown,\n        editorProps: {\n          editorPortalTarget,\n          rowHeight,\n          row: selectedPosition.row,\n          onRowChange: handleEditorRowChange,\n          onClose: handleOnClose\n        }\n      };\n    }\n\n    return {\n      mode: 'SELECT',\n      idx: selectedPosition.idx,\n      onFocus: handleFocus,\n      onKeyDown: handleKeyDown,\n      dragHandleProps: enableCellDragAndDrop && isCellEditable(selectedPosition)\n        ? { onMouseDown: handleMouseDown, onDoubleClick: handleDoubleClick }\n        : undefined\n    };\n  }\n\n  function getCopiedCellIdx(row: R): number | undefined {\n      if (copiedCells === null) return undefined;\n\n      if (typeof rowKeyGetter !== 'function') return undefined;\n\n      const key = rowKeyGetter(row);\n\n      if (copiedCells.rows.some(r => rowKeyGetter(r) === key)) {\n          return columns.findIndex(c => c.key === copiedCells.columnKey);\n      }\n\n      return undefined;\n  }\n\n  function hasFirstCopiedCell(row: R): boolean {\n      if (copiedCells === null) return false;\n      if (typeof rowKeyGetter !== 'function') return false;\n      const key = rowKeyGetter(row);\n      return rowKeyGetter(copiedCells.rows[0]) === key;\n  }\n\n  function hasLastCopiedCell(row: R): boolean {\n      if (copiedCells === null) return false;\n      if (typeof rowKeyGetter !== 'function') return false;\n      const key = rowKeyGetter(row);\n      return rowKeyGetter(copiedCells.rows[copiedCells.rows.length - 1]) === key;\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n    let startRowIndex = 0;\n    for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n      const row = rows[rowIdx];\n      const top = rowIdx * rowHeight + totalHeaderHeight;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        rowElements.push(\n          <GroupRowRenderer<R, SR>\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={viewportColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            top={top}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedPosition.rowIdx === rowIdx ? selectedPosition.idx : undefined}\n            isRowSelected={isSelectable && row.childRows.every(cr => selectedRows?.has(rowKeyGetter!(cr)))}\n            onFocus={selectedPosition.rowIdx === rowIdx ? handleFocus : undefined}\n            onKeyDown={selectedPosition.rowIdx === rowIdx ? handleKeyDown : undefined}\n            selectCell={selectCellWrapper}\n            selectRow={selectRowWrapper}\n            toggleGroup={toggleGroupWrapper}\n\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key: React.Key = hasGroups ? startRowIndex : rowIdx;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      }\n\n      rowElements.push(\n        <RowRenderer\n          aria-rowindex={headerRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1} // aria-rowindex is 1 based\n          aria-selected={isSelectable ? isRowSelected : undefined}\n          key={key}\n          rowIdx={rowIdx}\n          row={row}\n          viewportColumns={viewportColumns}\n          gridWidth={gridWidth}\n          isRowSelected={isRowSelected}\n          onRowClick={onRowClick}\n          rowClass={rowClass}\n          top={top}\n          copiedCellIdx={copiedCells !== null ? getCopiedCellIdx(row) : undefined}\n          hasFirstCopiedCell={copiedCells !== null && hasFirstCopiedCell(row)}\n          hasLastCopiedCell={copiedCells !== null && hasLastCopiedCell(row)}\n          getDraggedOverCellIdx={getDraggedOverCellIdx}\n          setDraggedOverRowIdx={isDragging ? setDraggedOverRowIdx : undefined}\n          setDraggedOverColumnIdx={isDragging ? setDraggedOverColumnIdx : undefined}\n          selectedCellProps={getSelectedCellProps(rowIdx)}\n          onRowChange={handleFormatterRowChangeWrapper}\n          selectCell={selectCellWrapper}\n          selectRow={selectRowWrapper}\n          handleCellMouseDown={handleCellMouseDown}\n          selectedPosition={selectedPosition}\n          bottomRowIdx={draggedOverRowIdx && draggedOverRowIdx > selectedPosition.rowIdx ? draggedOverRowIdx : selectedPosition.rowIdx}\n          dragHandleProps={{\n              onMouseDown: handleMouseDown,\n              onDoubleClick: handleDoubleClick\n          }}\n          isFilling={isFilling}\n          isMultipleRows={selectedPosition.rowIdx !== draggedOverRowIdx}\n          selectedCellsInfo={selectedCellsInfo}\n          draggedOverRowIdx={draggedOverRowIdx}\n          draggedOverColumnIdx={draggedOverColumnIdx}\n          scrollLeft={scrollLeft}\n          scrolledToEnd={gridRef.current ? gridRef.current.clientWidth + scrollLeft >= totalColumnWidth : false}\n          expandRow={expandRow}\n        />\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx >= columns.length || selectedPosition.rowIdx >= rows.length) {\n    setSelectedPosition({ idx: -1, rowIdx: -1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  if (selectedPosition.mode === 'EDIT' && rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n    // Discard changes if rows are updated from outside\n    closeEditor();\n  }\n\n  const scrolledToEnd = gridRef.current ? gridRef.current.clientWidth + scrollLeft >= totalColumnWidth : false;\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx('rdg', { 'rdg-viewport-dragging': isDragging }, className)}\n      style={{\n        ...style,\n        '--header-row-height': `${headerRowHeight}px`,\n        '--filter-row-height': `${headerFiltersHeight}px`,\n        '--row-width': `${totalColumnWidth}px`,\n        '--row-height': `${rowHeight}px`\n      } as unknown as React.CSSProperties}\n      ref={gridRef}\n      onScroll={handleScroll}\n    >\n      <HeaderRow<R, SR>\n        rowKeyGetter={rowKeyGetter}\n        rows={rawRows}\n        columns={viewportColumns}\n        onColumnResize={handleColumnResize}\n        allRowsSelected={selectedRows?.size === rawRows.length}\n        onSelectedRowsChange={onSelectedRowsChange}\n        sortColumn={sortColumn}\n        sortDirection={sortDirection}\n        onSort={onSort}\n        gridWidth={gridWidth}\n        scrollLeft={scrollLeft}\n        scrolledToEnd={scrolledToEnd}\n      />\n      {enableFilterRow && (\n        <FilterRow<R, SR>\n          columns={viewportColumns}\n          filters={filters}\n          onFiltersChange={onFiltersChange}\n        />\n      )}\n      {rows.length === 0 && EmptyRowsRenderer ? <EmptyRowsRenderer /> : (\n        <>\n          <div\n            ref={focusSinkRef}\n            tabIndex={0}\n            className=\"rdg-focus-sink\"\n            onKeyDown={handleKeyDown}\n          />\n          <div style={{ height: Math.max(rows.length * rowHeight, clientHeight), position: 'sticky', left: 0 }}>\n          {enableOptionsCol && (\n              <div\n                className=\"rdg-mock-options\"\n                style={{\n                    boxShadow: scrolledToEnd ? 'none' : '-1px 0px 6px 2px rgba(0, 0, 0, 0.12)',\n                    width: scrolledToEnd ? 55 : 54,\n                    borderLeft: scrolledToEnd ? '1px solid #edeef0' : 'none'\n                }}\n              />\n          )}\n          </div>\n          {getViewportRows()}\n          {summaryRows?.map((row, rowIdx) => (\n            <SummaryRow<R, SR>\n              aria-rowindex={headerRowsCount + rowsCount + rowIdx + 1}\n              key={rowIdx}\n              rowIdx={rowIdx}\n              row={row}\n              bottom={rowHeight * (summaryRows.length - 1 - rowIdx)}\n              viewportColumns={viewportColumns}\n            />\n          ))}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown>(props: DataGridProps<R, SR> & React.RefAttributes<DataGridHandle>) => JSX.Element;\n","import React from 'react';\nimport type { EditorProps, CellType } from '../types';\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n    input?.focus();\n}\n\nexport default function TextEditor<TRow, TSummaryRow = unknown>({\n    row,\n    column,\n    onRowChange,\n    onClose\n}: EditorProps<TRow, TSummaryRow>) {\n    const cell = row[column.key as keyof TRow] as unknown as CellType;\n    return typeof cell === 'string' ? (\n        <input\n            className={column.alignment === 'right' ? \"rdg-text-editor-right\" : \"rdg-text-editor\"}\n            ref={autoFocusAndSelect}\n            value={cell}\n            onChange={event => onRowChange({ ...row, [column.key]: event.target.value })}\n            onBlur={() => onClose(true)}\n        />\n    ) : (\n        <input\n            className={column.alignment === 'right' ? \"rdg-text-editor-right\" : \"rdg-text-editor\"}\n            ref={autoFocusAndSelect}\n            value={cell.value}\n            onChange={event => onRowChange({ ...row, [column.key]: { ...cell, value: event.target.value } })}\n            onBlur={() => onClose(true)}\n        />\n    );\n}\n"],"names":["useCombinedRefs","refs","useCallback","handle","ref","current","useClickOutside","onClick","frameRequestRef","useRef","cancelAnimationFrameRequest","cancelAnimationFrame","undefined","onClickRef","Error","useEffect","onOutsideClick","onWindowCaptureClick","requestAnimationFrame","window","addEventListener","capture","removeEventListener","useGridDimensions","gridRef","gridWidth","setGridWidth","useState","gridHeight","setGridHeight","useLayoutEffect","ResizeObserver","resizeObserver","entries","width","height","contentRect","observe","disconnect","useFocusRef","isCellSelected","focus","preventScroll","SelectCellFormatter","value","tabIndex","disabled","onChange","ariaLabel","ariaLabelledBy","inputRef","handleChange","e","target","checked","nativeEvent","shiftKey","ValueFormatter","props","cellValue","cell","valueComponent","useMemo","ToggleGroupFormatter","groupKey","isExpanded","toggleGroup","cellRef","handleKeyDown","key","d","stopPropagation","event","wrapEvent","ourHandler","theirHandler","SELECT_COLUMN_KEY","SelectColumn","name","maxWidth","resizable","sortable","frozen","headerRenderer","allRowsSelected","onAllRowsSelectionChange","formatter","isRowSelected","onRowSelectionChange","groupFormatter","useViewportColumns","rawColumns","columnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","minColumnWidth","minWidth","defaultFormatter","defaultSortable","defaultResizable","columns","lastFrozenColumnIndex","totalColumnWidth","totalFrozenColumnWidth","groupBy","left","totalWidth","allocatedWidths","unassignedColumnsCount","map","metricsColumn","getSpecifiedWidth","clampColumnWidth","column","includes","rowGroup","frozenAlignment","sort","aKey","frozenA","bKey","frozenB","indexOf","unallocatedWidth","unallocatedColumnWidth","Math","max","floor","calculatedColumns","idx","newColumn","push","lastFrozenColumn","isLastFrozenColumn","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","length","firstUnfrozenColumnIdx","min","colVisibleStartIdx","colVisibleEndIdx","viewportColumns","colIdx","has","get","test","parseInt","RENDER_BACTCH_SIZE","isReadonlyArray","arr","Array","isArray","useViewportRows","rawRows","rowHeight","clientHeight","scrollTop","rowGrouper","expandedGroupIds","groupedRows","rowsCount","groupRows","rows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","childRows","Object","childGroups","childRowsCount","allGroupRows","Set","flattenedRows","expandGroup","parentId","level","keys","forEach","posInSet","id","groupRow","setSize","add","isGroupRow","row","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","rowOverscanStartIdx","rowOverscanEndIdx","ceil","useLatestFunc","fn","args","SortableHeaderCell","onSort","sortColumn","sortDirection","children","sortText","sortDescendingFirst","direction","getAriaSort","HeaderCell","onResize","scrolledToEnd","onPointerDown","pointerType","buttons","currentTarget","pointerId","right","getBoundingClientRect","offset","clientX","onPointerMove","onPointerUp","preventDefault","getCell","className","clsx","headerCellClass","alignment","style","getColumnScrollPosition","currentScrollLeft","currentClientWidth","i","selectedColumn","scrollRight","onEditorNavigation","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","nonInputKeys","isCtrlKeyHeldDown","ctrlKey","metaKey","isDefaultCellInput","isSelectedCellEditable","selectedPosition","rowIdx","editor","editable","getNextSelectedCellPosition","cellNavigationMode","nextPosition","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","checkIfCellDisabled","assertIsValidKeyGetter","keyGetter","HeaderRow","rowKeyGetter","onSelectedRowsChange","onColumnResize","handleAllRowsSelectionChange","newSelectedRows","memo","FilterRow","filters","onFiltersChange","newFilters","filterRenderer","Cell","isCopied","isDraggedOver","dragHandleProps","onDoubleClick","onRowChange","selectCell","handleCellMouseDown","selectRow","handleDragEnter","draggedOverRowIdx","draggedOverColumnIdx","hasFirstCopiedCell","hasLastCopiedCell","isFilling","bottomRowIdx","selectedCellsInfo","expandRow","error","alert","warning","frozenRightAlign","hasChildren","cellClass","checkIsDraggedOver","showTooltip","setShowTooltip","reference","setReference","popper","setPopper","styles","usePopper","placement","modifiers","options","shouldCareIfDisabled","selectCellWrapper","openEditor","handleMouseDown","handleMouseEnter","handleMouseLeave","handleDoubleClick","handleRowChange","newRow","isShiftClick","checkForTopActiveBorder","checkForBottomActiveBorder","checkForRightActiveBorder","checkForLeftActiveBorder","handleClickToExpand","createPortal","document","body","forwardRef","EditorContainer","onClickCapture","editorOptions","editorPortalTarget","EditCell","editorProps","dimensions","setDimensions","node","top","getCellContent","docTop","docLeft","scrollingElement","documentElement","gridLeft","gridTop","Row","cellRenderer","CellRenderer","copiedCellIdx","getDraggedOverCellIdx","selectedCellProps","isMultipleRows","onRowClick","rowClass","setDraggedOverRowIdx","setDraggedOverColumnIdx","ariaRowIndex","ariaSelected","hasJustFilled","isBottomCell","cellCanBeEdited","mode","onKeyDown","onFocus","GroupCell","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","GroupedRow","selectedCellIdx","selectGroup","SummaryCell","summaryFormatter","SummaryFormatter","summaryCellClass","SummaryRow","bottom","globalThis","DataGrid","summaryRows","onRowsChange","headerRowHeight","headerFiltersHeight","selectedRows","onExpandedGroupIdsChange","rowRenderer","RowRenderer","emptyRowsRenderer","EmptyRowsRenderer","onScroll","onSelectedCellChange","onFill","onPaste","enableFilterRow","enableOptionsCol","ariaDescribedBy","setScrollTop","setScrollLeft","setColumnWidths","Map","setSelectedPosition","copiedCells","setCopiedCells","isDragging","setDragging","setFilling","setSelectedCells","setOverRowIdx","setOverColIdx","focusSinkRef","prevSelectedPosition","latestDraggedOverRowIdx","lastSelectedRowIdx","isCellFocusable","firstSelectedColIdx","latestDraggedOverColIdx","selectRowWrapper","handleFormatterRowChangeWrapper","handleFormatterRowChange","headerRowsCount","summaryRowsCount","totalHeaderHeight","isSelectable","hasGroups","minColIdx","enableCellDragAndDrop","isCellWithinBounds","scrollToCell","useImperativeHandle","scrollToColumn","scrollToRow","scrollTo","behavior","handleColumnResize","newColumnWidths","set","selectedCellColIdx","some","colIdxArray","childRow","rowKey","delete","previousRowIdx","step","sign","expandedGroupId","newExpandedGroupIds","keyCode","cKey","vKey","handleCopy","handlePaste","closeEditor","navigate","handleCellInput","handleFocus","handleScroll","getRawRowIdx","commitEditorChanges","isEqual","originalRow","updatedRows","newRows","position","selectedCell","overRowIdx","endRowIndex","targetRows","slice","columnKey","targetRow","cellCanBePasted","isCellEditable","updatedTargetRows","filteredRows","filter","r","checkIndex","sourceRows","sourceColumnKey","targetColumnKey","type","onCellKeyDown","isDefaultPrevented","handleDragEnd","overColIdx","firstColIdx","sourceRow","targetCols","_","across","onMouseOver","onMouseUp","handleEditorRowChange","commitChanges","handleOnClose","enableEditor","clientWidth","isCellAtLeftBoundary","isCellAtRightBoundary","newScrollLeft","getNextPosition","parentRowIdx","parentRow","prevCol","onNavigation","currentRowIdx","getSelectedCellProps","onClose","onMouseDown","getCopiedCellIdx","findIndex","c","getViewportRows","rowElements","every","cr","size","boxShadow","borderLeft","autoFocusAndSelect","input","TextEditor"],"mappings":";;;;;;AAEO,SAASA,eAAT,CAA4B,GAAGC,IAA/B,EAA8D;AACnE,SAAOC,WAAW,CACfC,MAAD,IAAsB;AACpB,SAAK,MAAMC,GAAX,IAAkBH,IAAlB,EAAwB;AACtB,UAAI,OAAOG,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,QAAAA,GAAG,CAACD,MAAD,CAAH;AACD,OAFD,MAEO,IAAIC,GAAG,KAAK,IAAZ,EAAkB;AAEvBA,QAAAA,GAAG,CAACC,OAAJ,GAAcF,MAAd;AACD;AACF;AACF,GAVe,EAYhBF,IAZgB,CAAlB;AAcD;;ACkCM,SAASK,eAAT,CAAyBC,OAAzB,EAA8C;AACnD,QAAMC,eAAe,GAAGC,MAAM,EAA9B;;AAEA,WAASC,2BAAT,GAAuC;AACrC,QAAI,OAAOF,eAAe,CAACH,OAAvB,KAAmC,QAAvC,EAAiD;AAC/CM,MAAAA,oBAAoB,CAACH,eAAe,CAACH,OAAjB,CAApB;AACAG,MAAAA,eAAe,CAACH,OAAhB,GAA0BO,SAA1B;AACD;AACF;;AAKD,QAAMC,UAAU,GAAGJ,MAAM,CAAC,MAAY;AACpC,UAAM,IAAIK,KAAJ,CAAU,+CAAV,CAAN;AACD,GAFwB,CAAzB;AAIAC,EAAAA,SAAS,CAAC,MAAM;AACdF,IAAAA,UAAU,CAACR,OAAX,GAAqBE,OAArB;AACD,GAFQ,CAAT;AAIAQ,EAAAA,SAAS,CAAC,MAAM;AACd,aAASC,cAAT,GAA0B;AACxBR,MAAAA,eAAe,CAACH,OAAhB,GAA0BO,SAA1B;AACAC,MAAAA,UAAU,CAACR,OAAX;AACD;;AAED,aAASY,oBAAT,GAAgC;AAC9BP,MAAAA,2BAA2B;AAC3BF,MAAAA,eAAe,CAACH,OAAhB,GAA0Ba,qBAAqB,CAACF,cAAD,CAA/C;AACD;;AAEDG,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCH,oBAAjC,EAAuD;AAAEI,MAAAA,OAAO,EAAE;AAAX,KAAvD;AAEA,WAAO,MAAM;AACXF,MAAAA,MAAM,CAACG,mBAAP,CAA2B,OAA3B,EAAoCL,oBAApC,EAA0D;AAAEI,QAAAA,OAAO,EAAE;AAAX,OAA1D;AACAX,MAAAA,2BAA2B;AAC5B,KAHD;AAID,GAjBQ,EAiBN,EAjBM,CAAT;AAmBA,SAAOA,2BAAP;AACD;;AC7EM,SAASa,iBAAT,GAAgF;AACrF,QAAMC,OAAO,GAAGf,MAAM,CAAiB,IAAjB,CAAtB;AACA,QAAM,CAACgB,SAAD,EAAYC,YAAZ,IAA4BC,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BF,QAAQ,CAAC,CAAD,CAA5C;AAEAG,EAAAA,eAAe,CAAC,MAAM;AAEpB,UAAM;AAAEC,MAAAA;AAAF,QAAqBZ,MAA3B;AAGA,QAAIY,cAAc,IAAI,IAAtB,EAA4B;AAE5B,UAAMC,cAAc,GAAG,IAAID,cAAJ,CAAmBE,OAAO,IAAI;AACnD,YAAM;AAAEC,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAoBF,OAAO,CAAC,CAAD,CAAP,CAAWG,WAArC;AACAV,MAAAA,YAAY,CAACQ,KAAD,CAAZ;AACAL,MAAAA,aAAa,CAACM,MAAD,CAAb;AACD,KAJsB,CAAvB;AAMAH,IAAAA,cAAc,CAACK,OAAf,CAAuBb,OAAO,CAACnB,OAA/B;AAEA,WAAO,MAAM;AACX2B,MAAAA,cAAc,CAACM,UAAf;AACD,KAFD;AAGD,GAlBc,EAkBZ,EAlBY,CAAf;AAoBA,SAAO,CAACd,OAAD,EAAUC,SAAV,EAAqBG,UAArB,CAAP;AACD;;ACvCM,SAASW,WAAT,CAAiDC,cAAjD,EAAsF;AAC3F,QAAMpC,GAAG,GAAGK,MAAM,CAAI,IAAJ,CAAlB;AACAqB,EAAAA,eAAe,CAAC,MAAM;AAAA;;AACpB,QAAI,CAACU,cAAL,EAAqB;AACrB,oBAAApC,GAAG,CAACC,OAAJ,kCAAaoC,KAAb,CAAmB;AAAEC,MAAAA,aAAa,EAAE;AAAjB,KAAnB;AACD,GAHc,EAGZ,CAACF,cAAD,CAHY,CAAf;AAKA,SAAOpC,GAAP;AACD;;ACSM,SAASuC,mBAAT,CAA6B;AAClCC,EAAAA,KADkC;AAElCC,EAAAA,QAFkC;AAGlCL,EAAAA,cAHkC;AAIlCM,EAAAA,QAJkC;AAKlCvC,EAAAA,OALkC;AAMlCwC,EAAAA,QANkC;AAOlC,gBAAcC,SAPoB;AAQlC,qBAAmBC;AARe,CAA7B,EASsB;AAC3B,QAAMC,QAAQ,GAAGX,WAAW,CAAmBC,cAAnB,CAA5B;;AAEA,WAASW,YAAT,CAAsBC,CAAtB,EAA8D;AAC5DL,IAAAA,QAAQ,CAACK,CAAC,CAACC,MAAF,CAASC,OAAV,EAAoBF,CAAC,CAACG,WAAH,CAA8BC,QAAjD,CAAR;AACD;;AAED,sBACE;AAAO,IAAA,SAAS,EAAO,oBAAP,IAA8DV,QAA9D;AAAhB,kBACE;AACE,kBAAYE,SADd;AAEE,uBAAiBC,cAFnB;AAGE,IAAA,QAAQ,EAAEJ,QAHZ;AAIE,IAAA,GAAG,EAAEK,QAJP;AAKE,IAAA,IAAI,EAAC,UALP;AAME,IAAA,SAAS,EAAC,oBANZ;AAOE,IAAA,QAAQ,EAAEJ,QAPZ;AAQE,IAAA,OAAO,EAAEF,KARX;AASE,IAAA,QAAQ,EAAEO,YATZ;AAUE,IAAA,OAAO,EAAE5C;AAVX,IADF,eAaE;AAAK,IAAA,SAAS,EAAC;AAAf,IAbF,CADF;AAiBD;;ACjDM,SAASkD,cAAT,CAA2BC,KAA3B,EAAqD;AACxD,QAAMC,SAAS,GAAGD,KAAK,CAACE,IAAxB;AACA,QAAMC,cAAc,GAAGC,OAAO,CAAC,MAAM;AACjC,QAAI;AACA,UAAI,OAAOH,SAAP,KAAqB,QAAzB,EAAmC;AAC/B,4BAAO,0CAAGA,SAAS,CAACf,KAAb,CAAP;AACH;;AACD,0BAAO,0CAAGe,SAAH,CAAP;AACH,KALD,CAKE,MAAM;AACJ,aAAO,IAAP;AACH;AACJ,GAT6B,EAS3B,CAACA,SAAD,CAT2B,CAA9B;AAWA,SAAOE,cAAP;AACH;;ACbM,SAASE,oBAAT,CAAqC;AAC1CC,EAAAA,QAD0C;AAE1CC,EAAAA,UAF0C;AAG1CzB,EAAAA,cAH0C;AAI1C0B,EAAAA;AAJ0C,CAArC,EAKwB;AAC7B,QAAMC,OAAO,GAAG5B,WAAW,CAAkBC,cAAlB,CAA3B;;AAEA,WAAS4B,aAAT,CAAuB;AAAEC,IAAAA;AAAF,GAAvB,EAAsE;AACpE,QAAIA,GAAG,KAAK,OAAZ,EAAqB;AACnBH,MAAAA,WAAW;AACZ;AACF;;AAED,QAAMI,CAAC,GAAGL,UAAU,GAAG,mBAAH,GAAyB,mBAA7C;AAEA,sBACE;AACE,IAAA,GAAG,EAAEE,OADP;AAEE,IAAA,SAAS,EAAC,wBAFZ;AAGE,IAAA,QAAQ,EAAE,CAAC,CAHb;AAIE,IAAA,SAAS,EAAEC;AAJb,KAMGJ,QANH,eAOE;AAAK,IAAA,OAAO,EAAC,UAAb;AAAwB,IAAA,KAAK,EAAC,IAA9B;AAAmC,IAAA,MAAM,EAAC,GAA1C;AAA8C,IAAA,SAAS,EAAC;AAAxD,kBACE;AAAM,IAAA,CAAC,EAAEM;AAAT,IADF,CAPF,CADF;AAaD;;ACjCM,SAASC,eAAT,CAAyBC,KAAzB,EAAsD;AAC3DA,EAAAA,KAAK,CAACD,eAAN;AACD;AAEM,SAASE,SAAT,CAAmDC,UAAnD,EAAsFC,YAAtF,EAAuI;AAC5I,MAAIA,YAAY,KAAK/D,SAArB,EAAgC,OAAO8D,UAAP;AAEhC,SAAO,UAASF,KAAT,EAAmB;AACxBE,IAAAA,UAAU,CAACF,KAAD,CAAV;AACAG,IAAAA,YAAY,CAACH,KAAD,CAAZ;AACD,GAHD;AAID;;MCNYI,iBAAiB,GAAG;MAGpBC,YAA8B,GAAG;AAC5CR,EAAAA,GAAG,EAAEO,iBADuC;AAE5CE,EAAAA,IAAI,EAAE,EAFsC;AAG5C5C,EAAAA,KAAK,EAAE,EAHqC;AAI5C6C,EAAAA,QAAQ,EAAE,EAJkC;AAK5CC,EAAAA,SAAS,EAAE,KALiC;AAM5CC,EAAAA,QAAQ,EAAE,KANkC;AAO5CC,EAAAA,MAAM,EAAE,IAPoC;;AAQ5CC,EAAAA,cAAc,CAACzB,KAAD,EAAQ;AACpB,wBACE,oBAAC,mBAAD;AACE,oBAAW,YADb;AAEE,MAAA,KAAK,EAAEA,KAAK,CAAC0B,eAFf;AAGE,MAAA,QAAQ,EAAE1B,KAAK,CAAC2B;AAHlB,MADF;AAOD,GAhB2C;;AAiB5CC,EAAAA,SAAS,CAAC5B,KAAD,EAAQ;AACf,wBACE,oBAAC,mBAAD;AACE,oBAAW,QADb;AAEE,MAAA,QAAQ,EAAE,CAAC,CAFb;AAGE,MAAA,cAAc,EAAEA,KAAK,CAAClB,cAHxB;AAIE,MAAA,KAAK,EAAEkB,KAAK,CAAC6B,aAJf;AAKE,MAAA,OAAO,EAAEhB,eALX;AAME,MAAA,QAAQ,EAAEb,KAAK,CAAC8B;AANlB,MADF;AAUD,GA5B2C;;AA6B5CC,EAAAA,cAAc,CAAC/B,KAAD,EAAQ;AACpB,wBACE,oBAAC,mBAAD;AACE,oBAAW,cADb;AAEE,MAAA,QAAQ,EAAE,CAAC,CAFb;AAGE,MAAA,cAAc,EAAEA,KAAK,CAAClB,cAHxB;AAIE,MAAA,KAAK,EAAEkB,KAAK,CAAC6B,aAJf;AAKE,MAAA,QAAQ,EAAE7B,KAAK,CAAC8B,oBALlB;AAOE,MAAA,OAAO,EAAEjB;AAPX,MADF;AAWD;;AAzC2C;;ACOvC,SAASmB,kBAAT,CAAmC;AACxCC,EAAAA,UADwC;AAExCC,EAAAA,YAFwC;AAGxCC,EAAAA,aAHwC;AAIxCC,EAAAA,UAJwC;AAKxCC,EAAAA,oBALwC;AAMxCC,EAAAA;AANwC,CAAnC,EAOwB;AAAA;;AAC7B,QAAMC,cAAc,4BAAGF,oBAAH,oBAAGA,oBAAoB,CAAEG,QAAzB,oCAAqC,EAAzD;AACA,QAAMC,gBAAgB,6BAAGJ,oBAAH,oBAAGA,oBAAoB,CAAET,SAAzB,qCAAsC7B,cAA5D;AACA,QAAM2C,eAAe,6BAAGL,oBAAH,oBAAGA,oBAAoB,CAAEd,QAAzB,qCAAqC,KAA1D;AACA,QAAMoB,gBAAgB,6BAAGN,oBAAH,oBAAGA,oBAAoB,CAAEf,SAAzB,qCAAsC,KAA5D;AAEA,QAAM;AAAEsB,IAAAA,OAAF;AAAWC,IAAAA,qBAAX;AAAkCC,IAAAA,gBAAlC;AAAoDC,IAAAA,sBAApD;AAA4EC,IAAAA;AAA5E,MAAwF5C,OAAO,CAAC,MAAM;AAC1G,QAAI6C,IAAI,GAAG,CAAX;AACA,QAAIC,UAAU,GAAG,CAAjB;AACA,QAAIC,eAAe,GAAG,CAAtB;AACA,QAAIC,sBAAsB,GAAG,CAA7B;AACA,QAAIP,qBAAqB,GAAG,CAAC,CAA7B;AAEA,QAAIE,sBAAsB,GAAG,CAA7B;AAEA,UAAMH,OAAO,GAAGX,UAAU,CAACoB,GAAX,CAAeC,aAAa,IAAI;AAC9C,UAAI9E,KAAK,GAAG+E,iBAAiB,CAACD,aAAD,EAAgBpB,YAAhB,EAA8BC,aAA9B,CAA7B;;AAEA,UAAI3D,KAAK,KAAKtB,SAAd,EAAyB;AACvBkG,QAAAA,sBAAsB;AACvB,OAFD,MAEO;AACL5E,QAAAA,KAAK,GAAGgF,gBAAgB,CAAChF,KAAD,EAAQ8E,aAAR,EAAuBf,cAAvB,CAAxB;AACAY,QAAAA,eAAe,IAAI3E,KAAnB;AACD;;AAED,YAAMiF,MAA0B,GAAG,EAAE,GAAGH,aAAL;AAAoB9E,QAAAA;AAApB,OAAnC;;AAEA,UAAI8D,UAAJ,YAAIA,UAAU,CAAEoB,QAAZ,CAAqBD,MAAM,CAAC9C,GAA5B,CAAJ,EAAsC;AACpC8C,QAAAA,MAAM,CAACjC,MAAP,GAAgB,IAAhB;AACAiC,QAAAA,MAAM,CAACE,QAAP,GAAkB,IAAlB;AACD;;AAED,UAAIF,MAAM,CAACjC,MAAP,IAAiB,CAACiC,MAAM,CAACG,eAA7B,EAA8C;AAC5Cf,QAAAA,qBAAqB;AACtB;;AAED,aAAOY,MAAP;AACD,KAtBe,CAAhB;AAwBAb,IAAAA,OAAO,CAACiB,IAAR,CAAa,CAAC;AAAElD,MAAAA,GAAG,EAAEmD,IAAP;AAAatC,MAAAA,MAAM,EAAEuC;AAArB,KAAD,EAAiC;AAAEpD,MAAAA,GAAG,EAAEqD,IAAP;AAAaxC,MAAAA,MAAM,EAAEyC;AAArB,KAAjC,KAAoE;AAE/E,UAAIH,IAAI,KAAK5C,iBAAb,EAAgC,OAAO,CAAC,CAAR;AAChC,UAAI8C,IAAI,KAAK9C,iBAAb,EAAgC,OAAO,CAAP;;AAGhC,UAAIoB,UAAJ,YAAIA,UAAU,CAAEoB,QAAZ,CAAqBI,IAArB,CAAJ,EAAgC;AAC9B,YAAIxB,UAAU,CAACoB,QAAX,CAAoBM,IAApB,CAAJ,EAA+B;AAC7B,iBAAO1B,UAAU,CAAC4B,OAAX,CAAmBJ,IAAnB,IAA2BxB,UAAU,CAAC4B,OAAX,CAAmBF,IAAnB,CAAlC;AACD;;AACD,eAAO,CAAC,CAAR;AACD;;AACD,UAAI1B,UAAJ,YAAIA,UAAU,CAAEoB,QAAZ,CAAqBM,IAArB,CAAJ,EAAgC,OAAO,CAAP;;AAGhC,UAAID,OAAJ,EAAa;AACX,YAAIE,OAAJ,EAAa,OAAO,CAAP;AACb,eAAO,CAAC,CAAR;AACD;;AACD,UAAIA,OAAJ,EAAa,OAAO,CAAP;AAGb,aAAO,CAAP;AACD,KAvBD;AAyBA,UAAME,gBAAgB,GAAGhC,aAAa,GAAGgB,eAAzC;AACA,UAAMiB,sBAAsB,GAAGC,IAAI,CAACC,GAAL,CAC7BD,IAAI,CAACE,KAAL,CAAWJ,gBAAgB,GAAGf,sBAA9B,CAD6B,EAE7Bb,cAF6B,CAA/B;AAMA,UAAMS,OAAiB,GAAG,EAA1B;AACA,UAAMwB,iBAA4C,GAAG5B,OAAO,CAACS,GAAR,CAAY,CAACI,MAAD,EAASgB,GAAT,KAAiB;AAAA;;AAEhF,YAAMjG,KAAK,oBAAGiF,MAAM,CAACjF,KAAV,4BAAmBgF,gBAAgB,CAACY,sBAAD,EAAyBX,MAAzB,EAAiClB,cAAjC,CAA9C;AACA,YAAMmC,SAAS,GAAG,EAChB,GAAGjB,MADa;AAEhBgB,QAAAA,GAFgB;AAGhBjG,QAAAA,KAHgB;AAIhByE,QAAAA,IAJgB;AAKhB1B,QAAAA,QAAQ,sBAAEkC,MAAM,CAAClC,QAAT,+BAAqBmB,eALb;AAMhBpB,QAAAA,SAAS,uBAAEmC,MAAM,CAACnC,SAAT,gCAAsBqB,gBANf;AAOhBf,QAAAA,SAAS,uBAAE6B,MAAM,CAAC7B,SAAT,gCAAsBa;AAPf,OAAlB;;AAUA,UAAIiC,SAAS,CAACf,QAAd,EAAwB;AAAA;;AACtBX,QAAAA,OAAO,CAAC2B,IAAR,CAAalB,MAAM,CAAC9C,GAApB;AACA+D,QAAAA,SAAS,CAAC3C,cAAV,4BAA2B0B,MAAM,CAAC1B,cAAlC,oCAAoD1B,oBAApD;AACD;;AAED6C,MAAAA,UAAU,IAAI1E,KAAd;AACAyE,MAAAA,IAAI,GAAGQ,MAAM,CAACG,eAAP,KAA2B,OAA3B,GAAqCX,IAArC,GAA4CA,IAAI,GAAGzE,KAA1D;AACA,aAAOkG,SAAP;AACD,KArBoD,CAArD;;AAuBA,QAAI7B,qBAAqB,KAAK,CAAC,CAA/B,EAAkC;AAChC,YAAM+B,gBAAgB,GAAGJ,iBAAiB,CAAC3B,qBAAD,CAA1C;AACA+B,MAAAA,gBAAgB,CAACC,kBAAjB,GAAsC,IAAtC;AACA9B,MAAAA,sBAAsB,GAAG6B,gBAAgB,CAAC3B,IAAjB,GAAwB2B,gBAAgB,CAACpG,KAAlE;AACD;;AAED,WAAO;AACLoE,MAAAA,OAAO,EAAE4B,iBADJ;AAEL3B,MAAAA,qBAFK;AAGLE,MAAAA,sBAHK;AAILD,MAAAA,gBAAgB,EAAEI,UAJb;AAKLF,MAAAA;AALK,KAAP;AAOD,GAtGoG,EAsGlG,CAACd,YAAD,EAAeO,gBAAf,EAAiCE,gBAAjC,EAAmDD,eAAnD,EAAoEH,cAApE,EAAoFN,UAApF,EAAgGK,UAAhG,EAA4GH,aAA5G,CAtGkG,CAArG;AAwGA,QAAM,CAAC2C,mBAAD,EAAsBC,iBAAtB,IAA2C3E,OAAO,CAAC,MAAwB;AAE/E,UAAM4E,YAAY,GAAG5C,UAAU,GAAGW,sBAAlC;AACA,UAAMkC,aAAa,GAAG7C,UAAU,GAAGD,aAAnC;AAEA,UAAM+C,UAAU,GAAGtC,OAAO,CAACuC,MAAR,GAAiB,CAApC;AACA,UAAMC,sBAAsB,GAAGf,IAAI,CAACgB,GAAL,CAASxC,qBAAqB,GAAG,CAAjC,EAAoCqC,UAApC,CAA/B;;AAGA,QAAIF,YAAY,IAAIC,aAApB,EAAmC;AACjC,aAAO,CAACG,sBAAD,EAAyBA,sBAAzB,CAAP;AACD;;AAGD,QAAIE,kBAAkB,GAAGF,sBAAzB;;AACA,WAAOE,kBAAkB,GAAGJ,UAA5B,EAAwC;AACtC,YAAM;AAAEjC,QAAAA,IAAF;AAAQzE,QAAAA;AAAR,UAAkBoE,OAAO,CAAC0C,kBAAD,CAA/B;;AAGA,UAAIrC,IAAI,GAAGzE,KAAP,GAAewG,YAAnB,EAAiC;AAC/B;AACD;;AACDM,MAAAA,kBAAkB;AACnB;;AAGD,QAAIC,gBAAgB,GAAGD,kBAAvB;;AACA,WAAOC,gBAAgB,GAAGL,UAA1B,EAAsC;AACpC,YAAM;AAAEjC,QAAAA,IAAF;AAAQzE,QAAAA;AAAR,UAAkBoE,OAAO,CAAC2C,gBAAD,CAA/B;;AAGA,UAAItC,IAAI,GAAGzE,KAAP,IAAgByG,aAApB,EAAmC;AACjC;AACD;;AACDM,MAAAA,gBAAgB;AACjB;;AAED,UAAMT,mBAAmB,GAAGT,IAAI,CAACC,GAAL,CAASc,sBAAT,EAAiCE,kBAAkB,GAAG,CAAtD,CAA5B;AACA,UAAMP,iBAAiB,GAAGV,IAAI,CAACgB,GAAL,CAASH,UAAT,EAAqBK,gBAAgB,GAAG,CAAxC,CAA1B;AAEA,WAAO,CAACT,mBAAD,EAAsBC,iBAAtB,CAAP;AACD,GAzCuD,EAyCrD,CAACnC,OAAD,EAAUC,qBAAV,EAAiCT,UAAjC,EAA6CW,sBAA7C,EAAqEZ,aAArE,CAzCqD,CAAxD;AA2CA,QAAMqD,eAAe,GAAGpF,OAAO,CAAC,MAA0C;AACxE,UAAMoF,eAA0C,GAAG,EAAnD;;AACA,SAAK,IAAIC,MAAM,GAAG,CAAlB,EAAqBA,MAAM,IAAIV,iBAA/B,EAAkDU,MAAM,EAAxD,EAA4D;AAC1D,YAAMhC,MAAM,GAAGb,OAAO,CAAC6C,MAAD,CAAtB;AAEA,UAAIA,MAAM,GAAGX,mBAAT,IAAgC,CAACrB,MAAM,CAACjC,MAA5C,EAAoD;AACpDgE,MAAAA,eAAe,CAACb,IAAhB,CAAqBlB,MAArB;AACD;;AAED,WAAO+B,eAAP;AACD,GAV8B,EAU5B,CAACT,iBAAD,EAAoBD,mBAApB,EAAyClC,OAAzC,CAV4B,CAA/B;AAYA,SAAO;AAAEA,IAAAA,OAAF;AAAW4C,IAAAA,eAAX;AAA4B1C,IAAAA,gBAA5B;AAA8CD,IAAAA,qBAA9C;AAAqEE,IAAAA,sBAArE;AAA6FC,IAAAA;AAA7F,GAAP;AACD;;AAED,SAASO,iBAAT,CACE;AAAE5C,EAAAA,GAAF;AAAOnC,EAAAA;AAAP,CADF,EAEE0D,YAFF,EAGEC,aAHF,EAIsB;AACpB,MAAID,YAAY,CAACwD,GAAb,CAAiB/E,GAAjB,CAAJ,EAA2B;AAEzB,WAAOuB,YAAY,CAACyD,GAAb,CAAiBhF,GAAjB,CAAP;AACD;;AACD,MAAI,OAAOnC,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOA,KAAP;AACD;;AACD,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,SAASoH,IAAT,CAAcpH,KAAd,CAAjC,EAAuD;AACrD,WAAO6F,IAAI,CAACE,KAAL,CAAWpC,aAAa,GAAG0D,QAAQ,CAACrH,KAAD,EAAQ,EAAR,CAAxB,GAAsC,GAAjD,CAAP;AACD;;AACD,SAAOtB,SAAP;AACD;;AAED,SAASsG,gBAAT,CACEhF,KADF,EAEE;AAAEgE,EAAAA,QAAF;AAAYnB,EAAAA;AAAZ,CAFF,EAGEkB,cAHF,EAIU;AACR/D,EAAAA,KAAK,GAAG6F,IAAI,CAACC,GAAL,CAAS9F,KAAT,EAAgBgE,QAAhB,WAAgBA,QAAhB,GAA4BD,cAA5B,CAAR;;AAEA,MAAI,OAAOlB,QAAP,KAAoB,QAAxB,EAAkC;AAChC,WAAOgD,IAAI,CAACgB,GAAL,CAAS7G,KAAT,EAAgB6C,QAAhB,CAAP;AACD;;AAED,SAAO7C,KAAP;AACD;;ACzND,MAAMsH,kBAAkB,GAAG,CAA3B;;AAaA,SAASC,eAAT,CAAyBC,GAAzB,EAAkE;AAChE,SAAOC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAP;AACD;;AAEM,SAASG,eAAT,CAA4B;AACjCC,EAAAA,OADiC;AAEjCC,EAAAA,SAFiC;AAGjCC,EAAAA,YAHiC;AAIjCC,EAAAA,SAJiC;AAKjCvD,EAAAA,OALiC;AAMjCwD,EAAAA,UANiC;AAOjCC,EAAAA;AAPiC,CAA5B,EAQiB;AACtB,QAAM,CAACC,WAAD,EAAcC,SAAd,IAA2BvG,OAAO,CAAC,MAAM;AAC7C,QAAI4C,OAAO,CAACmC,MAAR,KAAmB,CAAnB,IAAwB,CAACqB,UAA7B,EAAyC,OAAO,CAACtJ,SAAD,EAAYkJ,OAAO,CAACjB,MAApB,CAAP;;AAEzC,UAAMyB,SAAS,GAAG,CAACC,IAAD,EAAqB,CAACC,UAAD,EAAa,GAAGC,oBAAhB,CAArB,EAA+EC,aAA/E,KAAyI;AACzJ,UAAIC,cAAc,GAAG,CAArB;AACA,YAAMC,MAA4B,GAAG,EAArC;;AACA,WAAK,MAAM,CAACvG,GAAD,EAAMwG,SAAN,CAAX,IAA+BC,MAAM,CAAC7I,OAAP,CAAeiI,UAAU,CAACK,IAAD,EAAOC,UAAP,CAAzB,CAA/B,EAA6E;AAE3E,cAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCP,oBAAoB,CAAC5B,MAArB,KAAgC,CAAhC,GAClC,CAACgC,SAAD,EAAYA,SAAS,CAAChC,MAAtB,CADkC,GAElCyB,SAAS,CAACO,SAAD,EAAYJ,oBAAZ,EAAkCC,aAAa,GAAGC,cAAhB,GAAiC,CAAnE,CAFb;AAGAC,QAAAA,MAAM,CAACvG,GAAD,CAAN,GAAc;AAAEwG,UAAAA,SAAF;AAAaE,UAAAA,WAAb;AAA0BL,UAAAA,aAAa,EAAEA,aAAa,GAAGC;AAAzD,SAAd;AACAA,QAAAA,cAAc,IAAIK,cAAc,GAAG,CAAnC;AACD;;AAED,aAAO,CAACJ,MAAD,EAASD,cAAT,CAAP;AACD,KAbD;;AAeA,WAAOL,SAAS,CAACR,OAAD,EAAUpD,OAAV,EAAmB,CAAnB,CAAhB;AACD,GAnBuC,EAmBrC,CAACA,OAAD,EAAUwD,UAAV,EAAsBJ,OAAtB,CAnBqC,CAAxC;AAqBA,QAAM,CAACS,IAAD,EAAOU,YAAP,IAAuBnH,OAAO,CAAC,MAAM;AACzC,UAAMmH,YAAY,GAAG,IAAIC,GAAJ,EAArB;AACA,QAAI,CAACd,WAAL,EAAkB,OAAO,CAACN,OAAD,EAAUmB,YAAV,CAAP;AAElB,UAAME,aAAqC,GAAG,EAA9C;;AACA,UAAMC,WAAW,GAAG,CAACb,IAAD,EAA4Cc,QAA5C,EAA0EC,KAA1E,KAAkG;AACpH,UAAI7B,eAAe,CAACc,IAAD,CAAnB,EAA2B;AACzBY,QAAAA,aAAa,CAAC9C,IAAd,CAAmB,GAAGkC,IAAtB;AACA;AACD;;AACDO,MAAAA,MAAM,CAACS,IAAP,CAAYhB,IAAZ,EAAkBiB,OAAlB,CAA0B,CAACxH,QAAD,EAAWyH,QAAX,EAAqBF,IAArB,KAA8B;AAAA;;AAEtD,cAAMG,EAAE,GAAGL,QAAQ,KAAKzK,SAAb,GAA0B,GAAEyK,QAAS,KAAIrH,QAAS,EAAlD,GAAsDA,QAAjE;AACA,cAAMC,UAAU,4BAAGkG,gBAAH,oBAAGA,gBAAgB,CAAEf,GAAlB,CAAsBsC,EAAtB,CAAH,oCAAgC,KAAhD;AACA,cAAM;AAAEb,UAAAA,SAAF;AAAaE,UAAAA,WAAb;AAA0BL,UAAAA;AAA1B,YAA4CH,IAAI,CAACvG,QAAD,CAAtD;AAEA,cAAM2H,QAAqB,GAAG;AAC5BD,UAAAA,EAD4B;AAE5BL,UAAAA,QAF4B;AAG5BrH,UAAAA,QAH4B;AAI5BC,UAAAA,UAJ4B;AAK5B4G,UAAAA,SAL4B;AAM5BS,UAAAA,KAN4B;AAO5BG,UAAAA,QAP4B;AAQ5Bf,UAAAA,aAR4B;AAS5BkB,UAAAA,OAAO,EAAEL,IAAI,CAAC1C;AATc,SAA9B;AAWAsC,QAAAA,aAAa,CAAC9C,IAAd,CAAmBsD,QAAnB;AACAV,QAAAA,YAAY,CAACY,GAAb,CAAiBF,QAAjB;;AAEA,YAAI1H,UAAJ,EAAgB;AACdmH,UAAAA,WAAW,CAACL,WAAD,EAAcW,EAAd,EAAkBJ,KAAK,GAAG,CAA1B,CAAX;AACD;AACF,OAvBD;AAwBD,KA7BD;;AA+BAF,IAAAA,WAAW,CAAChB,WAAD,EAAcxJ,SAAd,EAAyB,CAAzB,CAAX;AACA,WAAO,CAACuK,aAAD,EAAgBF,YAAhB,CAAP;AACD,GAtCmC,EAsCjC,CAACd,gBAAD,EAAmBC,WAAnB,EAAgCN,OAAhC,CAtCiC,CAApC;;AAwCA,QAAMgC,UAAU,GAAOC,GAAJ,IAAyCd,YAAY,CAAC7B,GAAb,CAAiB2C,GAAjB,CAA5D;;AAEA,QAAMC,iBAAiB,GAAG,CAA1B;AACA,QAAMC,kBAAkB,GAAGlE,IAAI,CAACE,KAAL,CAAWgC,SAAS,GAAGF,SAAvB,CAA3B;AACA,QAAMmC,gBAAgB,GAAGnE,IAAI,CAACgB,GAAL,CAASwB,IAAI,CAAC1B,MAAL,GAAc,CAAvB,EAA0Bd,IAAI,CAACE,KAAL,CAAW,CAACgC,SAAS,GAAGD,YAAb,IAA6BD,SAAxC,CAA1B,CAAzB;AACA,QAAMoC,mBAAmB,GAAGpE,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,KAAL,CAAW,CAACgE,kBAAkB,GAAGD,iBAAtB,IAA2CxC,kBAAtD,IAA4EA,kBAAxF,CAA5B;AACA,QAAM4C,iBAAiB,GAAGrE,IAAI,CAACgB,GAAL,CAASwB,IAAI,CAAC1B,MAAL,GAAc,CAAvB,EAA0Bd,IAAI,CAACsE,IAAL,CAAU,CAACH,gBAAgB,GAAGF,iBAApB,IAAyCxC,kBAAnD,IAAyEA,kBAAnG,CAA1B;AAEA,SAAO;AACL2C,IAAAA,mBADK;AAELC,IAAAA,iBAFK;AAGL7B,IAAAA,IAHK;AAILF,IAAAA,SAJK;AAKLyB,IAAAA;AALK,GAAP;AAOD;;ACrGM,SAASQ,aAAT,CAA0DC,EAA1D,EAAiE;AACtE,QAAMnM,GAAG,GAAGK,MAAM,CAAC8L,EAAD,CAAlB;AAEAxL,EAAAA,SAAS,CAAC,MAAM;AACdX,IAAAA,GAAG,CAACC,OAAJ,GAAckM,EAAd;AACD,GAFQ,CAAT;AAIA,SAAOrM,WAAW,CAAC,CAAC,GAAGsM,IAAJ,KAA4B;AAC7CpM,IAAAA,GAAG,CAACC,OAAJ,CAAY,GAAGmM,IAAf;AACD,GAFiB,EAEf,EAFe,CAAlB;AAGD;;ACCc,SAASC,kBAAT,CAAmC;AAChDtF,EAAAA,MADgD;AAEhDuF,EAAAA,MAFgD;AAGhDC,EAAAA,UAHgD;AAIhDC,EAAAA,aAJgD;AAKhDC,EAAAA;AALgD,CAAnC,EAME;AACfD,EAAAA,aAAa,GAAGD,UAAU,KAAKxF,MAAM,CAAC9C,GAAtB,IAA6BuI,aAA7B,IAA8C,MAA9D;AACA,MAAIE,QAAQ,GAAG,EAAf;;AACA,MAAIF,aAAa,KAAK,KAAtB,EAA6B;AAC3BE,IAAAA,QAAQ,GAAG,QAAX;AACD,GAFD,MAEO,IAAIF,aAAa,KAAK,MAAtB,EAA8B;AACnCE,IAAAA,QAAQ,GAAG,QAAX;AACD;;AAED,WAASvM,OAAT,GAAmB;AACjB,QAAI,CAACmM,MAAL,EAAa;AACb,UAAM;AAAEK,MAAAA;AAAF,QAA0B5F,MAAhC;AACA,QAAI6F,SAAJ;;AACA,YAAQJ,aAAR;AACE,WAAK,KAAL;AACEI,QAAAA,SAAS,GAAGD,mBAAmB,GAAG,MAAH,GAAY,MAA3C;AACA;;AACF,WAAK,MAAL;AACEC,QAAAA,SAAS,GAAGD,mBAAmB,GAAG,KAAH,GAAW,MAA1C;AACA;;AACF;AACEC,QAAAA,SAAS,GAAGD,mBAAmB,GAAG,MAAH,GAAY,KAA3C;AACA;AATJ;;AAWAL,IAAAA,MAAM,CAACvF,MAAM,CAAC9C,GAAR,EAAa2I,SAAb,CAAN;AACD;;AAED,sBACE;AAAM,IAAA,SAAS,EAAC,sBAAhB;AAAuC,IAAA,OAAO,EAAEzM;AAAhD,kBACE;AAAM,IAAA,SAAS,EAAC;AAAhB,KAAwCsM,QAAxC,CADF,eAEE,kCAAOC,QAAP,CAFF,CADF;AAMD;;AC9CD,SAASG,WAAT,CAAqBL,aAArB,EAAoD;AAClD,UAAQA,aAAR;AACE,SAAK,KAAL;AACE,aAAO,WAAP;;AACF,SAAK,MAAL;AACE,aAAO,YAAP;;AACF;AACE,aAAO,MAAP;AANJ;AAQD;;AAkBc,SAASM,UAAT,CAA2B;AACxC/F,EAAAA,MADwC;AAExCgG,EAAAA,QAFwC;AAGxC/H,EAAAA,eAHwC;AAIxCC,EAAAA,wBAJwC;AAKxCsH,EAAAA,UALwC;AAMxCC,EAAAA,aANwC;AAOxCnL,EAAAA,SAPwC;AAQxCqE,EAAAA,UARwC;AASxC4G,EAAAA,MATwC;AAUxCU,EAAAA;AAVwC,CAA3B,EAWY;AACzB,WAASC,aAAT,CAAuB7I,KAAvB,EAAkE;AAChE,QAAIA,KAAK,CAAC8I,WAAN,KAAsB,OAAtB,IAAiC9I,KAAK,CAAC+I,OAAN,KAAkB,CAAvD,EAA0D;AACxD;AACD;;AAED,UAAM;AAAEC,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,QAA+BjJ,KAArC;AACA,UAAM;AAAEkJ,MAAAA;AAAF,QAAYF,aAAa,CAACG,qBAAd,EAAlB;AACA,UAAMC,MAAM,GAAGF,KAAK,GAAGlJ,KAAK,CAACqJ,OAA7B;;AAEA,QAAID,MAAM,GAAG,EAAb,EAAiB;AACf;AACD;;AAED,aAASE,aAAT,CAAuBtJ,KAAvB,EAA4C;AAC1C,UAAIA,KAAK,CAACiJ,SAAN,KAAoBA,SAAxB,EAAmC;;AACnC,UAAIjJ,KAAK,CAAC8I,WAAN,KAAsB,OAAtB,IAAiC9I,KAAK,CAAC+I,OAAN,KAAkB,CAAvD,EAA0D;AACxDQ,QAAAA,WAAW;AACX;AACD;;AACD,YAAM7L,KAAK,GAAGsC,KAAK,CAACqJ,OAAN,GAAgBD,MAAhB,GAAyBJ,aAAa,CAACG,qBAAd,GAAsChH,IAA7E;;AACA,UAAIzE,KAAK,GAAG,CAAZ,EAAe;AACbiL,QAAAA,QAAQ,CAAChG,MAAD,EAASjF,KAAT,CAAR;AACD;AACF;;AAED,aAAS6L,WAAT,GAAuB;AACrB,UAAIvJ,KAAK,CAACiJ,SAAN,KAAoBA,SAAxB,EAAmC;AACnCtM,MAAAA,MAAM,CAACG,mBAAP,CAA2B,aAA3B,EAA0CwM,aAA1C;AACA3M,MAAAA,MAAM,CAACG,mBAAP,CAA2B,WAA3B,EAAwCyM,WAAxC;AACD;;AAEDvJ,IAAAA,KAAK,CAACwJ,cAAN;AACA7M,IAAAA,MAAM,CAACC,gBAAP,CAAwB,aAAxB,EAAuC0M,aAAvC;AACA3M,IAAAA,MAAM,CAACC,gBAAP,CAAwB,WAAxB,EAAqC2M,WAArC;AACD;;AAED,WAASE,OAAT,GAAmB;AACjB,QAAI9G,MAAM,CAAChC,cAAX,EAA2B;AACzB,0BACE,oBAAC,MAAD,CAAQ,cAAR;AACE,QAAA,MAAM,EAAEgC,MADV;AAEE,QAAA,UAAU,EAAEwF,UAFd;AAGE,QAAA,aAAa,EAAEC,aAHjB;AAIE,QAAA,MAAM,EAAEF,MAJV;AAKE,QAAA,eAAe,EAAEtH,eALnB;AAME,QAAA,wBAAwB,EAAEC;AAN5B,QADF;AAUD;;AAED,QAAI8B,MAAM,CAAClC,QAAX,EAAqB;AACnB,0BACE,oBAAC,kBAAD;AACE,QAAA,MAAM,EAAEkC,MADV;AAEE,QAAA,MAAM,EAAEuF,MAFV;AAGE,QAAA,UAAU,EAAEC,UAHd;AAIE,QAAA,aAAa,EAAEC;AAJjB,SAMGzF,MAAM,CAACrC,IANV,CADF;AAUD;;AAED,WAAOqC,MAAM,CAACrC,IAAd;AACD;;AAED,QAAMoJ,SAAS,GAAGC,IAAI,CAAC,UAAD,EAAahH,MAAM,CAACiH,eAApB,EACEjH,MAAM,CAACnC,SADT,IACpB,oBADoB,EAEDmC,MAAM,CAACjC,MAFN,IAEpB,iBAFoB,EAGIiC,MAAM,CAACoB,kBAHX,IAGiCzC,UAAU,GAAG,CAH9C,IAGpB,sBAHoB,EAIWqB,MAAM,CAACG,eAAP,KAA2B,OAJtC,IAIpB,6BAJoB,IAKqB8F,aALrB,mDAMIjG,MAAM,CAACkH,SAAP,KAAqB,OANzB,IAMpB,sBANoB,CAAtB;AAQA,QAAMC,KAA0B,GAAGnH,MAAM,CAACG,eAAP,KAA2B,OAA3B,GAAqC;AAAEpF,IAAAA,KAAK,EAAEiF,MAAM,CAACjF,KAAhB;AAAuByE,IAAAA,IAAI,EAAElF,SAAS,GAAG0F,MAAM,CAACjF;AAAhD,GAArC,GAA+F;AAChIA,IAAAA,KAAK,EAAEiF,MAAM,CAACjF,KADkH;AAEhIyE,IAAAA,IAAI,EAAEQ,MAAM,CAACR;AAFmH,GAAlI;AAKA,sBACE;AACE,IAAA,IAAI,EAAC,cADP;AAEE,qBAAeQ,MAAM,CAACgB,GAAP,GAAa,CAF9B;AAGE,iBAAWwE,UAAU,KAAKxF,MAAM,CAAC9C,GAAtB,GAA4B4I,WAAW,CAACL,aAAD,CAAvC,GAAyDhM,SAHtE;AAIE,IAAA,SAAS,EAAEsN,SAJb;AAKE,IAAA,KAAK,EAAEI,KALT;AAME,IAAA,aAAa,EAAEnH,MAAM,CAACnC,SAAP,GAAmBqI,aAAnB,GAAmCzM;AANpD,kBAQI;AAAK,IAAA,SAAS,EAAO;AAArB,IARJ,EASGqN,OAAO,EATV,CADF;AAaD;;ACzIM,SAASM,uBAAT,CAAwCjI,OAAxC,EAAqF6B,GAArF,EAAkGqG,iBAAlG,EAA6HC,kBAA7H,EAAiK;AACtK,MAAI9H,IAAI,GAAG,CAAX;AACA,MAAIzB,MAAM,GAAG,CAAb;;AAEA,OAAK,IAAIwJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvG,GAApB,EAAyBuG,CAAC,EAA1B,EAA8B;AAC5B,UAAMvH,MAAM,GAAGb,OAAO,CAACoI,CAAD,CAAtB;;AACA,QAAIvH,MAAJ,EAAY;AACV,UAAIA,MAAM,CAACjF,KAAX,EAAkB;AAChByE,QAAAA,IAAI,IAAIQ,MAAM,CAACjF,KAAf;AACD;;AACD,UAAIiF,MAAM,CAACjC,MAAX,EAAmB;AACjBA,QAAAA,MAAM,IAAIiC,MAAM,CAACjF,KAAjB;AACD;AACF;AACF;;AAED,QAAMyM,cAAc,GAAGrI,OAAO,CAAC6B,GAAD,CAA9B;;AACA,MAAIwG,cAAJ,EAAoB;AAClB,UAAM7I,UAAU,GAAGa,IAAI,GAAGzB,MAAP,GAAgBsJ,iBAAnC;AACA,UAAMI,WAAW,GAAGjI,IAAI,GAAGgI,cAAc,CAACzM,KAAtB,GAA8BsM,iBAAlD;;AAEA,QAAI1I,UAAU,GAAG,CAAjB,EAAoB;AAClB,aAAOA,UAAP;AACD;;AACD,QAAI8I,WAAW,GAAGH,kBAAlB,EAAsC;AACpC,aAAOG,WAAW,GAAGH,kBAArB;AACD;AACF;;AAED,SAAO,CAAP;AACD;AAQM,SAASI,kBAAT,CAA4B;AAAExK,EAAAA,GAAF;AAAOhB,EAAAA;AAAP,CAA5B,EAA2F;AAChG,MAAIgB,GAAG,KAAK,KAAR,KAAkBhB,MAAM,YAAYyL,gBAAlB,IAAsCzL,MAAM,YAAY0L,mBAAxD,IAA+E1L,MAAM,YAAY2L,iBAAnH,CAAJ,EAA2I;AACzI,WAAO3L,MAAM,CAAC4L,OAAP,CAAe,6FAAf,CAAP;AACD;;AACD,SAAO,KAAP;AACD;;AC5CD,MAAMC,YAAY,GAAG,IAAIhE,GAAJ,CAAQ,CAE3B,cAF2B,EAI3B,KAJ2B,EAK3B,UAL2B,EAM3B,UAN2B,EAO3B,SAP2B,EAQ3B,IAR2B,EAS3B,QAT2B,EAU3B,MAV2B,EAW3B,SAX2B,EAY3B,YAZ2B,EAa3B,OAb2B,EAe3B,KAf2B,EAiB3B,WAjB2B,EAkB3B,WAlB2B,EAmB3B,YAnB2B,EAoB3B,SApB2B,EAqB3B,KArB2B,EAsB3B,MAtB2B,EAuB3B,UAvB2B,EAwB3B,QAxB2B,EA0B3B,QA1B2B,EA4B3B,aA5B2B,EA6B3B,QA7B2B,EA8B3B,OA9B2B,EA+B3B,MA/B2B,EAiC3B,aAjC2B,EAmC3B,IAnC2B,EAqC3B,IArC2B,EAsC3B,IAtC2B,EAuC3B,IAvC2B,EAwC3B,IAxC2B,EAyC3B,IAzC2B,EA0C3B,IA1C2B,EA2C3B,IA3C2B,EA4C3B,KA5C2B,EA6C3B,KA7C2B,EA8C3B,KA9C2B,CAAR,CAArB;AAiDO,SAASiE,iBAAT,CAA2B/L,CAA3B,EAA4D;AACjE,SAAO,CAACA,CAAC,CAACgM,OAAF,IAAahM,CAAC,CAACiM,OAAhB,KAA4BjM,CAAC,CAACiB,GAAF,KAAU,SAA7C;AACD;AAEM,SAASiL,kBAAT,CAA4B9K,KAA5B,EAAiF;AACtF,SAAO,CAAC0K,YAAY,CAAC9F,GAAb,CAAiB5E,KAAK,CAACH,GAAvB,CAAR;AACD;;AC9CM,SAASkL,sBAAT,CAAuC;AAAEC,EAAAA,gBAAF;AAAoBlJ,EAAAA,OAApB;AAA6BiE,EAAAA,IAA7B;AAAmCuB,EAAAA;AAAnC,CAAvC,EAAoI;AACzI,QAAM3E,MAAM,GAAGb,OAAO,CAACkJ,gBAAgB,CAACrH,GAAlB,CAAtB;AACA,QAAM4D,GAAG,GAAGxB,IAAI,CAACiF,gBAAgB,CAACC,MAAlB,CAAhB;AACA,SAAOtI,MAAM,CAACuI,MAAP,IAAiB,IAAjB,IACF,CAACvI,MAAM,CAACE,QADN,IAEF,CAACyE,UAAU,CAACC,GAAD,CAFT,IAGF,CAAC,OAAO5E,MAAM,CAACwI,QAAd,KAA2B,UAA3B,GAAwCxI,MAAM,CAACwI,QAAP,CAAgB5D,GAAhB,CAAxC,GAA+D5E,MAAM,CAACwI,QAAvE,MAAqF,KAH1F;AAID;AASM,SAASC,2BAAT,CAA4C;AAAEC,EAAAA,kBAAF;AAAsBvJ,EAAAA,OAAtB;AAA+B+D,EAAAA,SAA/B;AAA0CyF,EAAAA;AAA1C,CAA5C,EAAwJ;AAC7J,MAAID,kBAAkB,KAAK,MAA3B,EAAmC;AACjC,UAAM;AAAE1H,MAAAA,GAAF;AAAOsH,MAAAA;AAAP,QAAkBK,YAAxB;AACA,UAAMC,YAAY,GAAGzJ,OAAO,CAACuC,MAA7B;AACA,UAAMmH,iBAAiB,GAAG7H,GAAG,KAAK4H,YAAlC;AACA,UAAME,mBAAmB,GAAG9H,GAAG,KAAK,CAAC,CAArC;;AAEA,QAAI6H,iBAAJ,EAAuB;AACrB,UAAIH,kBAAkB,KAAK,YAA3B,EAAyC;AACvC,cAAMK,SAAS,GAAGT,MAAM,KAAKpF,SAAS,GAAG,CAAzC;;AACA,YAAI,CAAC6F,SAAL,EAAgB;AACd,iBAAO;AACL/H,YAAAA,GAAG,EAAE,CADA;AAELsH,YAAAA,MAAM,EAAEA,MAAM,GAAG;AAFZ,WAAP;AAID;AACF,OARD,MAQO,IAAII,kBAAkB,KAAK,eAA3B,EAA4C;AACjD,eAAO;AACLJ,UAAAA,MADK;AAELtH,UAAAA,GAAG,EAAE;AAFA,SAAP;AAID;AACF,KAfD,MAeO,IAAI8H,mBAAJ,EAAyB;AAC9B,UAAIJ,kBAAkB,KAAK,YAA3B,EAAyC;AACvC,cAAMM,UAAU,GAAGV,MAAM,KAAK,CAA9B;;AACA,YAAI,CAACU,UAAL,EAAiB;AACf,iBAAO;AACLV,YAAAA,MAAM,EAAEA,MAAM,GAAG,CADZ;AAELtH,YAAAA,GAAG,EAAE4H,YAAY,GAAG;AAFf,WAAP;AAID;AACF,OARD,MAQO,IAAIF,kBAAkB,KAAK,eAA3B,EAA4C;AACjD,eAAO;AACLJ,UAAAA,MADK;AAELtH,UAAAA,GAAG,EAAE4H,YAAY,GAAG;AAFf,SAAP;AAID;AACF;AACF;;AAED,SAAOD,YAAP;AACD;AAUM,SAASM,WAAT,CAA4B;AAAEP,EAAAA,kBAAF;AAAsBvJ,EAAAA,OAAtB;AAA+B+D,EAAAA,SAA/B;AAA0CmF,EAAAA,gBAAgB,EAAE;AAAEC,IAAAA,MAAF;AAAUtH,IAAAA;AAAV,GAA5D;AAA6E3E,EAAAA;AAA7E,CAA5B,EAAsJ;AAG3J,MAAIqM,kBAAkB,KAAK,MAAvB,IAAiCA,kBAAkB,KAAK,YAA5D,EAA0E;AACxE,UAAMQ,eAAe,GAAGlI,GAAG,KAAK7B,OAAO,CAACuC,MAAR,GAAiB,CAAjD;AACA,UAAMyH,gBAAgB,GAAGnI,GAAG,KAAK,CAAjC;AACA,UAAMoI,SAAS,GAAGd,MAAM,KAAKpF,SAAS,GAAG,CAAzC;AACA,UAAMmG,UAAU,GAAGf,MAAM,KAAK,CAA9B;AAEA,WAAOjM,QAAQ,GAAG8M,gBAAgB,IAAIE,UAAvB,GAAoCH,eAAe,IAAIE,SAAtE;AACD;;AAED,SAAO,KAAP;AACD;AAEM,SAASE,mBAAT,CAA6B7M,IAA7B,EAA2E;AAC9E,MAAI,CAACA,IAAL,EAAW,OAAO,KAAP;;AAEX,MAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,CAACA,IAAI,CAACd,QAAtC,EAAgD;AAC5C,WAAO,KAAP;AACH;;AAED,SAAO,IAAP;AACH;;AC/FM,SAAS4N,sBAAT,CAAmCC,SAAnC,EAAmG;AACxG,MAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqC;AACnC,UAAM,IAAI7P,KAAJ,CAAU,uDAAV,CAAN;AACD;AACF;;ACgBD,SAAS8P,SAAT,CAA0B;AACxBtK,EAAAA,OADwB;AAExBiE,EAAAA,IAFwB;AAGxBsG,EAAAA,YAHwB;AAIxBC,EAAAA,oBAJwB;AAKxB1L,EAAAA,eALwB;AAMxB2L,EAAAA,cANwB;AAOxBpE,EAAAA,UAPwB;AAQxBC,EAAAA,aARwB;AASxBnL,EAAAA,SATwB;AAUxBiL,EAAAA,MAVwB;AAWxB5G,EAAAA,UAXwB;AAYxBsH,EAAAA;AAZwB,CAA1B,EAa0B;AACxB,QAAM4D,4BAA4B,GAAG9Q,WAAW,CAAEoD,OAAD,IAAsB;AACrE,QAAI,CAACwN,oBAAL,EAA2B;AAE3BJ,IAAAA,sBAAsB,CAACG,YAAD,CAAtB;AAEA,UAAMI,eAAe,GAAG,IAAI/F,GAAJ,EAAxB;;AACA,QAAI5H,OAAJ,EAAa;AACX,WAAK,MAAMyI,GAAX,IAAkBxB,IAAlB,EAAwB;AACtB0G,QAAAA,eAAe,CAACpF,GAAhB,CAAoBgF,YAAY,CAAC9E,GAAD,CAAhC;AACD;AACF;;AAED+E,IAAAA,oBAAoB,CAACG,eAAD,CAApB;AACD,GAb+C,EAa7C,CAACH,oBAAD,EAAuBvG,IAAvB,EAA6BsG,YAA7B,CAb6C,CAAhD;AAeA,sBACE;AACE,IAAA,IAAI,EAAC,KADP;AAEE,qBAAe,CAFjB;AAGE,IAAA,SAAS,EAAC;AAHZ,KAKGvK,OAAO,CAACS,GAAR,CAAYI,MAAM,IAAI;AACrB,wBACE,oBAAC,UAAD;AACE,MAAA,GAAG,EAAEA,MAAM,CAAC9C,GADd;AAEE,MAAA,MAAM,EAAE8C,MAFV;AAGE,MAAA,QAAQ,EAAE4J,cAHZ;AAIE,MAAA,eAAe,EAAE3L,eAJnB;AAKE,MAAA,wBAAwB,EAAE4L,4BAL5B;AAME,MAAA,MAAM,EAAEtE,MANV;AAOE,MAAA,UAAU,EAAEC,UAPd;AAQE,MAAA,aAAa,EAAEC,aARjB;AASE,MAAA,SAAS,EAAEnL,SATb;AAUE,MAAA,UAAU,EAAEqE,UAVd;AAWE,MAAA,aAAa,EAAEsH;AAXjB,MADF;AAeD,GAhBA,CALH,CADF;AAyBD;;AAED,iCAAe8D,IAAI,CAACN,SAAD,CAAnB;;AClEA,SAASO,SAAT,CAA0B;AACxB7K,EAAAA,OADwB;AAExB8K,EAAAA,OAFwB;AAGxBC,EAAAA;AAHwB,CAA1B,EAI0B;AACxB,WAAStO,QAAT,CAAkBsB,GAAlB,EAA+BzB,KAA/B,EAA+C;AAC7C,UAAM0O,UAAmB,GAAG,EAAE,GAAGF;AAAL,KAA5B;AACAE,IAAAA,UAAU,CAACjN,GAAD,CAAV,GAAkBzB,KAAlB;AACAyO,IAAAA,eAAe,QAAf,YAAAA,eAAe,CAAGC,UAAH,CAAf;AACD;;AAED,sBACE;AACE,IAAA,IAAI,EAAC,KADP;AAEE,qBAAe,CAFjB;AAGE,IAAA,SAAS,EAAC;AAHZ,KAKGhL,OAAO,CAACS,GAAR,CAAYI,MAAM,IAAI;AACrB,UAAM;AAAE9C,MAAAA;AAAF,QAAU8C,MAAhB;AAEA,UAAM+G,SAAS,GAAGC,IAAI,CAAC,UAAD,EACDhH,MAAM,CAACjC,MADN,IACpB,iBADoB,EAEIiC,MAAM,CAACoB,kBAFX,IAEpB,sBAFoB,CAAtB;AAIA,UAAM+F,KAA0B,GAAG;AACjCpM,MAAAA,KAAK,EAAEiF,MAAM,CAACjF,KADmB;AAEjCyE,MAAAA,IAAI,EAAEQ,MAAM,CAACR;AAFoB,KAAnC;AAKA,wBACE;AACE,MAAA,GAAG,EAAEtC,GADP;AAEE,MAAA,KAAK,EAAEiK,KAFT;AAGE,MAAA,SAAS,EAAEJ;AAHb,OAKG/G,MAAM,CAACoK,cAAP,iBACC,oBAAC,MAAD,CAAQ,cAAR;AACE,MAAA,MAAM,EAAEpK,MADV;AAEE,MAAA,KAAK,EAAEiK,OAAF,oBAAEA,OAAO,CAAGjK,MAAM,CAAC9C,GAAV,CAFhB;AAGE,MAAA,QAAQ,EAAEzB,KAAK,IAAIG,QAAQ,CAACsB,GAAD,EAAMzB,KAAN;AAH7B,MANJ,CADF;AAeD,GA3BA,CALH,CADF;AAoCD;;AAED,iCAAesO,IAAI,CAACC,SAAD,CAAnB;;ACvDA,SAASK,IAAT,CAAqB;AACnBtD,EAAAA,SADmB;AAEnB/G,EAAAA,MAFmB;AAGnB3E,EAAAA,cAHmB;AAInBiP,EAAAA,QAJmB;AAKnBC,EAAAA,aALmB;AAMnBnM,EAAAA,aANmB;AAOnBwG,EAAAA,GAPmB;AAQnB0D,EAAAA,MARmB;AASnBkC,EAAAA,eATmB;AAUnBC,EAAAA,aAVmB;AAWnBC,EAAAA,WAXmB;AAYnBC,EAAAA,UAZmB;AAanBC,EAAAA,mBAbmB;AAcnBvC,EAAAA,gBAdmB;AAenBwC,EAAAA,SAfmB;AAgBnBC,EAAAA,eAhBmB;AAiBnBC,EAAAA,iBAjBmB;AAkBnBC,EAAAA,oBAlBmB;AAmBnBC,EAAAA,kBAnBmB;AAoBnBC,EAAAA,iBApBmB;AAqBnBC,EAAAA,SArBmB;AAsBnBC,EAAAA,YAtBmB;AAuBnBC,EAAAA,iBAvBmB;AAwBnB/Q,EAAAA,SAxBmB;AAyBnB2L,EAAAA,aAzBmB;AA0BnBxJ,EAAAA,IA1BmB;AA2BnBkC,EAAAA,UA3BmB;AA4BnB2M,EAAAA;AA5BmB,CAArB,EA6B6BrS,GA7B7B,EA6B6D;AAC3D,QAAM+D,OAAO,GAAG1D,MAAM,CAAiB,IAAjB,CAAtB;AACA,QAAMqC,QAAQ,GAAG2N,mBAAmB,CAAC7M,IAAD,CAApC;AACA,QAAM8O,KAAK,GAAG,OAAO9O,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,CAAC8O,KAA/C;AACA,QAAMC,KAAK,GAAG,OAAO/O,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,CAAC+O,KAA/C;AACA,QAAMC,OAAO,GAAG,OAAOhP,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,CAACgP,OAAjD;AACA,QAAM1N,MAAM,GAAGiC,MAAM,CAACjC,MAAtB;AACA,QAAM2N,gBAAgB,GAAG1L,MAAM,CAACG,eAAP,IAA0BH,MAAM,CAACG,eAAP,KAA2B,OAA9E;AACA,QAAMwL,WAAW,GAAG/G,GAAG,CAACc,QAAJ,IAAgBd,GAAG,CAACc,QAAJ,CAAahE,MAAb,GAAsB,CAA1D;AAEA,QAAM;AAAEkK,IAAAA;AAAF,MAAgB5L,MAAtB;AACA+G,EAAAA,SAAS,GAAGC,IAAI,CACd,UADc,EAgBd,OAAO4E,SAAP,KAAqB,UAArB,GAAkCA,SAAS,CAAChH,GAAD,CAA3C,GAAmDgH,SAhBrC,EAiBd7E,SAjBc,EAWSpL,QAXT,GAWZ,mBAXY,GAQO2O,QARP,IAQZ,iBARY,EAaMkB,KAbN,GAaZ,gBAbY,GASuBK,kBAAkB,CAAC,IAAD,CATzC,IASZ,uBATY,EAImBH,gBAJnB,IAIZ,6BAJY,IAK6BzF,aAL7B,mDAGOjG,MAAM,CAACjC,MAHd,IAGZ,iBAHY,EAMYiC,MAAM,CAACoB,kBANnB,IAMyCzC,UAAU,GAAG,CANtD,IAMZ,sBANY,EAOStD,cAPT,IAOZ,mBAPY,EAYMkQ,KAZN,IAYZ,gBAZY,EAcQE,OAdR,IAcZ,kBAdY,EAUYzL,MAAM,CAACkH,SAAP,KAAqB,OAVjC,IAUZ,sBAVY,CAAhB;AAmBA,QAAM,CAAC4E,WAAD,EAAcC,cAAd,IAAgCvR,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACwR,SAAD,EAAYC,YAAZ,IAA4BzR,QAAQ,CAAwB,IAAxB,CAA1C;AACA,QAAM,CAAC0R,MAAD,EAASC,SAAT,IAAsB3R,QAAQ,CAAwB,IAAxB,CAApC;AACA,QAAM;AAAE4R,IAAAA;AAAF,MAAaC,SAAS,CAACL,SAAD,EAAYE,MAAZ,EAAoB;AAC9CI,IAAAA,SAAS,EAAE,KADmC;AAE9CC,IAAAA,SAAS,EAAE,CAAC;AAAE5O,MAAAA,IAAI,EAAE,QAAR;AAAkB6O,MAAAA,OAAO,EAAE;AAAE/F,QAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ;AAAV;AAA3B,KAAD;AAFmC,GAApB,CAA5B;;AAKA,WAASoF,kBAAT,CAA4BY,oBAA5B,EAA4D;AACxD,QAAIA,oBAAoB,IAAI9Q,QAA5B,EAAsC;AAClC,aAAO,KAAP;AACH;;AAED,QAAIoC,MAAM,IAAI,CAACwM,aAAf,EAA8B;AAC1B,aAAO,KAAP;AACH;;AAED,QAAIc,iBAAiB,KAAKhD,gBAAgB,CAACC,MAAvC,IAAiD6C,SAArD,EAAgE;AAC5D,aAAO,KAAP;AACH;;AAED,QAAIE,iBAAiB,KAAKhD,gBAAgB,CAACC,MAAvC,IAAiDtI,MAAM,CAACgB,GAAP,MAAegK,oBAAf,oBAAeA,oBAAoB,CAAG,CAAH,CAAnC,CAAjD,IAA6FG,SAAjG,EAA4G;AACxG,aAAO,KAAP;AACH;;AAED,WAAOZ,aAAP;AACH;;AAED,WAASmC,iBAAT,CAA2BC,UAA3B,EAAiD;AAC/C,QAAI,CAACnC,eAAL,EAAsB;AAClBG,MAAAA,UAAU,CAAC;AAAE3J,QAAAA,GAAG,EAAEhB,MAAM,CAACgB,GAAd;AAAmBsH,QAAAA;AAAnB,OAAD,EAA8BqE,UAA9B,CAAV;AACH;;AAED,QAAInC,eAAe,IAAImC,UAAvB,EAAmC;AAC/BhC,MAAAA,UAAU,CAAC;AAAE3J,QAAAA,GAAG,EAAEhB,MAAM,CAACgB,GAAd;AAAmBsH,QAAAA;AAAnB,OAAD,EAA8BqE,UAA9B,CAAV;AACH;AACF;;AAED,WAASC,eAAT,CAAyBvP,KAAzB,EAAkE;AAC9DA,IAAAA,KAAK,CAACwJ,cAAN;AACA,QAAIxJ,KAAK,CAAC+I,OAAN,KAAkB,CAAtB,EAAyB;AACzB,QAAIzK,QAAQ,IAAIoC,MAAZ,IAAsB2N,gBAA1B,EAA4C;AAC5CgB,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACA9B,IAAAA,mBAAmB,CAACvN,KAAD,CAAnB;AACH;;AAED,WAASwP,gBAAT,CAA0BxP,KAA1B,EAAmE;AAC/D,QAAIA,KAAK,CAAC+I,OAAN,KAAkB,CAAtB,EAAyB;AACvB0E,MAAAA,eAAe,CAAC9K,MAAM,CAACgB,GAAR,CAAf;AACD;;AAED,QAAIwK,KAAK,IAAIC,OAAb,EAAsB;AAClBM,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH;AACJ;;AAED,WAASe,gBAAT,GAA4B;AACxB,QAAItB,KAAK,IAAIC,OAAb,EAAsB;AAClBM,MAAAA,cAAc,CAAC,KAAD,CAAd;AACH;AACJ;;AAED,WAASgB,iBAAT,GAA6B;AACzB,QAAI,CAACpR,QAAD,IAAa,CAACoC,MAAd,IAAwB,CAAC2N,gBAA7B,EAA+C;AAC3CgB,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACH;AACJ;;AAED,WAASM,eAAT,CAAyBC,MAAzB,EAAoC;AAClCvC,IAAAA,WAAW,CAACpC,MAAD,EAAS2E,MAAT,CAAX;AACD;;AAED,WAAS5O,oBAAT,CAA8BlC,OAA9B,EAAgD+Q,YAAhD,EAAuE;AACrErC,IAAAA,SAAS,CAAC;AAAEvC,MAAAA,MAAF;AAAUnM,MAAAA,OAAV;AAAmB+Q,MAAAA;AAAnB,KAAD,CAAT;AACD;;AAED,WAASC,uBAAT,GAA4C;AACxC,QAAIhC,SAAJ,EAAe;AACX,UAAI9C,gBAAgB,CAACC,MAAjB,KAA4BA,MAA5B,IAAsCiC,aAAtC,IAAuDlC,gBAAgB,CAACC,MAAjB,KAA4B8C,YAAvF,EAAqG;AACjG,eAAO,IAAP;AACH;;AAED,UAAI/C,gBAAgB,CAACC,MAAjB,KAA4B8C,YAA5B,IAA4Cb,aAA5C,IAA6DQ,iBAAiB,KAAKzC,MAAnF,IAA6F,CAACuD,kBAAkB,EAApH,EAAwH;AACpH,eAAO,IAAP;AACH;AACJ;;AAED,QAAIvB,QAAQ,IAAIW,kBAAhB,EAAoC;AAChC,aAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAED,WAASmC,0BAAT,GAA+C;AAC3C,QAAIjC,SAAS,IAAI7C,MAAM,KAAK8C,YAAxB,IAAwC,CAACS,kBAAkB,EAA3D,IAAiEtB,aAArE,EAAoF;AAChF,aAAO,IAAP;AACH;;AAED,QAAID,QAAQ,IAAIY,iBAAhB,EAAmC;AAC/B,aAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAED,WAASmC,yBAAT,GAA8C;AAC1C,QACIlC,SAAS,IACTH,oBADA,IAEAA,oBAAoB,CAACA,oBAAoB,CAACtJ,MAArB,GAA8B,CAA/B,CAApB,KAA0D1B,MAAM,CAACgB,GAFjE,IAGAuJ,aAHA,IAIA,CAACsB,kBAAkB,EALvB,EAME;AACE,aAAO,IAAP;AACH;;AAED,QAAIvB,QAAJ,EAAc;AACV,aAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAED,WAASgD,wBAAT,GAA6C;AACzC,QAAInC,SAAS,IAAIH,oBAAb,IAAqCA,oBAAoB,CAAC,CAAD,CAApB,KAA4BhL,MAAM,CAACgB,GAAxE,IAA+EuJ,aAA/E,IAAgG,CAACsB,kBAAkB,EAAvH,EAA2H;AACvH,aAAO,IAAP;AACH;;AAED,QAAIvB,QAAJ,EAAc;AACV,aAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAED,WAASiD,mBAAT,GAA+B;AAC3B,QAAIvN,MAAM,CAAC9C,GAAP,KAAe,MAAnB,EAA2B;AAC3B,QAAI,CAACoO,SAAL,EAAgB;AAChB,QAAI,CAACK,WAAL,EAAkB;AAElBL,IAAAA,SAAS,CAAC1G,GAAD,EAAM,cAAN,CAAT;AACH;;AAED,sBACE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,qBAAe5E,MAAM,CAACgB,GAAP,GAAa,CAF9B;AAGE,qBAAe3F,cAHjB;AAIE,IAAA,GAAG,EAAExC,eAAe,CAACmE,OAAD,EAAU/D,GAAV,CAJtB;AAKE,IAAA,SAAS,EAAE8N,SALb;AAME,IAAA,KAAK,EAAE/G,MAAM,CAACG,eAAP,KAA2B,OAA3B,GAAqC;AAAEpF,MAAAA,KAAK,EAAEiF,MAAM,CAACjF,KAAhB;AAAuByE,MAAAA,IAAI,EAAElF,SAAS,GAAG0F,MAAM,CAACjF;AAAhD,KAArC,GAA+F;AACpGA,MAAAA,KAAK,EAAEiF,MAAM,CAACjF,KADsF;AAEpGyE,MAAAA,IAAI,EAAEQ,MAAM,CAACR;AAFuF,KANxG;AAUE,IAAA,WAAW,EAAEoN,eAVf;AAWE,IAAA,YAAY,EAAEC,gBAXhB;AAYE,IAAA,YAAY,EAAEC,gBAZhB;AAaE,IAAA,aAAa,EAAExP,SAAS,CAACyP,iBAAD,EAAoBtC,aAApB,CAb1B;AAcE,IAAA,OAAO,EAAE8C;AAdX,KAgBG,CAACvN,MAAM,CAACE,QAAR,iBACC,uDACE;AAAK,IAAA,SAAS,EAAE8G,IAAI,CAClB,0BADkB,EAGuBmG,uBAAuB,EAH9C,IAGhB,qCAHgB,EAI0BC,0BAA0B,EAJpD,IAIhB,wCAJgB,EAKyBC,yBAAyB,EALlD,IAKhB,uCALgB,EAMwBC,wBAAwB,EANhD,IAMhB,sCANgB,CAApB;AAOI,IAAA,GAAG,EAAErB;AAPT,IADF,eASE,oBAAC,MAAD,CAAQ,SAAR;AACE,IAAA,MAAM,EAAE3D,MADV;AAEE,IAAA,IAAI,EAAE7L,IAFR;AAGE,IAAA,GAAG,EAAEmI,GAHP;AAIE,IAAA,cAAc,EAAEvJ,cAJlB;AAKE,IAAA,aAAa,EAAE+C,aALjB;AAME,IAAA,oBAAoB,EAAEC,oBANxB;AAOE,IAAA,WAAW,EAAE2O;AAPf,IATF,EAkBGxC,eAAe,IAAI,CAAC7O,QAApB,IAAgC,CAAC+P,gBAAjC,IAAqD,CAAC3N,MAAtD,iBACC;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA,OAA0CyM;AAA1C,IAnBJ,CAjBJ,EAwCG,CAACgB,KAAK,IAAIC,OAAV,KAAsBK,WAAtB,iBAAqC0B,YAAY,eAC9C;AAAK,IAAA,GAAG,EAAErB,SAAV;AAAqB,IAAA,SAAS,EAAEV,OAAO,GAAG,aAAH,GAAmB,WAA1D;AAAuE,IAAA,KAAK,EAAEW,MAAM,CAACF;AAArF,KAA8FV,KAAK,IAAIC,OAAvG,CAD8C,EAE9CgC,QAAQ,CAACC,IAFqC,CAxCpD,CADF;AA+CD;;AAED,4BAAe3D,IAAI,eAAC4D,UAAU,CAACtD,IAAD,CAAX,CAAnB;;AC/Pe,SAASuD,eAAT,CAAgC;AAC7ChJ,EAAAA,GAD6C;AAE7C5E,EAAAA,MAF6C;AAG7C0K,EAAAA,WAH6C;AAI7C,KAAGnO;AAJ0C,CAAhC,EAKQ;AAAA;;AACrB,QAAMsR,cAAc,GAAG1U,eAAe,CAAC,MAAMuR,WAAW,CAAC9F,GAAD,EAAM,IAAN,CAAlB,CAAtC;AACA,MAAI5E,MAAM,CAACuI,MAAP,KAAkB9O,SAAtB,EAAiC,OAAO,IAAP;AAEjC,QAAM8O,MAAM,gBACV;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAsC,IAAA,cAAc,EAAEsF;AAAtD,kBACE,oBAAC,MAAD,CAAQ,MAAR;AACE,IAAA,GAAG,EAAEjJ,GADP;AAEE,IAAA,MAAM,EAAE5E,MAFV;AAGE,IAAA,WAAW,EAAE0K,WAHf;AAAA,OAIMnO;AAJN,IADF,CADF;;AAWA,+BAAIyD,MAAM,CAAC8N,aAAX,aAAI,sBAAsBN,YAA1B,EAAwC;AACtC,wBAAOA,YAAY,CAACjF,MAAD,EAAShM,KAAK,CAACwR,kBAAf,CAAnB;AACD;;AAED,SAAOxF,MAAP;AACD;;ACfc,SAASyF,QAAT,CAAyB;AACtCjH,EAAAA,SADsC;AAEtC/G,EAAAA,MAFsC;AAGtC4E,EAAAA,GAHsC;AAItC0D,EAAAA,MAJsC;AAKtC2F,EAAAA,WALsC;AAMtC,KAAG1R;AANmC,CAAzB,EAOU;AACvB,QAAM,CAAC2R,UAAD,EAAaC,aAAb,IAA8B3T,QAAQ,CAAuC,IAAvC,CAA5C;AAEA,QAAMwC,OAAO,GAAGjE,WAAW,CAACqV,IAAI,IAAI;AAClC,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACjB,YAAM;AAAE5O,QAAAA,IAAF;AAAQ6O,QAAAA;AAAR,UAAgBD,IAAI,CAAC5H,qBAAL,EAAtB;AACA2H,MAAAA,aAAa,CAAC;AAAE3O,QAAAA,IAAF;AAAQ6O,QAAAA;AAAR,OAAD,CAAb;AACD;AACF,GAL0B,EAKxB,EALwB,CAA3B;AAOA,QAAM;AAAEzC,IAAAA;AAAF,MAAgB5L,MAAtB;AACA+G,EAAAA,SAAS,GAAGC,IAAI,gDAQd,OAAO4E,SAAP,KAAqB,UAArB,GAAkCA,SAAS,CAAChH,GAAD,CAA3C,GAAmDgH,SARrC,EASd7E,SATc,EAGO/G,MAAM,CAACjC,MAHd,IAGZ,iBAHY,EAIYiC,MAAM,CAACoB,kBAJnB,IAIZ,sBAJY,CAAhB;;AAYA,WAASkN,cAAT,GAA0B;AAAA;;AACxB,QAAIJ,UAAU,KAAK,IAAnB,EAAyB;AACzB,UAAM;AAAEpL,MAAAA,SAAS,EAAEyL,MAAb;AAAqB5P,MAAAA,UAAU,EAAE6P;AAAjC,iCAA6Cf,QAAQ,CAACgB,gBAAtD,oCAA0EhB,QAAQ,CAACiB,eAAzF;AACA,UAAM;AAAElP,MAAAA,IAAF;AAAQ6O,MAAAA;AAAR,QAAgBH,UAAtB;AACA,UAAMS,QAAQ,GAAGnP,IAAI,GAAGgP,OAAxB;AACA,UAAMI,OAAO,GAAGP,GAAG,GAAGE,MAAtB;AAEA,wBACE,oBAAC,eAAD,OACMN,WADN;AAEE,MAAA,MAAM,EAAE3F,MAFV;AAGE,MAAA,MAAM,EAAEtI,MAHV;AAIE,MAAA,IAAI,EAAE2O,QAJR;AAKE,MAAA,GAAG,EAAEC;AALP,MADF;AASD;;AAED,sBACE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,qBAAe5O,MAAM,CAACgB,GAAP,GAAa,CAF9B;AAGE,yBAHF;AAIE,IAAA,GAAG,EAAEhE,OAJP;AAKE,IAAA,SAAS,EAAE+J,SALb;AAME,IAAA,KAAK,EAAE;AACLhM,MAAAA,KAAK,EAAEiF,MAAM,CAACjF,KADT;AAELyE,MAAAA,IAAI,EAAEQ,MAAM,CAACR;AAFR,KANT;AAAA,OAUMjD;AAVN,KAYG+R,cAAc,EAZjB,CADF;AAgBD;;ACxED,SAASO,GAAT,CAA8B;AAC5BC,EAAAA,YAAY,EAAEC,YAAY,GAAG1E,MADD;AAE5BtD,EAAAA,SAF4B;AAG5BxC,EAAAA,EAH4B;AAI5B+D,EAAAA,MAJ4B;AAK5BlK,EAAAA,aAL4B;AAM5B4Q,EAAAA,aAN4B;AAO5BC,EAAAA,qBAP4B;AAQ5BrK,EAAAA,GAR4B;AAS5B7C,EAAAA,eAT4B;AAU5BmN,EAAAA,iBAV4B;AAW5B7G,EAAAA,gBAX4B;AAY5B8C,EAAAA,SAZ4B;AAa5BgE,EAAAA,cAb4B;AAc5BC,EAAAA,UAd4B;AAe5BC,EAAAA,QAf4B;AAgB5BhE,EAAAA,iBAhB4B;AAiB5BiE,EAAAA,oBAjB4B;AAkB5BC,EAAAA,uBAlB4B;AAmB5BtE,EAAAA,kBAnB4B;AAoB5BC,EAAAA,iBApB4B;AAqB5BmD,EAAAA,GArB4B;AAsB5B3D,EAAAA,WAtB4B;AAuB5BC,EAAAA,UAvB4B;AAwB5BE,EAAAA,SAxB4B;AAyB5BD,EAAAA,mBAzB4B;AA0B5BQ,EAAAA,YA1B4B;AA2B5BZ,EAAAA,eA3B4B;AA4B5BO,EAAAA,iBA5B4B;AA6B5BC,EAAAA,oBA7B4B;AA8B5B1Q,EAAAA,SA9B4B;AA+B5BqE,EAAAA,UA/B4B;AAgC5BsH,EAAAA,aAhC4B;AAiC5BqF,EAAAA,SAjC4B;AAkC5B,mBAAiBkE,YAlCW;AAmC5B,mBAAiBC,YAnCW;AAoC5B,KAAGlT;AApCyB,CAA9B,EAqC4BtD,GArC5B,EAqC4D;AAC1D,WAAS6R,eAAT,CAAyB9I,MAAzB,EAAyC;AACrC,QAAImJ,SAAS,IAAI,OAAOE,iBAAP,KAA6B,QAA9C,EAAwD;AACpD,UAAIA,iBAAiB,KAAKhD,gBAAgB,CAACC,MAA3C,EAAmD;AAC/C,YAAItG,MAAM,KAAKqG,gBAAgB,CAACrH,GAAhC,EAAqC;AACjCsO,UAAAA,oBAAoB,QAApB,YAAAA,oBAAoB,CAAGhH,MAAH,CAApB;AACH,SAFD,MAEO;AACHgH,UAAAA,oBAAoB,QAApB,YAAAA,oBAAoB,CAAGjE,iBAAH,CAApB;AACH;AACJ,OAND,MAMO;AACHiE,QAAAA,oBAAoB,QAApB,YAAAA,oBAAoB,CAAGjE,iBAAH,CAApB;AACH;AACJ,KAVD,MAUO;AACHiE,MAAAA,oBAAoB,QAApB,YAAAA,oBAAoB,CAAGhH,MAAH,CAApB;AACH;;AACH,QAAI6C,SAAJ,EAAe;AACXoE,MAAAA,uBAAuB,QAAvB,YAAAA,uBAAuB,CAAGvN,MAAH,CAAvB;AACH,KAFD,MAEO;AACHuN,MAAAA,uBAAuB,QAAvB,YAAAA,uBAAuB,CAAGlH,gBAAgB,CAACrH,GAApB,CAAvB;AACH;AACF;;AAED,WAAS0O,aAAT,GAAyB;AACrB,QAAI1E,oBAAoB,IAAIA,oBAAoB,CAACtJ,MAArB,GAA8B,CAAtD,IAA2D,CAACyJ,SAAhE,EAA2E;AACvE,aAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAEDpE,EAAAA,SAAS,GAAGC,IAAI,oBAEHsB,MAAM,GAAG,CAAT,KAAe,CAAf,GAAmB,MAAnB,GAA4B,KAAM,EAF/B,EAMd+G,QANc,oBAMdA,QAAQ,CAAGzK,GAAH,CANM,EAOdmC,SAPc,EAGQ3I,aAHR,IAGZ,kBAHY,EAIc,CAAA8Q,iBAAiB,QAAjB,YAAAA,iBAAiB,CAAElO,GAAnB,MAA2B,CAAC,CAJ1C,IAIZ,wBAJY,CAAhB;AAUA,sBACE;AACE,IAAA,IAAI,EAAC,KADP;AAEE,qBAAewO,YAFjB;AAGE,qBAAeC,YAHjB;AAIE,IAAA,GAAG,EAAExW,GAJP;AAKE,IAAA,SAAS,EAAE8N,SALb;AAME,IAAA,KAAK,EAAE;AAAEsH,MAAAA;AAAF,KANT;AAAA,OAOM9R;AAPN,KASGwF,eAAe,CAACnC,GAAhB,CAAoBI,MAAM,IAAI;AAC7B,UAAM3E,cAAc,GAAG,CAAA6T,iBAAiB,QAAjB,YAAAA,iBAAiB,CAAElO,GAAnB,MAA2BhB,MAAM,CAACgB,GAAzD;AACA,UAAM2O,YAAY,GAAGrH,MAAM,KAAK8C,YAAX,IAA2BpL,MAAM,CAACgB,GAAP,KAAeqH,gBAAgB,CAACrH,GAAhF;AACA,UAAMvE,IAAI,GAAGmI,GAAG,CAAC5E,MAAM,CAAC9C,GAAR,CAAhB;AACA,UAAM0S,eAAe,GAAG,CAACtG,mBAAmB,CAAC7M,IAAD,CAA5C;;AAEA,QAAI,CAAAyS,iBAAiB,QAAjB,YAAAA,iBAAiB,CAAEW,IAAnB,MAA4B,MAA5B,IAAsCxU,cAAtC,IAAwDuU,eAA5D,EAA6E;AAC3E,0BACE,oBAAC,QAAD;AACE,QAAA,GAAG,EAAE5P,MAAM,CAAC9C,GADd;AAEE,QAAA,MAAM,EAAEoL,MAFV;AAGE,QAAA,MAAM,EAAEtI,MAHV;AAIE,QAAA,GAAG,EAAE4E,GAJP;AAKE,QAAA,SAAS,EAAEsK,iBAAiB,CAACY,SAL/B;AAME,QAAA,WAAW,EAAEZ,iBAAiB,CAACjB;AANjC,QADF;AAUD;;AAED,wBACE,oBAAC,YAAD;AACE,MAAA,GAAG,EAAEjO,MAAM,CAAC9C,GADd;AAEE,MAAA,MAAM,EAAEoL,MAFV;AAGE,MAAA,MAAM,EAAEtI,MAHV;AAIE,MAAA,GAAG,EAAE4E,GAJP;AAKE,MAAA,IAAI,EAAEnI,IALR;AAME,MAAA,QAAQ,EAAEuS,aAAa,KAAKhP,MAAM,CAACgB,GANrC;AAOE,MAAA,kBAAkB,EAAEiK,kBAPtB;AAQE,MAAA,iBAAiB,EAAEC,iBARrB;AASE,MAAA,aAAa,EAAE+D,qBAAqB,CAAC3G,MAAD,EAAStI,MAAM,CAACgB,GAAhB,CAArB,KAA8ChB,MAAM,CAACgB,GATtE;AAUE,MAAA,cAAc,EAAE3F,cAVlB;AAWE,MAAA,aAAa,EAAE+C,aAXjB;AAYE,MAAA,eAAe,EAAEuR,YAAY,IAAI,CAACD,aAAa,EAA9B,GAAmClF,eAAnC,GAAqD/Q,SAZxE;AAaE,MAAA,OAAO,EAAE4B,cAAc,GAAI6T,iBAAD,CAAyCa,OAA5C,GAAsDtW,SAb/E;AAcE,MAAA,SAAS,EAAE4B,cAAc,GAAG6T,iBAAiB,CAAEY,SAAtB,GAAkCrW,SAd7D;AAeE,MAAA,UAAU,EAAE2V,UAfd;AAgBE,MAAA,WAAW,EAAE1E,WAhBf;AAiBE,MAAA,UAAU,EAAEC,UAjBd;AAkBE,MAAA,SAAS,EAAEE,SAlBb;AAmBE,MAAA,mBAAmB,EAAED,mBAnBvB;AAoBE,MAAA,eAAe,EAAEE,eApBnB;AAqBE,MAAA,gBAAgB,EAAEzC,gBArBpB;AAsBE,MAAA,iBAAiB,EAAE0C,iBAtBrB;AAuBE,MAAA,oBAAoB,EAAEC,oBAvBxB;AAwBE,MAAA,SAAS,EAAEG,SAxBb;AAyBE,MAAA,YAAY,EAAEC,YAzBhB;AA0BE,MAAA,iBAAiB,EAAEC,iBA1BrB;AA2BE,MAAA,SAAS,EAAE/Q,SA3Bb;AA4BE,MAAA,UAAU,EAAEqE,UA5Bd;AA6BE,MAAA,aAAa,EAAEsH,aA7BjB;AA8BE,MAAA,SAAS,EAAEqF;AA9Bb,MADF;AAkCD,GArDA,CATH,CADF;AAkED;;AAED,2BAAevB,IAAI,eAAC4D,UAAU,CAACkB,GAAD,CAAX,CAAnB;;AClIA,SAASmB,SAAT,CAA0B;AACxBzL,EAAAA,EADwB;AAExB+D,EAAAA,MAFwB;AAGxBzL,EAAAA,QAHwB;AAIxB6G,EAAAA,SAJwB;AAKxB5G,EAAAA,UALwB;AAMxBzB,EAAAA,cANwB;AAOxB+C,EAAAA,aAPwB;AAQxB4B,EAAAA,MARwB;AASxBiQ,EAAAA,gBATwB;AAUxBpF,EAAAA,SAVwB;AAWxB9N,EAAAA,WAAW,EAAEmT;AAXW,CAA1B,EAY0B;AACxB,WAASnT,WAAT,GAAuB;AACrBmT,IAAAA,kBAAkB,CAAC3L,EAAD,CAAlB;AACD;;AAED,WAASlG,oBAAT,CAA8BlC,OAA9B,EAAgD;AAC9C0O,IAAAA,SAAS,CAAC;AAAEvC,MAAAA,MAAF;AAAUnM,MAAAA,OAAV;AAAmB+Q,MAAAA,YAAY,EAAE;AAAjC,KAAD,CAAT;AACD;;AAGD,QAAMiD,eAAe,GAAGnQ,MAAM,CAACE,QAAP,IAAmB+P,gBAAgB,KAAKjQ,MAAM,CAACgB,GAAvE;AAEA,sBACE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,qBAAehB,MAAM,CAACgB,GAAP,GAAa,CAF9B;AAGE,IAAA,GAAG,EAAEhB,MAAM,CAAC9C,GAHd;AAIE,IAAA,SAAS,EAAE8J,IAAI,CAAC,UAAD,EACMhH,MAAM,CAACjC,MADb,IACb,iBADa,EAEWiC,MAAM,CAACoB,kBAFlB,IAEb,sBAFa,EAGQ/F,cAHR,IAGb,mBAHa,CAJjB;AASE,IAAA,KAAK,EAAE;AACLN,MAAAA,KAAK,EAAEiF,MAAM,CAACjF,KADT;AAELyE,MAAAA,IAAI,EAAEQ,MAAM,CAACR,IAFR;AAGL4Q,MAAAA,MAAM,EAAED,eAAe,GAAG,SAAH,GAAe;AAHjC,KATT;AAcE,IAAA,OAAO,EAAEA,eAAe,GAAGpT,WAAH,GAAiBtD;AAd3C,KAgBGuG,MAAM,CAAC1B,cAAP,KAA0B,CAAC0B,MAAM,CAACE,QAAR,IAAoB+P,gBAAgB,KAAKjQ,MAAM,CAACgB,GAA1E,kBACC,oBAAC,MAAD,CAAQ,cAAR;AACE,IAAA,QAAQ,EAAEnE,QADZ;AAEE,IAAA,SAAS,EAAE6G,SAFb;AAGE,IAAA,MAAM,EAAE1D,MAHV;AAIE,IAAA,UAAU,EAAElD,UAJd;AAKE,IAAA,cAAc,EAAEzB,cALlB;AAME,IAAA,aAAa,EAAE+C,aANjB;AAOE,IAAA,oBAAoB,EAAEC,oBAPxB;AAQE,IAAA,WAAW,EAAEtB;AARf,IAjBJ,CADF;AA+BD;;AAED,iCAAegN,IAAI,CAACiG,SAAD,CAAnB;;ACzDA,SAASK,UAAT,CAA2B;AACzB9L,EAAAA,EADyB;AAEzB1H,EAAAA,QAFyB;AAGzBkF,EAAAA,eAHyB;AAIzB2B,EAAAA,SAJyB;AAKzB4E,EAAAA,MALyB;AAMzB+F,EAAAA,GANyB;AAOzBlK,EAAAA,KAPyB;AAQzBrH,EAAAA,UARyB;AASzBwT,EAAAA,eATyB;AAUzBlS,EAAAA,aAVyB;AAWzBuM,EAAAA,UAXyB;AAYzBE,EAAAA,SAZyB;AAazB9N,EAAAA,WAbyB;AAczB,KAAGR;AAdsB,CAA3B,EAeiC;AAE/B,QAAMyE,GAAG,GAAGe,eAAe,CAAC,CAAD,CAAf,CAAmB7E,GAAnB,KAA2BO,iBAA3B,GAA+C0G,KAAK,GAAG,CAAvD,GAA2DA,KAAvE;;AAEA,WAASoM,WAAT,GAAuB;AACrB5F,IAAAA,UAAU,CAAC;AAAErC,MAAAA,MAAF;AAAUtH,MAAAA,GAAG,EAAE,CAAC;AAAhB,KAAD,CAAV;AACD;;AAED,sBACE;AACE,IAAA,IAAI,EAAC,KADP;AAEE,kBAAYmD,KAFd;AAGE,qBAAerH,UAHjB;AAIE,IAAA,SAAS,EAAEkK,IAAI,kCAGFsB,MAAM,GAAG,CAAT,KAAe,CAAf,GAAmB,MAAnB,GAA4B,KAAM,EAHhC,EAISlK,aAJT,IAIX,kBAJW,EAKekS,eAAe,KAAK,CAAC,CALpC,IAKX,wBALW,CAJjB;AAWE,IAAA,OAAO,EAAEC,WAXX;AAYE,IAAA,KAAK,EAAE;AAAElC,MAAAA;AAAF,KAZT;AAAA,OAaM9R;AAbN,KAeGwF,eAAe,CAACnC,GAAhB,CAAoBI,MAAM,iBACzB,oBAACgQ,WAAD;AACE,IAAA,GAAG,EAAEhQ,MAAM,CAAC9C,GADd;AAEE,IAAA,EAAE,EAAEqH,EAFN;AAGE,IAAA,MAAM,EAAE+D,MAHV;AAIE,IAAA,QAAQ,EAAEzL,QAJZ;AAKE,IAAA,SAAS,EAAE6G,SALb;AAME,IAAA,UAAU,EAAE5G,UANd;AAOE,IAAA,aAAa,EAAEsB,aAPjB;AAQE,IAAA,cAAc,EAAEkS,eAAe,KAAKtQ,MAAM,CAACgB,GAR7C;AASE,IAAA,MAAM,EAAEhB,MATV;AAUE,IAAA,gBAAgB,EAAEgB,GAVpB;AAWE,IAAA,SAAS,EAAE6J,SAXb;AAYE,IAAA,WAAW,EAAE9N;AAZf,IADD,CAfH,CADF;AAkCD;;AAED,sCAAegN,IAAI,CAACsG,UAAD,CAAnB;;ACvEA,SAASG,WAAT,CAA4B;AAC1BxQ,EAAAA,MAD0B;AAE1B4E,EAAAA;AAF0B,CAA5B,EAG4B;AAC1B,QAAM;AAAE6L,IAAAA,gBAAgB,EAAEC,gBAApB;AAAsC3V,IAAAA,KAAtC;AAA6CyE,IAAAA,IAA7C;AAAmDmR,IAAAA;AAAnD,MAAwE3Q,MAA9E;AACA,QAAM+G,SAAS,GAAGC,IAAI,CACpB,UADoB,EAMpB,OAAO2J,gBAAP,KAA4B,UAA5B,GAAyCA,gBAAgB,CAAC/L,GAAD,CAAzD,GAAiE+L,gBAN7C,EAGC3Q,MAAM,CAACjC,MAHR,IAGlB,iBAHkB,EAIMiC,MAAM,CAACoB,kBAJb,IAIlB,sBAJkB,CAAtB;AASA,sBACE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,qBAAepB,MAAM,CAACgB,GAAP,GAAa,CAF9B;AAGE,IAAA,SAAS,EAAE+F,SAHb;AAIE,IAAA,KAAK,EAAE;AAAEhM,MAAAA,KAAF;AAASyE,MAAAA;AAAT;AAJT,KAMGkR,gBAAgB,iBAAI,oBAAC,gBAAD;AAAkB,IAAA,MAAM,EAAE1Q,MAA1B;AAAkC,IAAA,GAAG,EAAE4E;AAAvC,IANvB,CADF;AAUD;;AAED,mCAAemF,IAAI,CAACyG,WAAD,CAAnB;;ACtBA,SAASI,UAAT,CAA2B;AACzBtI,EAAAA,MADyB;AAEzB1D,EAAAA,GAFyB;AAGzB7C,EAAAA,eAHyB;AAIzB8O,EAAAA,MAJyB;AAKzB,mBAAiBrB;AALQ,CAA3B,EAM2B;AACzB,sBACE;AACE,IAAA,IAAI,EAAC,KADP;AAEE,qBAAeA,YAFjB;AAGE,IAAA,SAAS,EAAG,mBAAkBlH,MAAM,GAAG,CAAT,KAAe,CAAf,GAAmB,MAAnB,GAA4B,KAAM,kBAHlE;AAIE,IAAA,KAAK,EAAE;AAAEuI,MAAAA;AAAF;AAJT,KAMG9O,eAAe,CAACnC,GAAhB,CAAoBI,MAAM,iBACzB,oBAACwQ,aAAD;AACE,IAAA,GAAG,EAAExQ,MAAM,CAAC9C,GADd;AAEE,IAAA,MAAM,EAAE8C,MAFV;AAGE,IAAA,GAAG,EAAE4E;AAHP,IADD,CANH,CADF;AAgBD;;AAED,kCAAemF,IAAI,CAAC6G,UAAD,CAAnB;;;ACgCA,MAAMlD,IAAI,2BAAGoD,UAAU,CAACrD,QAAd,qBAAG,qBAAqBC,IAAlC;;AA4GA,SAASqD,QAAT,CAAyB;AAEvB5R,EAAAA,OAAO,EAAEX,UAFc;AAGvB4E,EAAAA,IAAI,EAAET,OAHiB;AAIvBqO,EAAAA,WAJuB;AAKvBtH,EAAAA,YALuB;AAMvBuH,EAAAA,YANuB;AAQvBrO,EAAAA,SAAS,GAAG,EARW;AASvBsO,EAAAA,eAAe,GAAGtO,SATK;AAUvBuO,EAAAA,mBAAmB,GAAG,EAVC;AAYvBC,EAAAA,YAZuB;AAavBzH,EAAAA,oBAbuB;AAcvBnE,EAAAA,UAduB;AAevBC,EAAAA,aAfuB;AAgBvBF,EAAAA,MAhBuB;AAiBvB0E,EAAAA,OAjBuB;AAkBvBC,EAAAA,eAlBuB;AAmBvBtL,EAAAA,oBAnBuB;AAoBvBW,EAAAA,OAAO,EAAEV,UApBc;AAqBvBkE,EAAAA,UArBuB;AAsBvBC,EAAAA,gBAtBuB;AAuBvBqO,EAAAA,wBAvBuB;AAyBvBC,EAAAA,WAAW,EAAEC,WAAW,GAAG1C,KAzBJ;AA0BvB2C,EAAAA,iBAAiB,EAAEC,iBA1BI;AA4BvBrC,EAAAA,UA5BuB;AA6BvBsC,EAAAA,QA7BuB;AA8BvB9H,EAAAA,cA9BuB;AA+BvB+H,EAAAA,oBA/BuB;AAgCvBC,EAAAA,MAhCuB;AAiCvBC,EAAAA,OAjCuB;AAmCvBC,EAAAA,eAAe,GAAG,KAnCK;AAoCvBpJ,EAAAA,kBAAkB,GAAG,MApCE;AAsCvBqF,EAAAA,kBAAkB,GAAGL,IAtCE;AAuCvB3G,EAAAA,SAvCuB;AAwCvBI,EAAAA,KAxCuB;AAyCvBkI,EAAAA,QAzCuB;AA0CvB0C,EAAAA,gBA1CuB;AA2CvBzG,EAAAA,SA3CuB;AA6CvB,gBAAczP,SA7CS;AA8CvB,qBAAmBC,cA9CI;AA+CvB,sBAAoBkW;AA/CG,CAAzB,EAgDyB/Y,GAhDzB,EAgDyD;AAAA;;AAIvD,QAAM,CAAC6J,SAAD,EAAYmP,YAAZ,IAA4BzX,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACmE,UAAD,EAAauT,aAAb,IAA8B1X,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACiE,YAAD,EAAe0T,eAAf,IAAkC3X,QAAQ,CAA8B,MAAM,IAAI4X,GAAJ,EAApC,CAAhD;AACA,QAAM,CAAC/J,gBAAD,EAAmBgK,mBAAnB,IAA0C7X,QAAQ,CAAqC;AAAEwG,IAAAA,GAAG,EAAE,CAAC,CAAR;AAAWsH,IAAAA,MAAM,EAAE,CAAC,CAApB;AAAuBuH,IAAAA,IAAI,EAAE;AAA7B,GAArC,CAAxD;AACA,QAAM,CAACyC,WAAD,EAAcC,cAAd,IAAgC/X,QAAQ,CAA0C,IAA1C,CAA9C;AACA,QAAM,CAACgY,UAAD,EAAaC,WAAb,IAA4BjY,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAAC2Q,SAAD,EAAYuH,UAAZ,IAA0BlY,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAAC6Q,iBAAD,EAAoBsH,gBAApB,IAAwCnY,QAAQ,CAAqBf,SAArB,CAAtD;AACA,QAAM,CAACsR,iBAAD,EAAoB6H,aAApB,IAAqCpY,QAAQ,CAAqBf,SAArB,CAAnD;AACA,QAAM,CAACuR,oBAAD,EAAuB6H,aAAvB,IAAwCrY,QAAQ,CAAuBf,SAAvB,CAAtD;AAKA,QAAMqZ,YAAY,GAAGxZ,MAAM,CAAiB,IAAjB,CAA3B;AACA,QAAMyZ,oBAAoB,GAAGzZ,MAAM,CAAC+O,gBAAD,CAAnC;AACA,QAAM2K,uBAAuB,GAAG1Z,MAAM,CAACyR,iBAAD,CAAtC;AACA,QAAMkI,kBAAkB,GAAG3Z,MAAM,CAAC,CAAC,CAAF,CAAjC;AACA,QAAM4Z,eAAe,GAAG5Z,MAAM,CAAC,KAAD,CAA9B;AACA,QAAM6Z,mBAAmB,GAAG7Z,MAAM,CAAC,CAAC,CAAF,CAAlC;AACA,QAAM8Z,uBAAuB,GAAG9Z,MAAM,CAAC,CAAC,CAAF,CAAtC;AAKA,QAAM+Z,gBAAgB,GAAGlO,aAAa,CAAC0F,SAAD,CAAtC;AACA,QAAM6B,iBAAiB,GAAGvH,aAAa,CAACwF,UAAD,CAAvC;AACA,QAAMuF,kBAAkB,GAAG/K,aAAa,CAACpI,WAAD,CAAxC;AACA,QAAMuW,+BAA+B,GAAGnO,aAAa,CAACoO,wBAAD,CAArD;AAKA,QAAM,CAAClZ,OAAD,EAAUC,SAAV,EAAqBG,UAArB,IAAmCL,iBAAiB,EAA1D;AACA,QAAMoZ,eAAe,GAAG1B,eAAe,GAAG,CAAH,GAAO,CAA9C;AACA,QAAM2B,gBAAgB,0BAAGzC,WAAH,oBAAGA,WAAW,CAAEtP,MAAhB,kCAA0B,CAAhD;AACA,QAAMgS,iBAAiB,GAAGxC,eAAe,IAAIY,eAAe,GAAGX,mBAAH,GAAyB,CAA5C,CAAzC;AACA,QAAMtO,YAAY,GAAGpI,UAAU,GAAGiZ,iBAAb,GAAiCD,gBAAgB,GAAG7Q,SAAzE;AACA,QAAM+Q,YAAY,GAAGvC,YAAY,KAAK3X,SAAjB,IAA8BkQ,oBAAoB,KAAKlQ,SAA5E;AAEA,QAAM;AAAE0F,IAAAA,OAAF;AAAW4C,IAAAA,eAAX;AAA4B1C,IAAAA,gBAA5B;AAA8CD,IAAAA,qBAA9C;AAAqEE,IAAAA,sBAArE;AAA6FC,IAAAA;AAA7F,MAAyGhB,kBAAkB,CAAC;AAChIC,IAAAA,UADgI;AAEhIC,IAAAA,YAFgI;AAGhIE,IAAAA,UAHgI;AAIhID,IAAAA,aAAa,EAAEpE,SAJiH;AAKhIsE,IAAAA,oBALgI;AAMhIC,IAAAA,UAAU,EAAEkE,UAAU,GAAGlE,UAAH,GAAgBpF;AAN0F,GAAD,CAAjI;AASA,QAAM;AAAEuL,IAAAA,mBAAF;AAAuBC,IAAAA,iBAAvB;AAA0C7B,IAAAA,IAA1C;AAAgDF,IAAAA,SAAhD;AAA2DyB,IAAAA;AAA3D,MAA0EjC,eAAe,CAAC;AAC9FC,IAAAA,OAD8F;AAE9FpD,IAAAA,OAF8F;AAG9FwD,IAAAA,UAH8F;AAI9FH,IAAAA,SAJ8F;AAK9FC,IAAAA,YAL8F;AAM9FC,IAAAA,SAN8F;AAO9FE,IAAAA;AAP8F,GAAD,CAA/F;AAUA,QAAM4Q,SAAS,GAAGrU,OAAO,CAACmC,MAAR,GAAiB,CAAjB,IAAsBqB,UAAxC;AACA,QAAM8Q,SAAS,GAAGD,SAAS,GAAG,CAAC,CAAJ,GAAQ,CAAnC;AAGA,QAAME,qBAAqB,GAAGF,SAAS,GAAG,KAAH,GAAWhC,MAAM,KAAKnY,SAA7D;AAKAkB,EAAAA,eAAe,CAAC,MAAM;AACpB,QAAI0N,gBAAgB,KAAK0K,oBAAoB,CAAC7Z,OAA1C,IAAqDmP,gBAAgB,CAACwH,IAAjB,KAA0B,MAA/E,IAAyF,CAACkE,kBAAkB,CAAC1L,gBAAD,CAAhH,EAAoI;AACpI0K,IAAAA,oBAAoB,CAAC7Z,OAArB,GAA+BmP,gBAA/B;AACA2L,IAAAA,YAAY,CAAC3L,gBAAD,CAAZ;;AAEA,QAAI6K,eAAe,CAACha,OAApB,EAA6B;AAC3Bga,MAAAA,eAAe,CAACha,OAAhB,GAA0B,KAA1B;AACA;AACD;;AACD4Z,IAAAA,YAAY,CAAC5Z,OAAb,CAAsBoC,KAAtB,CAA4B;AAAEC,MAAAA,aAAa,EAAE;AAAjB,KAA5B;AACD,GAVc,CAAf;AAYA0Y,EAAAA,mBAAmB,CAAChb,GAAD,EAAM,OAAO;AAC9Bib,IAAAA,cAAc,CAAClT,GAAD,EAAc;AAC1BgT,MAAAA,YAAY,CAAC;AAAEhT,QAAAA;AAAF,OAAD,CAAZ;AACD,KAH6B;;AAI9BmT,IAAAA,WAAW,CAAC7L,MAAD,EAAiB;AAC1B,YAAM;AAAEpP,QAAAA;AAAF,UAAcmB,OAApB;AACA,UAAI,CAACnB,OAAL,EAAc;AACdA,MAAAA,OAAO,CAACkb,QAAR,CAAiB;AACf/F,QAAAA,GAAG,EAAE/F,MAAM,GAAG1F,SADC;AAEfyR,QAAAA,QAAQ,EAAE;AAFK,OAAjB;AAID,KAX6B;;AAY9B1J,IAAAA;AAZ8B,GAAP,CAAN,CAAnB;AAkBA,QAAM2J,kBAAkB,GAAGvb,WAAW,CAAC,CAACiH,MAAD,EAAkCjF,KAAlC,KAAoD;AACzF,UAAMwZ,eAAe,GAAG,IAAInC,GAAJ,CAAQ3T,YAAR,CAAxB;AACA8V,IAAAA,eAAe,CAACC,GAAhB,CAAoBxU,MAAM,CAAC9C,GAA3B,EAAgCnC,KAAhC;AACAoX,IAAAA,eAAe,CAACoC,eAAD,CAAf;AAEA3K,IAAAA,cAAc,QAAd,YAAAA,cAAc,CAAG5J,MAAM,CAACgB,GAAV,EAAejG,KAAf,CAAd;AACD,GANqC,EAMnC,CAAC0D,YAAD,EAAemL,cAAf,CANmC,CAAtC;AAQA,QAAM0F,oBAAoB,GAAGvW,WAAW,CAAEuP,MAAD,IAAqB;AAC5DsK,IAAAA,aAAa,CAACtK,MAAD,CAAb;AACA0K,IAAAA,uBAAuB,CAAC9Z,OAAxB,GAAkCoP,MAAlC;AACD,GAHuC,EAGrC,EAHqC,CAAxC;AAKA,QAAMiH,uBAAuB,GAAGxW,WAAW,CAAEiJ,MAAD,IAAqB;AAC/D,UAAMyS,kBAAkB,GAAGtB,mBAAmB,CAACja,OAA/C;AAEA,QAAI8R,oBAAoB,IAAI,CAACA,oBAAoB,CAAC0J,IAArB,CAA0BnN,CAAC,IAAIA,CAAC,KAAKvF,MAArC,CAA7B,EAA2E;;AAE3E,QAAI,CAACA,MAAD,IAAWyS,kBAAf,EAAmC;AAC/B5B,MAAAA,aAAa,CAAC,CAAC4B,kBAAD,CAAD,CAAb;AACArB,MAAAA,uBAAuB,CAACla,OAAxB,GAAkCub,kBAAlC;AACH;;AAED,QAAIzS,MAAJ,EAAY;AACR,YAAM2S,WAAW,GAAG,EAApB;;AACA,WAAK,IAAIpN,CAAC,GAAGkN,kBAAb,EAAiClN,CAAC,IAAIvF,MAAtC,EAA8CuF,CAAC,EAA/C,EAAmD;AAC/CoN,QAAAA,WAAW,CAACzT,IAAZ,CAAiBqG,CAAjB;AACH;;AACD6L,MAAAA,uBAAuB,CAACla,OAAxB,GAAkC8I,MAAlC;AACA6Q,MAAAA,aAAa,CAAC8B,WAAD,CAAb;AACH;AACF,GAlB0C,EAkBxC,EAlBwC,CAA3C;;AAuBA,WAAS9J,SAAT,CAAmB;AAAEvC,IAAAA,MAAF;AAAUnM,IAAAA,OAAV;AAAmB+Q,IAAAA;AAAnB,GAAnB,EAAsE;AACpE,QAAI,CAACvD,oBAAL,EAA2B;AAE3BJ,IAAAA,sBAAsB,CAACG,YAAD,CAAtB;AACA,UAAMI,eAAe,GAAG,IAAI/F,GAAJ,CAAQqN,YAAR,CAAxB;AACA,UAAMxM,GAAG,GAAGxB,IAAI,CAACkF,MAAD,CAAhB;;AACA,QAAI3D,UAAU,CAACC,GAAD,CAAd,EAAqB;AACnB,WAAK,MAAMgQ,QAAX,IAAuBhQ,GAAG,CAAClB,SAA3B,EAAsC;AACpC,cAAMmR,MAAM,GAAGnL,YAAY,CAACkL,QAAD,CAA3B;;AACA,YAAIzY,OAAJ,EAAa;AACX2N,UAAAA,eAAe,CAACpF,GAAhB,CAAoBmQ,MAApB;AACD,SAFD,MAEO;AACL/K,UAAAA,eAAe,CAACgL,MAAhB,CAAuBD,MAAvB;AACD;AACF;;AACDlL,MAAAA,oBAAoB,CAACG,eAAD,CAApB;AACA;AACD;;AAED,UAAM+K,MAAM,GAAGnL,YAAY,CAAC9E,GAAD,CAA3B;;AACA,QAAIzI,OAAJ,EAAa;AACX2N,MAAAA,eAAe,CAACpF,GAAhB,CAAoBmQ,MAApB;AACA,YAAME,cAAc,GAAG9B,kBAAkB,CAAC/Z,OAA1C;AACA+Z,MAAAA,kBAAkB,CAAC/Z,OAAnB,GAA6BoP,MAA7B;;AACA,UAAI4E,YAAY,IAAI6H,cAAc,KAAK,CAAC,CAApC,IAAyCA,cAAc,KAAKzM,MAAhE,EAAwE;AACtE,cAAM0M,IAAI,GAAGpU,IAAI,CAACqU,IAAL,CAAU3M,MAAM,GAAGyM,cAAnB,CAAb;;AACA,aAAK,IAAIxN,CAAC,GAAGwN,cAAc,GAAGC,IAA9B,EAAoCzN,CAAC,KAAKe,MAA1C,EAAkDf,CAAC,IAAIyN,IAAvD,EAA6D;AAC3D,gBAAMpQ,GAAG,GAAGxB,IAAI,CAACmE,CAAD,CAAhB;AACA,cAAI5C,UAAU,CAACC,GAAD,CAAd,EAAqB;AACrBkF,UAAAA,eAAe,CAACpF,GAAhB,CAAoBgF,YAAY,CAAC9E,GAAD,CAAhC;AACD;AACF;AACF,KAZD,MAYO;AACLkF,MAAAA,eAAe,CAACgL,MAAhB,CAAuBD,MAAvB;AACA5B,MAAAA,kBAAkB,CAAC/Z,OAAnB,GAA6B,CAAC,CAA9B;AACD;;AAEDyQ,IAAAA,oBAAoB,CAACG,eAAD,CAApB;AACD;;AAED,WAAS/M,WAAT,CAAqBmY,eAArB,EAA+C;AAC7C,QAAI,CAAC7D,wBAAL,EAA+B;AAC/B,UAAM8D,mBAAmB,GAAG,IAAIpR,GAAJ,CAAQf,gBAAR,CAA5B;;AACA,QAAImS,mBAAmB,CAAClT,GAApB,CAAwBiT,eAAxB,CAAJ,EAA8C;AAC5CC,MAAAA,mBAAmB,CAACL,MAApB,CAA2BI,eAA3B;AACD,KAFD,MAEO;AACLC,MAAAA,mBAAmB,CAACzQ,GAApB,CAAwBwQ,eAAxB;AACD;;AACD7D,IAAAA,wBAAwB,CAAC8D,mBAAD,CAAxB;AACD;;AAED,WAASlY,aAAT,CAAuBI,KAAvB,EAAmE;AACjE,UAAM;AAAEH,MAAAA,GAAF;AAAOkY,MAAAA;AAAP,QAAmB/X,KAAzB;AACA,UAAMuH,GAAG,GAAGxB,IAAI,CAACiF,gBAAgB,CAACC,MAAlB,CAAhB;;AAEA,QACEuJ,OAAO,IACJ7J,iBAAiB,CAAC3K,KAAD,CADpB,IAEG0W,kBAAkB,CAAC1L,gBAAD,CAFrB,IAGG,CAAC1D,UAAU,CAACC,GAAD,CAHd,IAIGyD,gBAAgB,CAACrH,GAAjB,KAAyB,CAAC,CAJ7B,IAKGqH,gBAAgB,CAACwH,IAAjB,KAA0B,QAN/B,EAOE;AAGA,YAAMwF,IAAI,GAAG,EAAb;AACA,YAAMC,IAAI,GAAG,EAAb;;AACA,UAAIF,OAAO,KAAKC,IAAhB,EAAsB;AACpBE,QAAAA,UAAU;AACV;AACD;;AACD,UAAIH,OAAO,KAAKE,IAAhB,EAAsB;AACpBE,QAAAA,WAAW;AACX;AACD;AACF;;AAED,QACEzB,kBAAkB,CAAC1L,gBAAD,CAAlB,IACG1D,UAAU,CAACC,GAAD,CADb,IAEGyD,gBAAgB,CAACrH,GAAjB,KAAyB,CAAC,CAF7B,KAKG9D,GAAG,KAAK,WAAR,IAAuB0H,GAAG,CAAC9H,UAA5B,IAEII,GAAG,KAAK,YAAR,IAAwB,CAAC0H,GAAG,CAAC9H,UAPnC,CADF,EASK;AACHO,MAAAA,KAAK,CAACwJ,cAAN;AACA9J,MAAAA,WAAW,CAAC6H,GAAG,CAACL,EAAL,CAAX;AACA;AACD;;AAED,YAAQlH,KAAK,CAACH,GAAd;AACE,WAAK,QAAL;AACEqV,QAAAA,cAAc,CAAC,IAAD,CAAd;AACAkD,QAAAA,WAAW;AACX;;AACF,WAAK,SAAL;AACA,WAAK,WAAL;AACA,WAAK,WAAL;AACA,WAAK,YAAL;AACA,WAAK,KAAL;AACA,WAAK,MAAL;AACA,WAAK,KAAL;AACA,WAAK,QAAL;AACA,WAAK,UAAL;AACEC,QAAAA,QAAQ,CAACrY,KAAD,CAAR;AACA;;AACF;AACEsY,QAAAA,eAAe,CAACtY,KAAD,CAAf;AACA;AAlBJ;AAoBD;;AAED,WAASuY,WAAT,GAAuB;AACrB1C,IAAAA,eAAe,CAACha,OAAhB,GAA0B,IAA1B;AACD;;AAED,WAAS2c,YAAT,CAAsBxY,KAAtB,EAA4D;AAC1D,UAAM;AAAEyF,MAAAA,SAAF;AAAanE,MAAAA;AAAb,QAA4BtB,KAAK,CAACgJ,aAAxC;AACA4L,IAAAA,YAAY,CAACnP,SAAD,CAAZ;AACAoP,IAAAA,aAAa,CAACvT,UAAD,CAAb;AACA+S,IAAAA,QAAQ,QAAR,YAAAA,QAAQ,CAAGrU,KAAH,CAAR;AACD;;AAED,WAASyY,YAAT,CAAsBxN,MAAtB,EAAsC;AACpC,WAAOsL,SAAS,GAAGjR,OAAO,CAAClC,OAAR,CAAgB2C,IAAI,CAACkF,MAAD,CAApB,CAAH,GAAwCA,MAAxD;AACD;;AAED,WAASyN,mBAAT,GAA+B;AAAA;;AAC7B,QACE,0BAAA5W,OAAO,CAACkJ,gBAAgB,CAACrH,GAAlB,CAAP,2CAA+BuH,MAA/B,MAA0C9O,SAA1C,IACG4O,gBAAgB,CAACwH,IAAjB,KAA0B,QAD7B,IAEGmG,OAAO,CAAC3N,gBAAgB,CAACzD,GAAlB,EAAuByD,gBAAgB,CAAC4N,WAAxC,CAHZ,EAGkE;AAChE;AACD;;AAED,UAAMC,WAAW,GAAG,CAAC,GAAGvT,OAAJ,CAApB;AACAuT,IAAAA,WAAW,CAACJ,YAAY,CAACzN,gBAAgB,CAACC,MAAlB,CAAb,CAAX,GAAqDD,gBAAgB,CAACzD,GAAtE;AACAqM,IAAAA,YAAY,QAAZ,YAAAA,YAAY,CAAG;AAAEkF,MAAAA,OAAO,EAAED,WAAX;AAAwBE,MAAAA,QAAQ,EAAE/N,gBAAgB,CAACzD,GAAnD;AAAwD1H,MAAAA,GAAG,EAAEiC,OAAO,CAACkJ,gBAAgB,CAACrH,GAAlB,CAAP,CAA8B9D;AAA3F,KAAH,CAAZ;AACD;;AAED,WAASqY,UAAT,GAAsB;AACpB,UAAM;AAAEvU,MAAAA,GAAF;AAAOsH,MAAAA;AAAP,QAAkBD,gBAAxB;AACA,UAAMgO,YAAY,GAAG1T,OAAO,CAAC2F,MAAD,CAAP,CAAgBnJ,OAAO,CAAC6B,GAAD,CAAP,CAAa9D,GAA7B,CAArB;;AACA,QAAI,OAAOmZ,YAAP,KAAwB,QAAxB,IAAoC,CAACA,YAAY,CAAC1a,QAAtD,EAAgE;AAC5D,YAAM2a,UAAU,GAAGtD,uBAAuB,CAAC9Z,OAAxB,IAAmCoP,MAAtD;AACA,YAAM/E,aAAa,GAAG+E,MAAM,GAAGgO,UAAT,GAAsBhO,MAAtB,GAA+BgO,UAArD;AACA,YAAMC,WAAW,GAAGjO,MAAM,GAAGgO,UAAT,GAAsBA,UAAU,GAAG,CAAnC,GAAuChO,MAAM,GAAG,CAApE;AACA,YAAMkO,UAAU,GAAGF,UAAU,GAAG3T,OAAO,CAAC8T,KAAR,CAAclT,aAAd,EAA6BgT,WAA7B,CAAH,GAA+C5T,OAAO,CAAC8T,KAAR,CAAcnO,MAAd,EAAsBA,MAAM,GAAG,CAA/B,CAA5E;AACAiK,MAAAA,cAAc,CAAC;AAAEnP,QAAAA,IAAI,EAAEoT,UAAR;AAAoBE,QAAAA,SAAS,EAAEvX,OAAO,CAAC6B,GAAD,CAAP,CAAa9D;AAA5C,OAAD,CAAd;AACH;AACF;;AAED,WAASsY,WAAT,GAAuB;AACrB,UAAM;AAAExU,MAAAA,GAAF;AAAOsH,MAAAA;AAAP,QAAkBD,gBAAxB;AACA,UAAMsO,SAAS,GAAGhU,OAAO,CAACmT,YAAY,CAACxN,MAAD,CAAb,CAAzB;AACA,UAAM+N,YAAY,GAAG1T,OAAO,CAAC2F,MAAD,CAAP,CAAgBnJ,OAAO,CAAC6B,GAAD,CAAP,CAAa9D,GAA7B,CAArB;AACA,UAAM0Z,eAAe,GAAG,CAACtN,mBAAmB,CAAC+M,YAAD,CAA5C;;AACA,QACE,CAACxE,OAAD,IACG,CAACZ,YADJ,IAEGqB,WAAW,KAAK,IAFnB,IAGG,CAACuE,cAAc,CAACxO,gBAAD,CAHlB,IAIG,CAACuO,eALN,EAME;AACA;AACD;;AAED,UAAM;AAAExT,MAAAA,IAAF;AAAQsT,MAAAA;AAAR,QAAsBpE,WAA5B;AACA,QAAIwE,iBAAJ;AACA,UAAMvT,aAAa,GAAG+E,MAAtB;AACA,QAAIiO,WAAW,GAAGjO,MAAlB;;AAEA,QAAIlF,IAAI,CAAC1B,MAAL,GAAc,CAAlB,EAAqB;AACjB,YAAMqV,YAAY,GAAG3T,IAAI,CAAC4T,MAAL,CAAYC,CAAC,IAAI;AAClC,cAAMxa,IAAI,GAAGwa,CAAC,CAACP,SAAD,CAAd;AACA,eAAO,CAACpN,mBAAmB,CAAC7M,IAAD,CAA3B;AACH,OAHoB,CAArB;AAIA,UAAIya,UAAU,GAAG,CAAjB;;AAEA,aAAOA,UAAU,GAAGH,YAAY,CAACrV,MAA1B,IAAoC6U,WAAW,GAAG5T,OAAO,CAACjB,MAAjE,EAAyE;AACrE,cAAMjF,IAAI,GAAGkG,OAAO,CAAC4T,WAAD,CAAP,CAAqBG,SAArB,CAAb;;AACA,YAAI,CAACpN,mBAAmB,CAAC7M,IAAD,CAAxB,EAAgC;AAC5Bya,UAAAA,UAAU,IAAI,CAAd;AACH;;AACDX,QAAAA,WAAW,IAAI,CAAf;AACH;;AAEDO,MAAAA,iBAAiB,GAAGjF,OAAO,CAAC;AAC1BsF,QAAAA,UAAU,EAAEJ,YADc;AAE1BK,QAAAA,eAAe,EAAEV,SAFS;AAG1BF,QAAAA,UAAU,EAAEpT,IAAI,CAAC1B,MAAL,KAAgB,CAAhB,GAAoB,CAACiV,SAAD,CAApB,GAAkChU,OAAO,CAAC8T,KAAR,CAAclT,aAAd,EAA6BgT,WAA7B,CAHpB;AAI1Bc,QAAAA,eAAe,EAAElY,OAAO,CAAC6B,GAAD,CAAP,CAAa9D;AAJJ,OAAD,CAA3B;AAMH,KArBD,MAqBO;AACHqZ,MAAAA,WAAW,IAAI,CAAf;AACAO,MAAAA,iBAAiB,GAAGjF,OAAO,CAAC;AAC1BsF,QAAAA,UAAU,EAAE/T,IADc;AAE1BgU,QAAAA,eAAe,EAAEV,SAFS;AAG1BF,QAAAA,UAAU,EAAE,CAACG,SAAD,CAHc;AAI1BU,QAAAA,eAAe,EAAElY,OAAO,CAAC6B,GAAD,CAAP,CAAa9D;AAJJ,OAAD,CAA3B;AAMH;;AAED,UAAMgZ,WAAW,GAAG,CAAC,GAAGvT,OAAJ,CAApB;;AACA,SAAK,IAAI4E,CAAC,GAAGhE,aAAb,EAA4BgE,CAAC,GAAGgP,WAAhC,EAA6ChP,CAAC,EAA9C,EAAkD;AAChD2O,MAAAA,WAAW,CAAC3O,CAAD,CAAX,GAAiBuP,iBAAiB,CAACvP,CAAC,GAAGhE,aAAL,CAAlC;AACD;;AAED0N,IAAAA,YAAY,CAAC;AAAEkF,MAAAA,OAAO,EAAED,WAAX;AAAwBY,MAAAA,iBAAxB;AAA2C5Z,MAAAA,GAAG,EAAEiC,OAAO,CAAC6B,GAAD,CAAP,CAAa9D,GAA7D;AAAkEoa,MAAAA,IAAI,EAAE;AAAxE,KAAD,CAAZ;AACAhI,IAAAA,oBAAoB,CAACiH,WAAW,GAAG,CAAf,CAApB;AACAhH,IAAAA,uBAAuB,CAACvO,GAAD,CAAvB;AACAuR,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD;;AAED,WAASoD,eAAT,CAAyBtY,KAAzB,EAAqE;AAAA;;AACnE,QAAI,CAAC0W,kBAAkB,CAAC1L,gBAAD,CAAvB,EAA2C;AAC3C,UAAMzD,GAAG,GAAGxB,IAAI,CAACiF,gBAAgB,CAACC,MAAlB,CAAhB;AACA,QAAI3D,UAAU,CAACC,GAAD,CAAd,EAAqB;AACrB,UAAM;AAAE1H,MAAAA;AAAF,QAAUG,KAAhB;AACA,UAAM2C,MAAM,GAAGb,OAAO,CAACkJ,gBAAgB,CAACrH,GAAlB,CAAtB;;AAEA,QAAIqH,gBAAgB,CAACwH,IAAjB,KAA0B,MAA9B,EAAsC;AACpC,UAAI3S,GAAG,KAAK,OAAZ,EAAqB;AAEnB6Y,QAAAA,mBAAmB;AACnBN,QAAAA,WAAW;AACZ;;AACD;AACD;;AAED,6BAAAzV,MAAM,CAAC8N,aAAP,2CAAsByJ,aAAtB,0CAAsBA,aAAtB,CAAsCla,KAAtC;AACA,QAAIA,KAAK,CAACma,kBAAN,EAAJ,EAAgC;;AAEhC,QAAIX,cAAc,CAACxO,gBAAD,CAAd,IAAoCF,kBAAkB,CAAC9K,KAAD,CAA1D,EAAmE;AACjEgV,MAAAA,mBAAmB,CAAC,CAAC;AAAErR,QAAAA,GAAF;AAAOsH,QAAAA;AAAP,OAAD,MAAsB;AACxCtH,QAAAA,GADwC;AAExCsH,QAAAA,MAFwC;AAGxCpL,QAAAA,GAHwC;AAIxC2S,QAAAA,IAAI,EAAE,MAJkC;AAKxCjL,QAAAA,GALwC;AAMxCqR,QAAAA,WAAW,EAAErR;AAN2B,OAAtB,CAAD,CAAnB;AAQD;AACF;;AAED,WAAS6S,aAAT,GAAyB;AACvB,UAAMnB,UAAU,GAAGtD,uBAAuB,CAAC9Z,OAA3C;AACA,UAAMwe,UAAU,GAAGtE,uBAAuB,CAACla,OAA3C;AACA,UAAMye,WAAW,GAAGxE,mBAAmB,CAACja,OAAxC;AACA,QAAIod,UAAU,KAAK7c,SAAf,IAA4Bie,UAAU,GAAG,CAAzC,IAA8C,CAAC9F,MAA/C,IAAyD,CAACX,YAA9D,EAA4E;AAC5E,UAAM;AAAEjQ,MAAAA,GAAF;AAAOsH,MAAAA;AAAP,QAAkBD,gBAAxB;AACA,UAAMuP,SAAS,GAAGjV,OAAO,CAAC2F,MAAD,CAAzB;;AACA,QAAIoP,UAAU,KAAKC,WAAnB,EAAgC;AAC5B,YAAMpU,aAAa,GAAG+E,MAAM,GAAGgO,UAAT,GAAsBhO,MAAtB,GAA+BgO,UAArD;AACA,UAAIC,WAAW,GAAGjO,MAAM,GAAGgO,UAAT,GAAsBA,UAAU,GAAG,CAAnC,GAAuChO,MAAM,GAAG,CAAlE;AACA,YAAMkO,UAAU,GAAG7T,OAAO,CAAC8T,KAAR,CAAclT,aAAd,EAA6BA,aAAa,KAAKgT,WAAlB,GAAgCA,WAAW,GAAG,CAA9C,GAAkDA,WAA/E,CAAnB;AACA,YAAMsB,UAAU,GAAG1Y,OAAO,CAAC6X,MAAR,CAAe,CAACc,CAAD,EAAIvQ,CAAJ,KAAkBA,CAAC,GAAGoQ,WAAJ,IAAmBpQ,CAAC,IAAImQ,UAAzD,CAAnB;AACA,YAAMZ,iBAAiB,GAAGlF,MAAM,CAAC;AAAE8E,QAAAA,SAAS,EAAEvX,OAAO,CAAC6B,GAAD,CAAP,CAAa9D,GAA1B;AAA+B2a,QAAAA,UAA/B;AAA2CD,QAAAA,SAA3C;AAAsDpB,QAAAA,UAAtD;AAAkEuB,QAAAA,MAAM,EAAE;AAA1E,OAAD,CAAhC;AACA,YAAM7B,WAAW,GAAG,CAAC,GAAGvT,OAAJ,CAApB;;AACA,WAAK,IAAI4E,CAAC,GAAGhE,aAAb,EAA4BgE,CAAC,GAAGgP,WAAhC,EAA6ChP,CAAC,EAA9C,EAAkD;AAChD2O,QAAAA,WAAW,CAAC3O,CAAD,CAAX,GAAiBuP,iBAAiB,CAACvP,CAAC,GAAGhE,aAAL,CAAlC;AACD;;AACD0N,MAAAA,YAAY,CAAC;AAAEkF,QAAAA,OAAO,EAAED,WAAX;AAAwBY,QAAAA,iBAAxB;AAA2Ce,QAAAA,UAA3C;AAAuDrB,QAAAA,UAAvD;AAAmEc,QAAAA,IAAI,EAAE;AAAzE,OAAD,CAAZ;AACH,KAXD,MAWO;AACH,YAAM/T,aAAa,GAAG+E,MAAM,GAAGgO,UAAT,GAAsBhO,MAAM,GAAG,CAA/B,GAAmCgO,UAAzD;AACA,YAAMC,WAAW,GAAGjO,MAAM,GAAGgO,UAAT,GAAsBA,UAAU,GAAG,CAAnC,GAAuChO,MAA3D;AACA,YAAMkO,UAAU,GAAG7T,OAAO,CAAC8T,KAAR,CAAclT,aAAd,EAA6BgT,WAA7B,CAAnB;AAEA,YAAMO,iBAAiB,GAAGlF,MAAM,CAAC;AAAE8E,QAAAA,SAAS,EAAEvX,OAAO,CAAC6B,GAAD,CAAP,CAAa9D,GAA1B;AAA+B0a,QAAAA,SAA/B;AAA0CpB,QAAAA,UAA1C;AAAsDuB,QAAAA,MAAM,EAAE;AAA9D,OAAD,CAAhC;AACA,YAAM7B,WAAW,GAAG,CAAC,GAAGvT,OAAJ,CAApB;;AACA,WAAK,IAAI4E,CAAC,GAAGhE,aAAb,EAA4BgE,CAAC,GAAGgP,WAAhC,EAA6ChP,CAAC,EAA9C,EAAkD;AAChD2O,QAAAA,WAAW,CAAC3O,CAAD,CAAX,GAAiBuP,iBAAiB,CAACvP,CAAC,GAAGhE,aAAL,CAAlC;AACD;;AACD0N,MAAAA,YAAY,CAAC;AAAEkF,QAAAA,OAAO,EAAED,WAAX;AAAwBY,QAAAA,iBAAxB;AAA2CN,QAAAA,UAA3C;AAAuDtZ,QAAAA,GAAG,EAAEiC,OAAO,CAAC6B,GAAD,CAAP,CAAa9D,GAAzE;AAA8Eoa,QAAAA,IAAI,EAAE;AAApF,OAAD,CAAZ;AACH;;AACD/E,IAAAA,cAAc,CAAC,IAAD,CAAd;AACD;;AAED,WAAS3F,eAAT,CAAyBvP,KAAzB,EAA8E;AAC5E,QAAIA,KAAK,CAAC+I,OAAN,KAAkB,CAAtB,EAAyB;AACzBqM,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAC,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAC,IAAAA,gBAAgB,CAAC5H,iBAAiB,IAAI1C,gBAAgB,CAACC,MAAvC,CAAhB;AACAtO,IAAAA,MAAM,CAACC,gBAAP,CAAwB,WAAxB,EAAqC+d,WAArC;AACAhe,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCge,SAAnC;;AAEA,aAASD,WAAT,CAAqB3a,KAArB,EAAwC;AAItC,UAAIA,KAAK,CAAC+I,OAAN,KAAkB,CAAtB,EAAyB6R,SAAS;AACnC;;AAED,aAASA,SAAT,GAAqB;AACnBje,MAAAA,MAAM,CAACG,mBAAP,CAA2B,WAA3B,EAAwC6d,WAAxC;AACAhe,MAAAA,MAAM,CAACG,mBAAP,CAA2B,SAA3B,EAAsC8d,SAAtC;AACAxF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAC,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAC,MAAAA,gBAAgB,CAAClZ,SAAD,CAAhB;AACAge,MAAAA,aAAa;AACd;AACF;;AAED,WAAS7M,mBAAT,CAA6BvN,KAA7B,EAAkF;AAChF,QAAIA,KAAK,CAAC+I,OAAN,KAAkB,CAAtB,EAAyB;AACzBqM,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAzY,IAAAA,MAAM,CAACC,gBAAP,CAAwB,WAAxB,EAAqC+d,WAArC;AACAhe,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCge,SAAnC;;AAEA,aAASD,WAAT,CAAqB3a,KAArB,EAAwC;AAItC,UAAIA,KAAK,CAAC+I,OAAN,KAAkB,CAAtB,EAAyB6R,SAAS;AACnC;;AAED,aAASA,SAAT,GAAqB;AACnBje,MAAAA,MAAM,CAACG,mBAAP,CAA2B,WAA3B,EAAwC6d,WAAxC;AACAhe,MAAAA,MAAM,CAACG,mBAAP,CAA2B,SAA3B,EAAsC8d,SAAtC;AACAxF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD;AACF;;AAED,WAAS1F,iBAAT,CAA2B1P,KAA3B,EAAoE;AAClEA,IAAAA,KAAK,CAACD,eAAN;AACA,QAAI,CAACwU,MAAD,IAAW,CAACX,YAAhB,EAA8B;AAE9B,UAAM;AAAEjQ,MAAAA,GAAF;AAAOsH,MAAAA;AAAP,QAAkBD,gBAAxB;AACA,UAAMuP,SAAS,GAAGjV,OAAO,CAAC2F,MAAD,CAAzB;AACA,UAAMkO,UAAU,GAAG7T,OAAO,CAAC8T,KAAR,CAAcnO,MAAM,GAAG,CAAvB,CAAnB;AAEA,UAAMwO,iBAAiB,GAAGlF,MAAM,CAAC;AAAE8E,MAAAA,SAAS,EAAEvX,OAAO,CAAC6B,GAAD,CAAP,CAAa9D,GAA1B;AAA+B0a,MAAAA,SAA/B;AAA0CpB,MAAAA,UAA1C;AAAsDuB,MAAAA,MAAM,EAAE;AAA9D,KAAD,CAAhC;AACA,UAAM7B,WAAW,GAAG,CAAC,GAAGvT,OAAJ,CAApB;;AACA,SAAK,IAAI4E,CAAC,GAAGe,MAAM,GAAG,CAAtB,EAAyBf,CAAC,GAAG2O,WAAW,CAACxU,MAAzC,EAAiD6F,CAAC,EAAlD,EAAsD;AACpD2O,MAAAA,WAAW,CAAC3O,CAAD,CAAX,GAAiBuP,iBAAiB,CAACvP,CAAC,GAAGe,MAAJ,GAAa,CAAd,CAAlC;AACD;;AACD2I,IAAAA,YAAY,CAAC;AAAEkF,MAAAA,OAAO,EAAED;AAAX,KAAD,CAAZ;AACD;;AAED,WAAS3C,wBAAT,CAAkCjL,MAAlC,EAAkD1D,GAAlD,EAAoE;AAClE,UAAMuR,OAAO,GAAG,CAAC,GAAGxT,OAAJ,CAAhB;AACAwT,IAAAA,OAAO,CAAC7N,MAAD,CAAP,GAAkB1D,GAAlB;AACAqM,IAAAA,YAAY,QAAZ,YAAAA,YAAY,CAAG;AAAEkF,MAAAA;AAAF,KAAH,CAAZ;AACD;;AAED,WAAS+B,qBAAT,CAA+BtT,GAA/B,EAAiDuT,aAAjD,EAA0E;AACxE,QAAI9P,gBAAgB,CAACwH,IAAjB,KAA0B,QAA9B,EAAwC;;AACxC,QAAIsI,aAAJ,EAAmB;AACjB,YAAMjC,WAAW,GAAG,CAAC,GAAGvT,OAAJ,CAApB;AACAuT,MAAAA,WAAW,CAACJ,YAAY,CAACzN,gBAAgB,CAACC,MAAlB,CAAb,CAAX,GAAqD1D,GAArD;AACAqM,MAAAA,YAAY,QAAZ,YAAAA,YAAY,CAAG;AAAEkF,QAAAA,OAAO,EAAED;AAAX,OAAH,CAAZ;AACAT,MAAAA,WAAW;AACZ,KALD,MAKO;AACLpD,MAAAA,mBAAmB,CAAC+D,QAAQ,KAAK,EAAE,GAAGA,QAAL;AAAexR,QAAAA;AAAf,OAAL,CAAT,CAAnB;AACD;AACF;;AAED,WAASwT,aAAT,CAAuBD,aAAvB,EAAgD;AAC9C,QAAIA,aAAJ,EAAmB;AACjBpC,MAAAA,mBAAmB;AACpB;;AACDN,IAAAA,WAAW;AACZ;;AAKD,WAAS1B,kBAAT,CAA4B;AAAE/S,IAAAA,GAAF;AAAOsH,IAAAA;AAAP,GAA5B,EAAgE;AAC9D,WAAOA,MAAM,IAAI,CAAV,IAAeA,MAAM,GAAGlF,IAAI,CAAC1B,MAA7B,IAAuCV,GAAG,IAAI6S,SAA9C,IAA2D7S,GAAG,GAAG7B,OAAO,CAACuC,MAAhF;AACD;;AAED,WAASmV,cAAT,CAAwBT,QAAxB,EAAqD;AACnD,WAAOrC,kBAAkB,CAACqC,QAAD,CAAlB,IACFhO,sBAAsB,CAAQ;AAAEjJ,MAAAA,OAAF;AAAWiE,MAAAA,IAAX;AAAiBiF,MAAAA,gBAAgB,EAAE+N,QAAnC;AAA6CzR,MAAAA;AAA7C,KAAR,CAD3B;AAED;;AAED,WAASgG,UAAT,CAAoByL,QAApB,EAAwCiC,YAAY,GAAG,KAAvD,EAAoE;AAClE,QAAI,CAACtE,kBAAkB,CAACqC,QAAD,CAAvB,EAAmC;AACnCL,IAAAA,mBAAmB;AAEnBzG,IAAAA,oBAAoB,CAAC7V,SAAD,CAApB;AACAoZ,IAAAA,aAAa,CAACpZ,SAAD,CAAb;;AAEA,QAAI4e,YAAY,IAAIxB,cAAc,CAACT,QAAD,CAAlC,EAA8C;AAC5C,YAAMxR,GAAG,GAAGxB,IAAI,CAACgT,QAAQ,CAAC9N,MAAV,CAAhB;AACA+J,MAAAA,mBAAmB,CAAC,EAAE,GAAG+D,QAAL;AAAevG,QAAAA,IAAI,EAAE,MAArB;AAA6B3S,QAAAA,GAAG,EAAE,IAAlC;AAAwC0H,QAAAA,GAAxC;AAA6CqR,QAAAA,WAAW,EAAErR;AAA1D,OAAD,CAAnB;AACD,KAHD,MAGO;AACLyN,MAAAA,mBAAmB,CAAC,EAAE,GAAG+D,QAAL;AAAevG,QAAAA,IAAI,EAAE;AAArB,OAAD,CAAnB;AACAsD,MAAAA,mBAAmB,CAACja,OAApB,GAA8Bkd,QAAQ,CAACpV,GAAvC;AACD;;AACD2Q,IAAAA,oBAAoB,QAApB,YAAAA,oBAAoB,CAAG,EAAE,GAAGyE;AAAL,KAAH,CAApB;AACD;;AAED,WAASX,WAAT,GAAuB;AACrB,QAAIpN,gBAAgB,CAACwH,IAAjB,KAA0B,QAA9B,EAAwC;AACxCwC,IAAAA,mBAAmB,CAAC,CAAC;AAAErR,MAAAA,GAAF;AAAOsH,MAAAA;AAAP,KAAD,MAAsB;AAAEtH,MAAAA,GAAF;AAAOsH,MAAAA,MAAP;AAAeuH,MAAAA,IAAI,EAAE;AAArB,KAAtB,CAAD,CAAnB;AACD;;AAED,WAASmE,YAAT,CAAsB;AAAEhT,IAAAA,GAAF;AAAOsH,IAAAA;AAAP,GAAtB,EAAgE;AAC9D,UAAM;AAAEpP,MAAAA;AAAF,QAAcmB,OAApB;AACA,QAAI,CAACnB,OAAL,EAAc;;AAEd,QAAI,OAAO8H,GAAP,KAAe,QAAf,IAA2BA,GAAG,GAAG5B,qBAArC,EAA4D;AAC1D,YAAM;AAAEkZ,QAAAA;AAAF,UAAkBpf,OAAxB;AACA,YAAM;AAAEsG,QAAAA,IAAF;AAAQzE,QAAAA;AAAR,UAAkBoE,OAAO,CAAC6B,GAAD,CAA/B;AACA,YAAMuX,oBAAoB,GAAG/Y,IAAI,GAAGb,UAAU,GAAG5D,KAAb,GAAqBuE,sBAAzD;AACA,YAAMkZ,qBAAqB,GAAGhZ,IAAI,GAAGzE,KAAP,GAAeud,WAAW,GAAG3Z,UAA3D;;AACA,UAAI4Z,oBAAoB,IAAIC,qBAA5B,EAAmD;AACjD,cAAMC,aAAa,GAAGrR,uBAAuB,CAACjI,OAAD,EAAU6B,GAAV,EAAerC,UAAf,EAA2B2Z,WAA3B,CAA7C;AACApf,QAAAA,OAAO,CAACyF,UAAR,GAAqBA,UAAU,GAAG8Z,aAAlC;AACD;AACF;;AAED,QAAI,OAAOnQ,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,UAAIA,MAAM,GAAG1F,SAAT,GAAqBE,SAAzB,EAAoC;AAElC5J,QAAAA,OAAO,CAAC4J,SAAR,GAAoBwF,MAAM,GAAG1F,SAA7B;AACD,OAHD,MAGO,IAAI,CAAC0F,MAAM,GAAG,CAAV,IAAe1F,SAAf,GAA2BE,SAAS,GAAGD,YAA3C,EAAyD;AAE9D3J,QAAAA,OAAO,CAAC4J,SAAR,GAAoB,CAACwF,MAAM,GAAG,CAAV,IAAe1F,SAAf,GAA2BC,YAA/C;AACD;AACF;AACF;;AAED,WAAS6V,eAAT,CAAyBxb,GAAzB,EAAsC+K,OAAtC,EAAwD5L,QAAxD,EAAqF;AACnF,UAAM;AAAE2E,MAAAA,GAAF;AAAOsH,MAAAA;AAAP,QAAkBD,gBAAxB;AACA,UAAMzD,GAAG,GAAGxB,IAAI,CAACkF,MAAD,CAAhB;AACA,UAAMlK,aAAa,GAAG2V,kBAAkB,CAAC1L,gBAAD,CAAlB,IAAwCrH,GAAG,KAAK,CAAC,CAAvE;;AAGA,QACE9D,GAAG,KAAK,WAAR,IACGkB,aADH,IAEGuG,UAAU,CAACC,GAAD,CAFb,IAGG,CAACA,GAAG,CAAC9H,UAHR,IAIG8H,GAAG,CAACT,KAAJ,KAAc,CALnB,EAME;AACA,UAAIwU,YAAY,GAAG,CAAC,CAApB;;AACA,WAAK,IAAIpR,CAAC,GAAGc,gBAAgB,CAACC,MAAjB,GAA0B,CAAvC,EAA0Cf,CAAC,IAAI,CAA/C,EAAkDA,CAAC,EAAnD,EAAuD;AACrD,cAAMqR,SAAS,GAAGxV,IAAI,CAACmE,CAAD,CAAtB;;AACA,YAAI5C,UAAU,CAACiU,SAAD,CAAV,IAAyBA,SAAS,CAACrU,EAAV,KAAiBK,GAAG,CAACV,QAAlD,EAA4D;AAC1DyU,UAAAA,YAAY,GAAGpR,CAAf;AACA;AACD;AACF;;AACD,UAAIoR,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACvB,eAAO;AAAE3X,UAAAA,GAAF;AAAOsH,UAAAA,MAAM,EAAEqQ;AAAf,SAAP;AACD;AACF;;AAED,UAAME,OAAO,GAAG1Z,OAAO,CAAC6B,GAAG,GAAG,CAAP,CAAvB;;AAEA,YAAQ9D,GAAR;AACE,WAAK,SAAL;AACE,eAAO;AAAE8D,UAAAA,GAAF;AAAOsH,UAAAA,MAAM,EAAEA,MAAM,GAAG;AAAxB,SAAP;;AACF,WAAK,WAAL;AACE,eAAO;AAAEtH,UAAAA,GAAF;AAAOsH,UAAAA,MAAM,EAAEA,MAAM,GAAG;AAAxB,SAAP;;AACF,WAAK,WAAL;AACE,eAAOuQ,OAAO,IAAIA,OAAO,CAAC9a,MAAnB,GAA4B;AAAEiD,UAAAA,GAAF;AAAOsH,UAAAA;AAAP,SAA5B,GAA8C;AAAEtH,UAAAA,GAAG,EAAEA,GAAG,GAAG,CAAb;AAAgBsH,UAAAA;AAAhB,SAArD;;AACF,WAAK,YAAL;AACE,eAAO;AAAEtH,UAAAA,GAAG,EAAEA,GAAG,GAAG,CAAb;AAAgBsH,UAAAA;AAAhB,SAAP;;AACF,WAAK,KAAL;AACE,YAAID,gBAAgB,CAACrH,GAAjB,KAAyB,CAAC,CAA1B,IAA+BqH,gBAAgB,CAACC,MAAjB,KAA4B,CAAC,CAAhE,EAAmE;AACjE,iBAAOjM,QAAQ,GAAG;AAAE2E,YAAAA,GAAG,EAAE7B,OAAO,CAACuC,MAAR,GAAiB,CAAxB;AAA2B4G,YAAAA,MAAM,EAAElF,IAAI,CAAC1B,MAAL,GAAc;AAAjD,WAAH,GAA0D;AAAEV,YAAAA,GAAG,EAAE,CAAP;AAAUsH,YAAAA,MAAM,EAAE;AAAlB,WAAzE;AACD;;AACD,eAAO;AAAEtH,UAAAA,GAAG,EAAEA,GAAG,IAAI3E,QAAQ,GAAG,CAAC,CAAJ,GAAQ,CAApB,CAAV;AAAkCiM,UAAAA;AAAlC,SAAP;;AACF,WAAK,MAAL;AAEE,YAAIlK,aAAJ,EAAmB,OAAO;AAAE4C,UAAAA,GAAF;AAAOsH,UAAAA,MAAM,EAAE;AAAf,SAAP;AACnB,eAAOL,OAAO,GAAG;AAAEjH,UAAAA,GAAG,EAAE,CAAP;AAAUsH,UAAAA,MAAM,EAAE;AAAlB,SAAH,GAA2B;AAAEtH,UAAAA,GAAG,EAAE,CAAP;AAAUsH,UAAAA;AAAV,SAAzC;;AACF,WAAK,KAAL;AAEE,YAAIlK,aAAJ,EAAmB,OAAO;AAAE4C,UAAAA,GAAF;AAAOsH,UAAAA,MAAM,EAAElF,IAAI,CAAC1B,MAAL,GAAc;AAA7B,SAAP;AACnB,eAAOuG,OAAO,GAAG;AAAEjH,UAAAA,GAAG,EAAE7B,OAAO,CAACuC,MAAR,GAAiB,CAAxB;AAA2B4G,UAAAA,MAAM,EAAElF,IAAI,CAAC1B,MAAL,GAAc;AAAjD,SAAH,GAA0D;AAAEV,UAAAA,GAAG,EAAE7B,OAAO,CAACuC,MAAR,GAAiB,CAAxB;AAA2B4G,UAAAA;AAA3B,SAAxE;;AACF,WAAK,QAAL;AACE,eAAO;AAAEtH,UAAAA,GAAF;AAAOsH,UAAAA,MAAM,EAAEA,MAAM,GAAG1H,IAAI,CAACE,KAAL,CAAW+B,YAAY,GAAGD,SAA1B;AAAxB,SAAP;;AACF,WAAK,UAAL;AACE,eAAO;AAAE5B,UAAAA,GAAF;AAAOsH,UAAAA,MAAM,EAAEA,MAAM,GAAG1H,IAAI,CAACE,KAAL,CAAW+B,YAAY,GAAGD,SAA1B;AAAxB,SAAP;;AACF;AACE,eAAOyF,gBAAP;AA3BJ;AA6BD;;AAED,WAASqN,QAAT,CAAkBrY,KAAlB,EAA8D;AAC5D,QAAIgL,gBAAgB,CAACwH,IAAjB,KAA0B,MAA9B,EAAsC;AAAA;;AACpC,YAAMiJ,YAAY,uDAAG3Z,OAAO,CAACkJ,gBAAgB,CAACrH,GAAlB,CAAP,CAA8B8M,aAAjC,qBAAG,uBAA6CgL,YAAhD,qCAAgEpR,kBAAlF;AACA,UAAI,CAACoR,YAAY,CAACzb,KAAD,CAAjB,EAA0B;AAC3B;;AACD,UAAM;AAAEH,MAAAA,GAAF;AAAOb,MAAAA;AAAP,QAAoBgB,KAA1B;AACA,UAAM4K,OAAO,GAAGD,iBAAiB,CAAC3K,KAAD,CAAjC;AACA,QAAIsL,YAAY,GAAG+P,eAAe,CAACxb,GAAD,EAAM+K,OAAN,EAAe5L,QAAf,CAAlC;AACA,QAAIwT,IAAI,GAAGnH,kBAAX;;AACA,QAAIxL,GAAG,KAAK,KAAZ,EAAmB;AAEjB,UAAI+L,WAAW,CAAC;AAAE5M,QAAAA,QAAF;AAAYqM,QAAAA,kBAAZ;AAAgCvJ,QAAAA,OAAhC;AAAyC+D,QAAAA,SAAS,EAAEE,IAAI,CAAC1B,MAAzD;AAAiE2G,QAAAA;AAAjE,OAAD,CAAf,EAAsG;AACpG0N,QAAAA,mBAAmB;AAEnB;AACD;;AAEDlG,MAAAA,IAAI,GAAGnH,kBAAkB,KAAK,MAAvB,GACH,YADG,GAEHA,kBAFJ;AAGD;;AAGDrL,IAAAA,KAAK,CAACwJ,cAAN;AAEA8B,IAAAA,YAAY,GAAGF,2BAA2B,CAAQ;AAChDtJ,MAAAA,OADgD;AAEhD+D,MAAAA,SAAS,EAAEE,IAAI,CAAC1B,MAFgC;AAGhDgH,MAAAA,kBAAkB,EAAEmH,IAH4B;AAIhDlH,MAAAA;AAJgD,KAAR,CAA1C;AAOAgC,IAAAA,UAAU,CAAChC,YAAD,CAAV;AACD;;AAED,WAASsG,qBAAT,CAA+B8J,aAA/B,EAAsD/W,MAAtD,EAA0F;AACxF,UAAM;AAAEsG,MAAAA;AAAF,QAAaD,gBAAnB;AACA,QAAI0C,iBAAiB,KAAKtR,SAA1B,EAAqC;AACrC,QAAIuR,oBAAoB,KAAKvR,SAA7B,EAAwC;AACxC,QAAI,CAACuR,oBAAoB,CAAC0J,IAArB,CAA0BnN,CAAC,IAAIA,CAAC,KAAKvF,MAArC,CAAL,EAAmD;AACnD,QAAIsG,MAAM,GAAGyC,iBAAT,KAA+BgO,aAAa,GAAGzQ,MAAhB,IAA0ByQ,aAAa,GAAGhO,iBAAzE,CAAJ,EAAiG;AACjG,QAAIzC,MAAM,GAAGyC,iBAAT,KAA+BgO,aAAa,GAAGzQ,MAAhB,IAA0ByQ,aAAa,GAAGhO,iBAAzE,CAAJ,EAAiG;AAEjG,QAAIR,aAAa,GAAG,KAApB;;AAEA,QAAIjC,MAAM,KAAKyC,iBAAX,IAAgCgO,aAAa,KAAKzQ,MAAtD,EAA8D;AAC1DiC,MAAAA,aAAa,GAAGS,oBAAoB,CAAC0J,IAArB,CAA0BnN,CAAC,IAAIA,CAAC,KAAKvF,MAArC,CAAhB;AACH,KAFD,MAEO;AACHuI,MAAAA,aAAa,GAAGjC,MAAM,IAAIyC,iBAAV,GACZzC,MAAM,IAAIyQ,aAAV,IAA2BA,aAAa,IAAIhO,iBAA5C,IAAiEC,oBAAoB,CAAC0J,IAArB,CAA0BnN,CAAC,IAAIA,CAAC,KAAKvF,MAArC,CADrD,GAEZsG,MAAM,IAAIyQ,aAAV,IAA2BA,aAAa,IAAIhO,iBAA5C,IAAiEC,oBAAoB,CAAC0J,IAArB,CAA0BnN,CAAC,IAAIA,CAAC,KAAKvF,MAArC,CAFrE;AAGH;;AAED,WAAOuI,aAAa,GAAGvI,MAAH,GAAYvI,SAAhC;AACD;;AAED,WAASuf,oBAAT,CAA8B1Q,MAA9B,EAAgG;AAC9F,QAAID,gBAAgB,CAACC,MAAjB,KAA4BA,MAAhC,EAAwC;;AAExC,QAAID,gBAAgB,CAACwH,IAAjB,KAA0B,MAA9B,EAAsC;AACpC,aAAO;AACLA,QAAAA,IAAI,EAAE,MADD;AAEL7O,QAAAA,GAAG,EAAEqH,gBAAgB,CAACrH,GAFjB;AAGL8O,QAAAA,SAAS,EAAE7S,aAHN;AAILgR,QAAAA,WAAW,EAAE;AACXF,UAAAA,kBADW;AAEXnL,UAAAA,SAFW;AAGXgC,UAAAA,GAAG,EAAEyD,gBAAgB,CAACzD,GAHX;AAIX8F,UAAAA,WAAW,EAAEwN,qBAJF;AAKXe,UAAAA,OAAO,EAAEb;AALE;AAJR,OAAP;AAYD;;AAED,WAAO;AACLvI,MAAAA,IAAI,EAAE,QADD;AAEL7O,MAAAA,GAAG,EAAEqH,gBAAgB,CAACrH,GAFjB;AAGL+O,MAAAA,OAAO,EAAE6F,WAHJ;AAIL9F,MAAAA,SAAS,EAAE7S,aAJN;AAKLuN,MAAAA,eAAe,EAAEsJ,qBAAqB,IAAI+C,cAAc,CAACxO,gBAAD,CAAvC,GACb;AAAE6Q,QAAAA,WAAW,EAAEtM,eAAf;AAAgCnC,QAAAA,aAAa,EAAEsC;AAA/C,OADa,GAEbtT;AAPC,KAAP;AASD;;AAED,WAAS0f,gBAAT,CAA0BvU,GAA1B,EAAsD;AAClD,QAAI0N,WAAW,KAAK,IAApB,EAA0B,OAAO7Y,SAAP;AAE1B,QAAI,OAAOiQ,YAAP,KAAwB,UAA5B,EAAwC,OAAOjQ,SAAP;AAExC,UAAMyD,GAAG,GAAGwM,YAAY,CAAC9E,GAAD,CAAxB;;AAEA,QAAI0N,WAAW,CAAClP,IAAZ,CAAiBsR,IAAjB,CAAsBuC,CAAC,IAAIvN,YAAY,CAACuN,CAAD,CAAZ,KAAoB/Z,GAA/C,CAAJ,EAAyD;AACrD,aAAOiC,OAAO,CAACia,SAAR,CAAkBC,CAAC,IAAIA,CAAC,CAACnc,GAAF,KAAUoV,WAAW,CAACoE,SAA7C,CAAP;AACH;;AAED,WAAOjd,SAAP;AACH;;AAED,WAASwR,kBAAT,CAA4BrG,GAA5B,EAA6C;AACzC,QAAI0N,WAAW,KAAK,IAApB,EAA0B,OAAO,KAAP;AAC1B,QAAI,OAAO5I,YAAP,KAAwB,UAA5B,EAAwC,OAAO,KAAP;AACxC,UAAMxM,GAAG,GAAGwM,YAAY,CAAC9E,GAAD,CAAxB;AACA,WAAO8E,YAAY,CAAC4I,WAAW,CAAClP,IAAZ,CAAiB,CAAjB,CAAD,CAAZ,KAAsClG,GAA7C;AACH;;AAED,WAASgO,iBAAT,CAA2BtG,GAA3B,EAA4C;AACxC,QAAI0N,WAAW,KAAK,IAApB,EAA0B,OAAO,KAAP;AAC1B,QAAI,OAAO5I,YAAP,KAAwB,UAA5B,EAAwC,OAAO,KAAP;AACxC,UAAMxM,GAAG,GAAGwM,YAAY,CAAC9E,GAAD,CAAxB;AACA,WAAO8E,YAAY,CAAC4I,WAAW,CAAClP,IAAZ,CAAiBkP,WAAW,CAAClP,IAAZ,CAAiB1B,MAAjB,GAA0B,CAA3C,CAAD,CAAZ,KAAgExE,GAAvE;AACH;;AAED,WAASoc,eAAT,GAA2B;AACzB,UAAMC,WAAW,GAAG,EAApB;AACA,QAAIhW,aAAa,GAAG,CAApB;;AACA,SAAK,IAAI+E,MAAM,GAAGtD,mBAAlB,EAAuCsD,MAAM,IAAIrD,iBAAjD,EAAoEqD,MAAM,EAA1E,EAA8E;AAC5E,YAAM1D,GAAG,GAAGxB,IAAI,CAACkF,MAAD,CAAhB;AACA,YAAM+F,GAAG,GAAG/F,MAAM,GAAG1F,SAAT,GAAqB8Q,iBAAjC;;AACA,UAAI/O,UAAU,CAACC,GAAD,CAAd,EAAqB;AACnB,SAAC;AAAErB,UAAAA;AAAF,YAAoBqB,GAArB;AACA2U,QAAAA,WAAW,CAACrY,IAAZ,eACE,oBAAC,gBAAD;AACE,wBAAY0D,GAAG,CAACT,KAAJ,GAAY,CAD1B;AAEE,0BAAcS,GAAG,CAACH,OAFpB;AAGE,2BAAeG,GAAG,CAACN,QAAJ,GAAe,CAHhC;AAIE,2BAAekP,eAAe,GAAGjQ,aAAlB,GAAkC,CAJnD;AAKE,UAAA,GAAG,EAAEqB,GAAG,CAACL,EALX;AAME,UAAA,EAAE,EAAEK,GAAG,CAACL,EANV;AAOE,UAAA,QAAQ,EAAEK,GAAG,CAAC/H,QAPhB;AAQE,UAAA,eAAe,EAAEkF,eARnB;AASE,UAAA,SAAS,EAAE6C,GAAG,CAAClB,SATjB;AAUE,UAAA,MAAM,EAAE4E,MAVV;AAWE,UAAA,GAAG,EAAE+F,GAXP;AAYE,UAAA,KAAK,EAAEzJ,GAAG,CAACT,KAZb;AAaE,UAAA,UAAU,EAAES,GAAG,CAAC9H,UAblB;AAcE,UAAA,eAAe,EAAEuL,gBAAgB,CAACC,MAAjB,KAA4BA,MAA5B,GAAqCD,gBAAgB,CAACrH,GAAtD,GAA4DvH,SAd/E;AAeE,UAAA,aAAa,EAAEka,YAAY,IAAI/O,GAAG,CAAClB,SAAJ,CAAc8V,KAAd,CAAoBC,EAAE,IAAIrI,YAAJ,oBAAIA,YAAY,CAAEnP,GAAd,CAAkByH,YAAY,CAAE+P,EAAF,CAA9B,CAA1B,CAfjC;AAgBE,UAAA,OAAO,EAAEpR,gBAAgB,CAACC,MAAjB,KAA4BA,MAA5B,GAAqCsN,WAArC,GAAmDnc,SAhB9D;AAiBE,UAAA,SAAS,EAAE4O,gBAAgB,CAACC,MAAjB,KAA4BA,MAA5B,GAAqCrL,aAArC,GAAqDxD,SAjBlE;AAkBE,UAAA,UAAU,EAAEiT,iBAlBd;AAmBE,UAAA,SAAS,EAAE2G,gBAnBb;AAoBE,UAAA,WAAW,EAAEnD;AApBf,UADF;AAyBA;AACD;;AAED3M,MAAAA,aAAa;AACb,UAAIrG,GAAc,GAAG0W,SAAS,GAAGrQ,aAAH,GAAmB+E,MAAjD;AACA,UAAIlK,aAAa,GAAG,KAApB;;AACA,UAAI,OAAOsL,YAAP,KAAwB,UAA5B,EAAwC;AAAA;;AACtCxM,QAAAA,GAAG,GAAGwM,YAAY,CAAC9E,GAAD,CAAlB;AACAxG,QAAAA,aAAa,wBAAGgT,YAAH,oBAAGA,YAAY,CAAEnP,GAAd,CAAkB/E,GAAlB,CAAH,gCAA6B,KAA1C;AACD;;AAEDqc,MAAAA,WAAW,CAACrY,IAAZ,eACE,oBAAC,WAAD;AACE,yBAAesS,eAAe,IAAII,SAAS,GAAGrQ,aAAH,GAAmB+E,MAAhC,CAAf,GAAyD,CAD1E;AAEE,yBAAeqL,YAAY,GAAGvV,aAAH,GAAmB3E,SAFhD;AAGE,QAAA,GAAG,EAAEyD,GAHP;AAIE,QAAA,MAAM,EAAEoL,MAJV;AAKE,QAAA,GAAG,EAAE1D,GALP;AAME,QAAA,eAAe,EAAE7C,eANnB;AAOE,QAAA,SAAS,EAAEzH,SAPb;AAQE,QAAA,aAAa,EAAE8D,aARjB;AASE,QAAA,UAAU,EAAEgR,UATd;AAUE,QAAA,QAAQ,EAAEC,QAVZ;AAWE,QAAA,GAAG,EAAEhB,GAXP;AAYE,QAAA,aAAa,EAAEiE,WAAW,KAAK,IAAhB,GAAuB6G,gBAAgB,CAACvU,GAAD,CAAvC,GAA+CnL,SAZhE;AAaE,QAAA,kBAAkB,EAAE6Y,WAAW,KAAK,IAAhB,IAAwBrH,kBAAkB,CAACrG,GAAD,CAbhE;AAcE,QAAA,iBAAiB,EAAE0N,WAAW,KAAK,IAAhB,IAAwBpH,iBAAiB,CAACtG,GAAD,CAd9D;AAeE,QAAA,qBAAqB,EAAEqK,qBAfzB;AAgBE,QAAA,oBAAoB,EAAEuD,UAAU,GAAGlD,oBAAH,GAA0B7V,SAhB5D;AAiBE,QAAA,uBAAuB,EAAE+Y,UAAU,GAAGjD,uBAAH,GAA6B9V,SAjBlE;AAkBE,QAAA,iBAAiB,EAAEuf,oBAAoB,CAAC1Q,MAAD,CAlBzC;AAmBE,QAAA,WAAW,EAAEgL,+BAnBf;AAoBE,QAAA,UAAU,EAAE5G,iBApBd;AAqBE,QAAA,SAAS,EAAE2G,gBArBb;AAsBE,QAAA,mBAAmB,EAAEzI,mBAtBvB;AAuBE,QAAA,gBAAgB,EAAEvC,gBAvBpB;AAwBE,QAAA,YAAY,EAAE0C,iBAAiB,IAAIA,iBAAiB,GAAG1C,gBAAgB,CAACC,MAA1D,GAAmEyC,iBAAnE,GAAuF1C,gBAAgB,CAACC,MAxBxH;AAyBE,QAAA,eAAe,EAAE;AACb4Q,UAAAA,WAAW,EAAEtM,eADA;AAEbnC,UAAAA,aAAa,EAAEsC;AAFF,SAzBnB;AA6BE,QAAA,SAAS,EAAE5B,SA7Bb;AA8BE,QAAA,cAAc,EAAE9C,gBAAgB,CAACC,MAAjB,KAA4ByC,iBA9B9C;AA+BE,QAAA,iBAAiB,EAAEM,iBA/BrB;AAgCE,QAAA,iBAAiB,EAAEN,iBAhCrB;AAiCE,QAAA,oBAAoB,EAAEC,oBAjCxB;AAkCE,QAAA,UAAU,EAAErM,UAlCd;AAmCE,QAAA,aAAa,EAAEtE,OAAO,CAACnB,OAAR,GAAkBmB,OAAO,CAACnB,OAAR,CAAgBof,WAAhB,GAA8B3Z,UAA9B,IAA4CU,gBAA9D,GAAiF,KAnClG;AAoCE,QAAA,SAAS,EAAEiM;AApCb,QADF;AAwCD;;AAED,WAAOiO,WAAP;AACD;;AAGD,MAAIlR,gBAAgB,CAACrH,GAAjB,IAAwB7B,OAAO,CAACuC,MAAhC,IAA0C2G,gBAAgB,CAACC,MAAjB,IAA2BlF,IAAI,CAAC1B,MAA9E,EAAsF;AACpF2Q,IAAAA,mBAAmB,CAAC;AAAErR,MAAAA,GAAG,EAAE,CAAC,CAAR;AAAWsH,MAAAA,MAAM,EAAE,CAAC,CAApB;AAAuBuH,MAAAA,IAAI,EAAE;AAA7B,KAAD,CAAnB;AACAP,IAAAA,oBAAoB,CAAC7V,SAAD,CAApB;AACD;;AAED,MAAI4O,gBAAgB,CAACwH,IAAjB,KAA0B,MAA1B,IAAoCzM,IAAI,CAACiF,gBAAgB,CAACC,MAAlB,CAAJ,KAAkCD,gBAAgB,CAAC4N,WAA3F,EAAwG;AAEtGR,IAAAA,WAAW;AACZ;;AAED,QAAMxP,aAAa,GAAG5L,OAAO,CAACnB,OAAR,GAAkBmB,OAAO,CAACnB,OAAR,CAAgBof,WAAhB,GAA8B3Z,UAA9B,IAA4CU,gBAA9D,GAAiF,KAAvG;AAEA,sBACE;AACE,IAAA,IAAI,EAAEuU,SAAS,GAAG,UAAH,GAAgB,MADjC;AAEE,kBAAY/X,SAFd;AAGE,uBAAiBC,cAHnB;AAIE,wBAAkBkW,eAJpB;AAKE,4BAAsB2B,YAAY,GAAG,IAAH,GAAUla,SAL9C;AAME,qBAAe0F,OAAO,CAACuC,MANzB;AAOE,qBAAe8R,eAAe,GAAGtQ,SAAlB,GAA8BuQ,gBAP/C;AAQE,IAAA,SAAS,EAAEzM,IAAI,CAAC,KAAD,EAAiDD,SAAjD,EAAmCyL,UAAnC,IAAU,uBAAV,CARjB;AASE,IAAA,KAAK,EAAE,EACL,GAAGrL,KADE;AAEL,6BAAwB,GAAE+J,eAAgB,IAFrC;AAGL,6BAAwB,GAAEC,mBAAoB,IAHzC;AAIL,qBAAgB,GAAE9R,gBAAiB,IAJ9B;AAKL,sBAAiB,GAAEuD,SAAU;AALxB,KATT;AAgBE,IAAA,GAAG,EAAEvI,OAhBP;AAiBE,IAAA,QAAQ,EAAEwb;AAjBZ,kBAmBE,oBAACpM,WAAD;AACE,IAAA,YAAY,EAAEC,YADhB;AAEE,IAAA,IAAI,EAAE/G,OAFR;AAGE,IAAA,OAAO,EAAEZ,eAHX;AAIE,IAAA,cAAc,EAAEuS,kBAJlB;AAKE,IAAA,eAAe,EAAE,CAAAlD,YAAY,QAAZ,YAAAA,YAAY,CAAEsI,IAAd,MAAuB/W,OAAO,CAACjB,MALlD;AAME,IAAA,oBAAoB,EAAEiI,oBANxB;AAOE,IAAA,UAAU,EAAEnE,UAPd;AAQE,IAAA,aAAa,EAAEC,aARjB;AASE,IAAA,MAAM,EAAEF,MATV;AAUE,IAAA,SAAS,EAAEjL,SAVb;AAWE,IAAA,UAAU,EAAEqE,UAXd;AAYE,IAAA,aAAa,EAAEsH;AAZjB,IAnBF,EAiCG6L,eAAe,iBACd,oBAAC9H,WAAD;AACE,IAAA,OAAO,EAAEjI,eADX;AAEE,IAAA,OAAO,EAAEkI,OAFX;AAGE,IAAA,eAAe,EAAEC;AAHnB,IAlCJ,EAwCG9G,IAAI,CAAC1B,MAAL,KAAgB,CAAhB,IAAqB+P,iBAArB,gBAAyC,oBAAC,iBAAD,OAAzC,gBACC,uDACE;AACE,IAAA,GAAG,EAAEqB,YADP;AAEE,IAAA,QAAQ,EAAE,CAFZ;AAGE,IAAA,SAAS,EAAC,gBAHZ;AAIE,IAAA,SAAS,EAAE7V;AAJb,IADF,eAOE;AAAK,IAAA,KAAK,EAAE;AAAEjC,MAAAA,MAAM,EAAE4F,IAAI,CAACC,GAAL,CAASuC,IAAI,CAAC1B,MAAL,GAAckB,SAAvB,EAAkCC,YAAlC,CAAV;AAA2DuT,MAAAA,QAAQ,EAAE,QAArE;AAA+E5W,MAAAA,IAAI,EAAE;AAArF;AAAZ,KACCuS,gBAAgB,iBACb;AACE,IAAA,SAAS,EAAC,kBADZ;AAEE,IAAA,KAAK,EAAE;AACH4H,MAAAA,SAAS,EAAE1T,aAAa,GAAG,MAAH,GAAY,sCADjC;AAEHlL,MAAAA,KAAK,EAAEkL,aAAa,GAAG,EAAH,GAAQ,EAFzB;AAGH2T,MAAAA,UAAU,EAAE3T,aAAa,GAAG,mBAAH,GAAyB;AAH/C;AAFT,IAFJ,CAPF,EAmBGqT,eAAe,EAnBlB,EAoBGtI,WApBH,oBAoBGA,WAAW,CAAEpR,GAAb,CAAiB,CAACgF,GAAD,EAAM0D,MAAN,kBAChB,oBAACsI,YAAD;AACE,qBAAe4C,eAAe,GAAGtQ,SAAlB,GAA8BoF,MAA9B,GAAuC,CADxD;AAEE,IAAA,GAAG,EAAEA,MAFP;AAGE,IAAA,MAAM,EAAEA,MAHV;AAIE,IAAA,GAAG,EAAE1D,GAJP;AAKE,IAAA,MAAM,EAAEhC,SAAS,IAAIoO,WAAW,CAACtP,MAAZ,GAAqB,CAArB,GAAyB4G,MAA7B,CALnB;AAME,IAAA,eAAe,EAAEvG;AANnB,IADD,CApBH,CAzCJ,CADF;AA4ED;;AAED,gCAAe4L,UAAU,CAACoD,QAAD,CAAzB;;ACrnCA,SAAS8I,kBAAT,CAA4BC,KAA5B,EAA4D;AACxDA,EAAAA,KAAK,QAAL,YAAAA,KAAK,CAAExe,KAAP;AACH;;AAEc,SAASye,UAAT,CAAiD;AAC5DnV,EAAAA,GAD4D;AAE5D5E,EAAAA,MAF4D;AAG5D0K,EAAAA,WAH4D;AAI5DuO,EAAAA;AAJ4D,CAAjD,EAKoB;AAC/B,QAAMxc,IAAI,GAAGmI,GAAG,CAAC5E,MAAM,CAAC9C,GAAR,CAAhB;AACA,SAAO,OAAOT,IAAP,KAAgB,QAAhB,gBACH;AACI,IAAA,SAAS,EAAEuD,MAAM,CAACkH,SAAP,KAAqB,OAArB,GAA+B,uBAA/B,GAAyD,iBADxE;AAEI,IAAA,GAAG,EAAE2S,kBAFT;AAGI,IAAA,KAAK,EAAEpd,IAHX;AAII,IAAA,QAAQ,EAAEY,KAAK,IAAIqN,WAAW,CAAC,EAAE,GAAG9F,GAAL;AAAU,OAAC5E,MAAM,CAAC9C,GAAR,GAAcG,KAAK,CAACnB,MAAN,CAAaT;AAArC,KAAD,CAJlC;AAKI,IAAA,MAAM,EAAE,MAAMwd,OAAO,CAAC,IAAD;AALzB,IADG,gBASH;AACI,IAAA,SAAS,EAAEjZ,MAAM,CAACkH,SAAP,KAAqB,OAArB,GAA+B,uBAA/B,GAAyD,iBADxE;AAEI,IAAA,GAAG,EAAE2S,kBAFT;AAGI,IAAA,KAAK,EAAEpd,IAAI,CAAChB,KAHhB;AAII,IAAA,QAAQ,EAAE4B,KAAK,IAAIqN,WAAW,CAAC,EAAE,GAAG9F,GAAL;AAAU,OAAC5E,MAAM,CAAC9C,GAAR,GAAc,EAAE,GAAGT,IAAL;AAAWhB,QAAAA,KAAK,EAAE4B,KAAK,CAACnB,MAAN,CAAaT;AAA/B;AAAxB,KAAD,CAJlC;AAKI,IAAA,MAAM,EAAE,MAAMwd,OAAO,CAAC,IAAD;AALzB,IATJ;AAiBH;;;;;"}